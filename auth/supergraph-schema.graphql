schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION) {
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(
  external: Boolean
  graph: join__Graph
  override: String
  provides: join__FieldSet
  requires: join__FieldSet
  type: String
  usedOverridden: Boolean
) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(
  graph: join__Graph!
  interface: String!
) repeatable on INTERFACE | OBJECT

directive @join__type(
  extension: Boolean! = false
  graph: join__Graph!
  isInterfaceObject: Boolean! = false
  key: join__FieldSet
  resolvable: Boolean! = true
) repeatable on ENUM | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

directive @join__unionMember(
  graph: join__Graph!
  member: String!
) repeatable on UNION

directive @link(
  as: String
  for: link__Purpose
  import: [link__Import]
  url: String
) repeatable on SCHEMA

type Address @join__type(graph: CORE) {
  _count: AddressCount!
  addressLine1: String!
  addressLine2: String
  billingCompanies: [Company!]
  city: String!
  companies: [Company!]
  countryCode: String
  id: ID!
  name: String
  postalCode: String!
}

type AddressAvgAggregate @join__type(graph: CORE) {
  id: Float
}

type AddressCount @join__type(graph: CORE) {
  billingCompanies: Int!
  companies: Int!
}

type AddressCountAggregate @join__type(graph: CORE) {
  _all: Int!
  addressLine1: Int!
  addressLine2: Int!
  city: Int!
  countryCode: Int!
  id: Int!
  name: Int!
  postalCode: Int!
}

input AddressCreateNestedOneWithoutBillingCompaniesInput
  @join__type(graph: CORE) {
  connect: AddressWhereUniqueInput
  connectOrCreate: AddressCreateOrConnectWithoutBillingCompaniesInput
  create: AddressCreateWithoutBillingCompaniesInput
}

input AddressCreateNestedOneWithoutCompaniesInput @join__type(graph: CORE) {
  connect: AddressWhereUniqueInput
  connectOrCreate: AddressCreateOrConnectWithoutCompaniesInput
  create: AddressCreateWithoutCompaniesInput
}

input AddressCreateOrConnectWithoutBillingCompaniesInput
  @join__type(graph: CORE) {
  create: AddressCreateWithoutBillingCompaniesInput!
  where: AddressWhereUniqueInput!
}

input AddressCreateOrConnectWithoutCompaniesInput @join__type(graph: CORE) {
  create: AddressCreateWithoutCompaniesInput!
  where: AddressWhereUniqueInput!
}

input AddressCreateWithoutBillingCompaniesInput @join__type(graph: CORE) {
  addressLine1: String!
  addressLine2: String
  city: String!
  companies: CompanyCreateNestedManyWithoutAddressInput
  countryCode: String
  name: String
  postalCode: String!
}

input AddressCreateWithoutCompaniesInput @join__type(graph: CORE) {
  addressLine1: String!
  addressLine2: String
  billingCompanies: CompanyCreateNestedManyWithoutBillingAddressInput
  city: String!
  countryCode: String
  name: String
  postalCode: String!
}

type AddressMaxAggregate @join__type(graph: CORE) {
  addressLine1: String
  addressLine2: String
  city: String
  countryCode: String
  id: Int
  name: String
  postalCode: String
}

type AddressMinAggregate @join__type(graph: CORE) {
  addressLine1: String
  addressLine2: String
  city: String
  countryCode: String
  id: Int
  name: String
  postalCode: String
}

input AddressNullableRelationFilter @join__type(graph: CORE) {
  is: AddressWhereInput
  isNot: AddressWhereInput
}

input AddressOrderByWithRelationInput @join__type(graph: CORE) {
  addressLine1: SortOrder
  addressLine2: SortOrderInput
  billingCompanies: CompanyOrderByRelationAggregateInput
  city: SortOrder
  companies: CompanyOrderByRelationAggregateInput
  countryCode: SortOrderInput
  id: SortOrder
  name: SortOrderInput
  postalCode: SortOrder
}

type AddressSumAggregate @join__type(graph: CORE) {
  id: Int
}

input AddressUpdateOneWithoutBillingCompaniesNestedInput
  @join__type(graph: CORE) {
  connect: AddressWhereUniqueInput
  connectOrCreate: AddressCreateOrConnectWithoutBillingCompaniesInput
  create: AddressCreateWithoutBillingCompaniesInput
  delete: AddressWhereInput
  disconnect: AddressWhereInput
  update: AddressUpdateToOneWithWhereWithoutBillingCompaniesInput
  upsert: AddressUpsertWithoutBillingCompaniesInput
}

input AddressUpdateOneWithoutCompaniesNestedInput @join__type(graph: CORE) {
  connect: AddressWhereUniqueInput
  connectOrCreate: AddressCreateOrConnectWithoutCompaniesInput
  create: AddressCreateWithoutCompaniesInput
  delete: AddressWhereInput
  disconnect: AddressWhereInput
  update: AddressUpdateToOneWithWhereWithoutCompaniesInput
  upsert: AddressUpsertWithoutCompaniesInput
}

input AddressUpdateToOneWithWhereWithoutBillingCompaniesInput
  @join__type(graph: CORE) {
  data: AddressUpdateWithoutBillingCompaniesInput!
  where: AddressWhereInput
}

input AddressUpdateToOneWithWhereWithoutCompaniesInput
  @join__type(graph: CORE) {
  data: AddressUpdateWithoutCompaniesInput!
  where: AddressWhereInput
}

input AddressUpdateWithoutBillingCompaniesInput @join__type(graph: CORE) {
  addressLine1: String
  addressLine2: String
  city: String
  companies: CompanyUpdateManyWithoutAddressNestedInput
  countryCode: String
  name: String
  postalCode: String
}

input AddressUpdateWithoutCompaniesInput @join__type(graph: CORE) {
  addressLine1: String
  addressLine2: String
  billingCompanies: CompanyUpdateManyWithoutBillingAddressNestedInput
  city: String
  countryCode: String
  name: String
  postalCode: String
}

input AddressUpsertWithoutBillingCompaniesInput @join__type(graph: CORE) {
  create: AddressCreateWithoutBillingCompaniesInput!
  update: AddressUpdateWithoutBillingCompaniesInput!
  where: AddressWhereInput
}

input AddressUpsertWithoutCompaniesInput @join__type(graph: CORE) {
  create: AddressCreateWithoutCompaniesInput!
  update: AddressUpdateWithoutCompaniesInput!
  where: AddressWhereInput
}

input AddressWhereInput @join__type(graph: CORE) {
  AND: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  addressLine1: StringFilter
  addressLine2: StringNullableFilter
  billingCompanies: CompanyListRelationFilter
  city: StringFilter
  companies: CompanyListRelationFilter
  countryCode: StringNullableFilter
  id: IntFilter
  name: StringNullableFilter
  postalCode: StringFilter
}

input AddressWhereUniqueInput @join__type(graph: CORE) {
  AND: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  addressLine1: StringFilter
  addressLine2: StringNullableFilter
  billingCompanies: CompanyListRelationFilter
  city: StringFilter
  companies: CompanyListRelationFilter
  countryCode: StringNullableFilter
  id: Int
  name: StringNullableFilter
  postalCode: StringFilter
}

type ApiCompany @join__type(graph: ASSIGNMENT_API) {
  _count: ApiCompanyCount!
  apiEmailRegex: String
  apiUserCompanies: [ApiUserCompany!]
  companyId: Int!
  defaultOwnerId: Int!
  id: ID!
}

type ApiCompanyAvgAggregate @join__type(graph: ASSIGNMENT_API) {
  companyId: Float
  defaultOwnerId: Float
  id: Float
}

type ApiCompanyCount @join__type(graph: ASSIGNMENT_API) {
  apiUserCompanies: Int!
}

type ApiCompanyCountAggregate @join__type(graph: ASSIGNMENT_API) {
  _all: Int!
  apiEmailRegex: Int!
  companyId: Int!
  defaultOwnerId: Int!
  id: Int!
}

type ApiCompanyMaxAggregate @join__type(graph: ASSIGNMENT_API) {
  apiEmailRegex: String
  companyId: Int
  defaultOwnerId: Int
  id: Int
}

type ApiCompanyMinAggregate @join__type(graph: ASSIGNMENT_API) {
  apiEmailRegex: String
  companyId: Int
  defaultOwnerId: Int
  id: Int
}

type ApiCompanySumAggregate @join__type(graph: ASSIGNMENT_API) {
  companyId: Int
  defaultOwnerId: Int
  id: Int
}

type ApiUserCompany @join__type(graph: ASSIGNMENT_API) {
  apiCompany: ApiCompany!
  apiCompanyId: Int!
  id: ID!
  userId: Int!
  userKey: String!
  usersCompaniesId: Int!
}

type ApiUserCompanyAvgAggregate @join__type(graph: ASSIGNMENT_API) {
  apiCompanyId: Float
  id: Float
  userId: Float
  usersCompaniesId: Float
}

type ApiUserCompanyCountAggregate @join__type(graph: ASSIGNMENT_API) {
  _all: Int!
  apiCompanyId: Int!
  id: Int!
  userId: Int!
  userKey: Int!
  usersCompaniesId: Int!
}

type ApiUserCompanyMaxAggregate @join__type(graph: ASSIGNMENT_API) {
  apiCompanyId: Int
  id: Int
  userId: Int
  userKey: String
  usersCompaniesId: Int
}

type ApiUserCompanyMinAggregate @join__type(graph: ASSIGNMENT_API) {
  apiCompanyId: Int
  id: Int
  userId: Int
  userKey: String
  usersCompaniesId: Int
}

type ApiUserCompanySumAggregate @join__type(graph: ASSIGNMENT_API) {
  apiCompanyId: Int
  id: Int
  userId: Int
  usersCompaniesId: Int
}

type ApplicationProfile @join__type(graph: CORE) {
  _count: ApplicationProfileCount!
  availability: Availability
  availableFrom: DateTime
  availableHours: Int
  background: String
  createdAt: DateTime!
  deletedAt: DateTime
  documents: [ApplicationProfileFile!]
  expertises: String
  id: ID!
  ownerId: Int!
  personalQualities: String
  rateFrom: Float
  rateTo: Float
  rateType: RateType
  title: String!
  updatedAt: DateTime!
  uuid: String!
}

type ApplicationProfileAvgAggregate @join__type(graph: CORE) {
  availableHours: Float
  id: Float
  ownerId: Float
  rateFrom: Float
  rateTo: Float
}

type ApplicationProfileCount @join__type(graph: CORE) {
  documents: Int!
}

type ApplicationProfileCountAggregate @join__type(graph: CORE) {
  _all: Int!
  availability: Int!
  availableFrom: Int!
  availableHours: Int!
  background: Int!
  createdAt: Int!
  deletedAt: Int!
  expertises: Int!
  id: Int!
  ownerId: Int!
  personalQualities: Int!
  rateFrom: Int!
  rateTo: Int!
  rateType: Int!
  title: Int!
  updatedAt: Int!
  uuid: Int!
}

input ApplicationProfileCreateInput @join__type(graph: CORE) {
  availability: Availability
  availableFrom: DateTime
  availableHours: Int
  background: String
  documents: ApplicationProfileFileCreateNestedManyWithoutApplicationProfileInput
  expertises: String
  personalQualities: String
  rateFrom: Float
  rateTo: Float
  rateType: RateType
  title: String!
}

type ApplicationProfileFile @join__type(graph: CORE) {
  applicationProfile: ApplicationProfile!
  applicationProfileId: Int!
  file: File!
  fileId: Int!
  id: ID!
}

type ApplicationProfileFileAvgAggregate @join__type(graph: CORE) {
  applicationProfileId: Float
  fileId: Float
  id: Float
}

type ApplicationProfileFileCountAggregate @join__type(graph: CORE) {
  _all: Int!
  applicationProfileId: Int!
  fileId: Int!
  id: Int!
}

input ApplicationProfileFileCreateManyApplicationProfileInput
  @join__type(graph: CORE) {
  fileId: Int!
  id: Int
}

input ApplicationProfileFileCreateManyApplicationProfileInputEnvelope
  @join__type(graph: CORE) {
  data: [ApplicationProfileFileCreateManyApplicationProfileInput!]!
  skipDuplicates: Boolean
}

input ApplicationProfileFileCreateNestedManyWithoutApplicationProfileInput
  @join__type(graph: CORE) {
  connect: [ApplicationProfileFileWhereUniqueInput!]
  connectOrCreate: [ApplicationProfileFileCreateOrConnectWithoutApplicationProfileInput!]
  create: [ApplicationProfileFileCreateWithoutApplicationProfileInput!]
  createMany: ApplicationProfileFileCreateManyApplicationProfileInputEnvelope
}

input ApplicationProfileFileCreateOrConnectWithoutApplicationProfileInput
  @join__type(graph: CORE) {
  create: ApplicationProfileFileCreateWithoutApplicationProfileInput!
  where: ApplicationProfileFileWhereUniqueInput!
}

input ApplicationProfileFileCreateWithoutApplicationProfileInput
  @join__type(graph: CORE) {
  file: FileCreateNestedOneWithoutApplicationProfileFilesInput!
}

input ApplicationProfileFileListRelationFilter @join__type(graph: CORE) {
  every: ApplicationProfileFileWhereInput
  none: ApplicationProfileFileWhereInput
  some: ApplicationProfileFileWhereInput
}

type ApplicationProfileFileMaxAggregate @join__type(graph: CORE) {
  applicationProfileId: Int
  fileId: Int
  id: Int
}

type ApplicationProfileFileMinAggregate @join__type(graph: CORE) {
  applicationProfileId: Int
  fileId: Int
  id: Int
}

input ApplicationProfileFileOrderByRelationAggregateInput
  @join__type(graph: CORE) {
  _count: SortOrder
}

input ApplicationProfileFileScalarWhereInput @join__type(graph: CORE) {
  AND: [ApplicationProfileFileScalarWhereInput!]
  NOT: [ApplicationProfileFileScalarWhereInput!]
  OR: [ApplicationProfileFileScalarWhereInput!]
  applicationProfileId: IntFilter
  fileId: IntFilter
  id: IntFilter
}

type ApplicationProfileFileSumAggregate @join__type(graph: CORE) {
  applicationProfileId: Int
  fileId: Int
  id: Int
}

input ApplicationProfileFileUncheckedUpdateManyWithoutApplicationProfileInput
  @join__type(graph: CORE) {
  fileId: Int
  id: Int
}

input ApplicationProfileFileUpdateManyWithWhereWithoutApplicationProfileInput
  @join__type(graph: CORE) {
  data: ApplicationProfileFileUncheckedUpdateManyWithoutApplicationProfileInput!
  where: ApplicationProfileFileScalarWhereInput!
}

input ApplicationProfileFileUpdateManyWithoutApplicationProfileNestedInput
  @join__type(graph: CORE) {
  connect: [ApplicationProfileFileWhereUniqueInput!]
  connectOrCreate: [ApplicationProfileFileCreateOrConnectWithoutApplicationProfileInput!]
  create: [ApplicationProfileFileCreateWithoutApplicationProfileInput!]
  createMany: ApplicationProfileFileCreateManyApplicationProfileInputEnvelope
  delete: [ApplicationProfileFileWhereUniqueInput!]
  deleteMany: [ApplicationProfileFileScalarWhereInput!]
  disconnect: [ApplicationProfileFileWhereUniqueInput!]
  set: [ApplicationProfileFileWhereUniqueInput!]
  update: [ApplicationProfileFileUpdateWithWhereUniqueWithoutApplicationProfileInput!]
  updateMany: [ApplicationProfileFileUpdateManyWithWhereWithoutApplicationProfileInput!]
  upsert: [ApplicationProfileFileUpsertWithWhereUniqueWithoutApplicationProfileInput!]
}

input ApplicationProfileFileUpdateWithWhereUniqueWithoutApplicationProfileInput
  @join__type(graph: CORE) {
  data: ApplicationProfileFileUpdateWithoutApplicationProfileInput!
  where: ApplicationProfileFileWhereUniqueInput!
}

input ApplicationProfileFileUpdateWithoutApplicationProfileInput
  @join__type(graph: CORE) {
  file: FileUpdateOneRequiredWithoutApplicationProfileFilesNestedInput
}

input ApplicationProfileFileUpsertWithWhereUniqueWithoutApplicationProfileInput
  @join__type(graph: CORE) {
  create: ApplicationProfileFileCreateWithoutApplicationProfileInput!
  update: ApplicationProfileFileUpdateWithoutApplicationProfileInput!
  where: ApplicationProfileFileWhereUniqueInput!
}

input ApplicationProfileFileWhereInput @join__type(graph: CORE) {
  AND: [ApplicationProfileFileWhereInput!]
  NOT: [ApplicationProfileFileWhereInput!]
  OR: [ApplicationProfileFileWhereInput!]
  applicationProfile: ApplicationProfileRelationFilter
  applicationProfileId: IntFilter
  file: FileRelationFilter
  fileId: IntFilter
  id: IntFilter
}

input ApplicationProfileFileWhereUniqueInput @join__type(graph: CORE) {
  AND: [ApplicationProfileFileWhereInput!]
  NOT: [ApplicationProfileFileWhereInput!]
  OR: [ApplicationProfileFileWhereInput!]
  applicationProfile: ApplicationProfileRelationFilter
  applicationProfileId: IntFilter
  file: FileRelationFilter
  fileId: IntFilter
  id: Int
}

type ApplicationProfileMaxAggregate @join__type(graph: CORE) {
  availability: Availability
  availableFrom: DateTime
  availableHours: Int
  background: String
  createdAt: DateTime
  deletedAt: DateTime
  expertises: String
  id: Int
  ownerId: Int
  personalQualities: String
  rateFrom: Float
  rateTo: Float
  rateType: RateType
  title: String
  updatedAt: DateTime
  uuid: String
}

type ApplicationProfileMinAggregate @join__type(graph: CORE) {
  availability: Availability
  availableFrom: DateTime
  availableHours: Int
  background: String
  createdAt: DateTime
  deletedAt: DateTime
  expertises: String
  id: Int
  ownerId: Int
  personalQualities: String
  rateFrom: Float
  rateTo: Float
  rateType: RateType
  title: String
  updatedAt: DateTime
  uuid: String
}

input ApplicationProfileOrderByWithRelationInput @join__type(graph: CORE) {
  availability: SortOrderInput
  availableFrom: SortOrderInput
  availableHours: SortOrderInput
  background: SortOrderInput
  createdAt: SortOrder
  deletedAt: SortOrderInput
  documents: ApplicationProfileFileOrderByRelationAggregateInput
  expertises: SortOrderInput
  id: SortOrder
  ownerId: SortOrder
  personalQualities: SortOrderInput
  rateFrom: SortOrderInput
  rateTo: SortOrderInput
  rateType: SortOrderInput
  title: SortOrder
  updatedAt: SortOrder
  uuid: SortOrder
}

input ApplicationProfileRelationFilter @join__type(graph: CORE) {
  is: ApplicationProfileWhereInput
  isNot: ApplicationProfileWhereInput
}

enum ApplicationProfileScalarFieldEnum @join__type(graph: CORE) {
  availability @join__enumValue(graph: CORE)
  availableFrom @join__enumValue(graph: CORE)
  availableHours @join__enumValue(graph: CORE)
  background @join__enumValue(graph: CORE)
  createdAt @join__enumValue(graph: CORE)
  deletedAt @join__enumValue(graph: CORE)
  expertises @join__enumValue(graph: CORE)
  id @join__enumValue(graph: CORE)
  ownerId @join__enumValue(graph: CORE)
  personalQualities @join__enumValue(graph: CORE)
  rateFrom @join__enumValue(graph: CORE)
  rateTo @join__enumValue(graph: CORE)
  rateType @join__enumValue(graph: CORE)
  title @join__enumValue(graph: CORE)
  updatedAt @join__enumValue(graph: CORE)
  uuid @join__enumValue(graph: CORE)
}

type ApplicationProfileSumAggregate @join__type(graph: CORE) {
  availableHours: Int
  id: Int
  ownerId: Int
  rateFrom: Float
  rateTo: Float
}

input ApplicationProfileUpdateInput @join__type(graph: CORE) {
  availability: Availability
  availableFrom: DateTime
  availableHours: Int
  background: String
  documents: ApplicationProfileFileUpdateManyWithoutApplicationProfileNestedInput
  expertises: String
  personalQualities: String
  rateFrom: Float
  rateTo: Float
  rateType: RateType
  title: String
}

input ApplicationProfileWhereInput @join__type(graph: CORE) {
  AND: [ApplicationProfileWhereInput!]
  NOT: [ApplicationProfileWhereInput!]
  OR: [ApplicationProfileWhereInput!]
  availability: EnumAvailabilityNullableFilter
  availableFrom: DateTimeNullableFilter
  availableHours: IntNullableFilter
  background: StringNullableFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  documents: ApplicationProfileFileListRelationFilter
  expertises: StringNullableFilter
  id: IntFilter
  ownerId: IntFilter
  personalQualities: StringNullableFilter
  rateFrom: FloatNullableFilter
  rateTo: FloatNullableFilter
  rateType: EnumRateTypeNullableFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  uuid: StringFilter
}

input ApplicationProfileWhereUniqueInput @join__type(graph: CORE) {
  AND: [ApplicationProfileWhereInput!]
  NOT: [ApplicationProfileWhereInput!]
  OR: [ApplicationProfileWhereInput!]
  availability: EnumAvailabilityNullableFilter
  availableFrom: DateTimeNullableFilter
  availableHours: IntNullableFilter
  background: StringNullableFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  documents: ApplicationProfileFileListRelationFilter
  expertises: StringNullableFilter
  id: Int
  ownerId: IntFilter
  personalQualities: StringNullableFilter
  rateFrom: FloatNullableFilter
  rateTo: FloatNullableFilter
  rateType: EnumRateTypeNullableFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  uuid: String
}

type Assignment
  @join__type(graph: CORE, key: "id")
  @join__type(graph: SEARCH, key: "id", extension: true) {
  _count: AssignmentCount! @join__field(graph: CORE)
  applicationDeadlineDate: DateTime @join__field(graph: CORE)
  applyEnabled: Boolean! @join__field(graph: CORE)
  assignmentApplications: [AssignmentApplication!] @join__field(graph: CORE)
  assignmentRead: [AssignmentRead!] @join__field(graph: CORE)
  commentsCount: Int! @join__field(graph: CORE)
  company: Company! @join__field(graph: CORE)
  companyId: Int! @join__field(graph: CORE)
  contractType: ContractType @join__field(graph: CORE)
  createdAt: DateTime! @join__field(graph: CORE)
  currentStatus: Status! @join__field(graph: CORE)
  customerRelation: CustomerRelation @join__field(graph: CORE)
  customerRelationCompany: String @join__field(graph: CORE)
  customerRelationCompanyVisible: Boolean! @join__field(graph: CORE)
  description: String @join__field(graph: CORE)
  descriptionIsVisible: Boolean! @join__field(graph: CORE)
  descriptionIsVisibleFrom: DateTime @join__field(graph: CORE)
  duration: Int @join__field(graph: CORE)
  durationExtendable: Boolean! @join__field(graph: CORE)
  durationType: DurationType @join__field(graph: CORE)
  expertises: [AssignmentExpertise!] @join__field(graph: CORE)
  externalCode: String @join__field(graph: CORE)
  hideInDescription: Boolean! @join__field(graph: CORE)
  hoursFrom: Float @join__field(graph: CORE)
  hoursTo: Float @join__field(graph: CORE)
  id: ID!
  isFavorite: Boolean! @join__field(graph: CORE)
  isRandomlyVisible: Boolean! @join__field(graph: CORE)
  isRead: Boolean! @join__field(graph: CORE)
  notVisibleReason: AssignmentNotVisibleReason @join__field(graph: CORE)
  onLocation: OnLocation @join__field(graph: CORE)
  owner: User! @join__field(graph: CORE)
  ownerId: Int! @join__field(graph: CORE)
  place: String @join__field(graph: CORE)
  province: String @join__field(graph: CORE)
  publishAt: DateTime @join__field(graph: CORE)
  publishUntil: DateTime @join__field(graph: CORE)
  rateFrom: Float @join__field(graph: CORE)
  rateTo: Float @join__field(graph: CORE)
  rateType: RateType @join__field(graph: CORE)
  replied: Boolean! @join__field(graph: CORE)
  reviewEnabled: Boolean! @join__field(graph: CORE)
  source: AssignmentSource! @join__field(graph: CORE)
  startAsap: Boolean! @join__field(graph: CORE)
  startDate: DateTime @join__field(graph: CORE)
  status: AssignmentStatus @join__field(graph: CORE)
  statusHistory: [Status!]! @join__field(graph: CORE)
  title: String @join__field(graph: CORE)
  type: AssignmentType @join__field(graph: CORE)
  updatedAt: DateTime! @join__field(graph: CORE)
  uuid: String! @join__field(graph: CORE)
  viewsCount: Int! @join__field(graph: CORE)
}

type AssignmentApplication @join__type(graph: CORE) {
  _count: AssignmentApplicationCount!
  assignment: Assignment!
  assignmentId: Int!
  availability: Availability
  availableFrom: DateTime
  availableHours: Int
  background: String
  city: String
  company: Company!
  companyId: Int
  createdAt: DateTime!
  currentStatus: Status!
  documents: [AssignmentApplicationFile!]
  email: String
  expertises: String
  id: ID!
  isRead: Boolean!
  linkedInURL: String
  motivation: String
  owner: User!
  ownerId: Int!
  personalQualities: String
  phoneNumber: String
  rateFrom: Float
  rateTo: Float
  rateType: RateType
  status: AssignmentApplicationStatus!
  statusHistory: [Status!]!
  updatedAt: DateTime!
  uuid: String!
  websiteURL: String
}

type AssignmentApplicationAvgAggregate @join__type(graph: CORE) {
  assignmentId: Float
  availableHours: Float
  companyId: Float
  id: Float
  ownerId: Float
  rateFrom: Float
  rateTo: Float
}

type AssignmentApplicationCount @join__type(graph: CORE) {
  assignmentApplicationRead: Int!
  documents: Int!
}

type AssignmentApplicationCountAggregate @join__type(graph: CORE) {
  _all: Int!
  assignmentId: Int!
  availability: Int!
  availableFrom: Int!
  availableHours: Int!
  background: Int!
  city: Int!
  companyId: Int!
  createdAt: Int!
  email: Int!
  expertises: Int!
  id: Int!
  linkedInURL: Int!
  motivation: Int!
  ownerId: Int!
  personalQualities: Int!
  phoneNumber: Int!
  rateFrom: Int!
  rateTo: Int!
  rateType: Int!
  status: Int!
  updatedAt: Int!
  uuid: Int!
  websiteURL: Int!
}

type AssignmentApplicationFile @join__type(graph: CORE) {
  assignmentApplication: AssignmentApplication!
  assignmentApplicationId: Int!
  file: File!
  fileId: Int!
  id: ID!
}

type AssignmentApplicationFileAvgAggregate @join__type(graph: CORE) {
  assignmentApplicationId: Float
  fileId: Float
  id: Float
}

type AssignmentApplicationFileCountAggregate @join__type(graph: CORE) {
  _all: Int!
  assignmentApplicationId: Int!
  fileId: Int!
  id: Int!
}

input AssignmentApplicationFileCreateManyAssignmentApplicationInput
  @join__type(graph: CORE) {
  fileId: Int!
  id: Int
}

input AssignmentApplicationFileCreateManyAssignmentApplicationInputEnvelope
  @join__type(graph: CORE) {
  data: [AssignmentApplicationFileCreateManyAssignmentApplicationInput!]!
  skipDuplicates: Boolean
}

input AssignmentApplicationFileCreateOrConnectWithoutAssignmentApplicationInput
  @join__type(graph: CORE) {
  create: AssignmentApplicationFileCreateWithoutAssignmentApplicationInput!
  where: AssignmentApplicationFileWhereUniqueInput!
}

input AssignmentApplicationFileCreateWithoutAssignmentApplicationInput
  @join__type(graph: CORE) {
  file: FileCreateNestedOneWithoutAssignmentApplicationsInput!
}

input AssignmentApplicationFileListRelationFilter @join__type(graph: CORE) {
  every: AssignmentApplicationFileWhereInput
  none: AssignmentApplicationFileWhereInput
  some: AssignmentApplicationFileWhereInput
}

type AssignmentApplicationFileMaxAggregate @join__type(graph: CORE) {
  assignmentApplicationId: Int
  fileId: Int
  id: Int
}

type AssignmentApplicationFileMinAggregate @join__type(graph: CORE) {
  assignmentApplicationId: Int
  fileId: Int
  id: Int
}

input AssignmentApplicationFileOrderByRelationAggregateInput
  @join__type(graph: CORE) {
  _count: SortOrder
}

input AssignmentApplicationFileScalarWhereInput @join__type(graph: CORE) {
  AND: [AssignmentApplicationFileScalarWhereInput!]
  NOT: [AssignmentApplicationFileScalarWhereInput!]
  OR: [AssignmentApplicationFileScalarWhereInput!]
  assignmentApplicationId: IntFilter
  fileId: IntFilter
  id: IntFilter
}

type AssignmentApplicationFileSumAggregate @join__type(graph: CORE) {
  assignmentApplicationId: Int
  fileId: Int
  id: Int
}

input AssignmentApplicationFileUncheckedUpdateManyWithoutAssignmentApplicationInput
  @join__type(graph: CORE) {
  fileId: Int
  id: Int
}

input AssignmentApplicationFileUpdateManyWithWhereWithoutAssignmentApplicationInput
  @join__type(graph: CORE) {
  data: AssignmentApplicationFileUncheckedUpdateManyWithoutAssignmentApplicationInput!
  where: AssignmentApplicationFileScalarWhereInput!
}

input AssignmentApplicationFileUpdateManyWithoutAssignmentApplicationNestedInput
  @join__type(graph: CORE) {
  connect: [AssignmentApplicationFileWhereUniqueInput!]
  connectOrCreate: [AssignmentApplicationFileCreateOrConnectWithoutAssignmentApplicationInput!]
  create: [AssignmentApplicationFileCreateWithoutAssignmentApplicationInput!]
  createMany: AssignmentApplicationFileCreateManyAssignmentApplicationInputEnvelope
  delete: [AssignmentApplicationFileWhereUniqueInput!]
  deleteMany: [AssignmentApplicationFileScalarWhereInput!]
  disconnect: [AssignmentApplicationFileWhereUniqueInput!]
  set: [AssignmentApplicationFileWhereUniqueInput!]
  update: [AssignmentApplicationFileUpdateWithWhereUniqueWithoutAssignmentApplicationInput!]
  updateMany: [AssignmentApplicationFileUpdateManyWithWhereWithoutAssignmentApplicationInput!]
  upsert: [AssignmentApplicationFileUpsertWithWhereUniqueWithoutAssignmentApplicationInput!]
}

input AssignmentApplicationFileUpdateWithWhereUniqueWithoutAssignmentApplicationInput
  @join__type(graph: CORE) {
  data: AssignmentApplicationFileUpdateWithoutAssignmentApplicationInput!
  where: AssignmentApplicationFileWhereUniqueInput!
}

input AssignmentApplicationFileUpdateWithoutAssignmentApplicationInput
  @join__type(graph: CORE) {
  file: FileUpdateOneRequiredWithoutAssignmentApplicationsNestedInput
}

input AssignmentApplicationFileUpsertWithWhereUniqueWithoutAssignmentApplicationInput
  @join__type(graph: CORE) {
  create: AssignmentApplicationFileCreateWithoutAssignmentApplicationInput!
  update: AssignmentApplicationFileUpdateWithoutAssignmentApplicationInput!
  where: AssignmentApplicationFileWhereUniqueInput!
}

input AssignmentApplicationFileWhereInput @join__type(graph: CORE) {
  AND: [AssignmentApplicationFileWhereInput!]
  NOT: [AssignmentApplicationFileWhereInput!]
  OR: [AssignmentApplicationFileWhereInput!]
  assignmentApplication: AssignmentApplicationRelationFilter
  assignmentApplicationId: IntFilter
  file: FileRelationFilter
  fileId: IntFilter
  id: IntFilter
}

input AssignmentApplicationFileWhereUniqueInput @join__type(graph: CORE) {
  AND: [AssignmentApplicationFileWhereInput!]
  NOT: [AssignmentApplicationFileWhereInput!]
  OR: [AssignmentApplicationFileWhereInput!]
  assignmentApplication: AssignmentApplicationRelationFilter
  assignmentApplicationId: IntFilter
  file: FileRelationFilter
  fileId: IntFilter
  id: Int
}

type AssignmentApplicationMaxAggregate @join__type(graph: CORE) {
  assignmentId: Int
  availability: Availability
  availableFrom: DateTime
  availableHours: Int
  background: String
  city: String
  companyId: Int
  createdAt: DateTime
  email: String
  expertises: String
  id: Int
  linkedInURL: String
  motivation: String
  ownerId: Int
  personalQualities: String
  phoneNumber: String
  rateFrom: Float
  rateTo: Float
  rateType: RateType
  status: AssignmentApplicationStatus
  updatedAt: DateTime
  uuid: String
  websiteURL: String
}

type AssignmentApplicationMinAggregate @join__type(graph: CORE) {
  assignmentId: Int
  availability: Availability
  availableFrom: DateTime
  availableHours: Int
  background: String
  city: String
  companyId: Int
  createdAt: DateTime
  email: String
  expertises: String
  id: Int
  linkedInURL: String
  motivation: String
  ownerId: Int
  personalQualities: String
  phoneNumber: String
  rateFrom: Float
  rateTo: Float
  rateType: RateType
  status: AssignmentApplicationStatus
  updatedAt: DateTime
  uuid: String
  websiteURL: String
}

input AssignmentApplicationOrderByWithRelationInput @join__type(graph: CORE) {
  assignment: AssignmentOrderByWithRelationInput
  assignmentId: SortOrder
  availability: SortOrderInput
  availableFrom: SortOrderInput
  availableHours: SortOrderInput
  background: SortOrderInput
  city: SortOrderInput
  companyId: SortOrderInput
  createdAt: SortOrder
  documents: AssignmentApplicationFileOrderByRelationAggregateInput
  email: SortOrderInput
  expertises: SortOrderInput
  id: SortOrder
  linkedInURL: SortOrderInput
  motivation: SortOrderInput
  owner: UserOrderByWithRelationInput
  ownerId: SortOrder
  personalQualities: SortOrderInput
  phoneNumber: SortOrderInput
  rateFrom: SortOrderInput
  rateTo: SortOrderInput
  rateType: SortOrderInput
  status: SortOrder
  updatedAt: SortOrder
  uuid: SortOrder
  websiteURL: SortOrderInput
}

type AssignmentApplicationRead @join__type(graph: CORE) {
  assignmentApplication: AssignmentApplication!
  assignmentApplicationId: Int!
  companyId: Int!
  id: ID!
  readAt: DateTime!
  userId: Int!
}

type AssignmentApplicationReadAvgAggregate @join__type(graph: CORE) {
  assignmentApplicationId: Float
  companyId: Float
  id: Float
  userId: Float
}

type AssignmentApplicationReadCountAggregate @join__type(graph: CORE) {
  _all: Int!
  assignmentApplicationId: Int!
  companyId: Int!
  id: Int!
  readAt: Int!
  userId: Int!
}

type AssignmentApplicationReadMaxAggregate @join__type(graph: CORE) {
  assignmentApplicationId: Int
  companyId: Int
  id: Int
  readAt: DateTime
  userId: Int
}

type AssignmentApplicationReadMinAggregate @join__type(graph: CORE) {
  assignmentApplicationId: Int
  companyId: Int
  id: Int
  readAt: DateTime
  userId: Int
}

type AssignmentApplicationReadSumAggregate @join__type(graph: CORE) {
  assignmentApplicationId: Int
  companyId: Int
  id: Int
  userId: Int
}

input AssignmentApplicationRelationFilter @join__type(graph: CORE) {
  is: AssignmentApplicationWhereInput
  isNot: AssignmentApplicationWhereInput
}

enum AssignmentApplicationScalarFieldEnum @join__type(graph: CORE) {
  assignmentId @join__enumValue(graph: CORE)
  availability @join__enumValue(graph: CORE)
  availableFrom @join__enumValue(graph: CORE)
  availableHours @join__enumValue(graph: CORE)
  background @join__enumValue(graph: CORE)
  city @join__enumValue(graph: CORE)
  companyId @join__enumValue(graph: CORE)
  createdAt @join__enumValue(graph: CORE)
  deletedAt @join__enumValue(graph: CORE)
  email @join__enumValue(graph: CORE)
  expertises @join__enumValue(graph: CORE)
  id @join__enumValue(graph: CORE)
  linkedInURL @join__enumValue(graph: CORE)
  motivation @join__enumValue(graph: CORE)
  ownerId @join__enumValue(graph: CORE)
  personalQualities @join__enumValue(graph: CORE)
  phoneNumber @join__enumValue(graph: CORE)
  rateFrom @join__enumValue(graph: CORE)
  rateTo @join__enumValue(graph: CORE)
  rateType @join__enumValue(graph: CORE)
  status @join__enumValue(graph: CORE)
  updatedAt @join__enumValue(graph: CORE)
  uuid @join__enumValue(graph: CORE)
  websiteURL @join__enumValue(graph: CORE)
}

enum AssignmentApplicationStatus @join__type(graph: CORE) {
  ACCEPTED @join__enumValue(graph: CORE)
  CONCEPT @join__enumValue(graph: CORE)
  DECLINED @join__enumValue(graph: CORE)
  NEW @join__enumValue(graph: CORE)
  PENDING @join__enumValue(graph: CORE)
  PROPOSED @join__enumValue(graph: CORE)
  QUESTION @join__enumValue(graph: CORE)
}

type AssignmentApplicationSumAggregate @join__type(graph: CORE) {
  assignmentId: Int
  availableHours: Int
  companyId: Int
  id: Int
  ownerId: Int
  rateFrom: Float
  rateTo: Float
}

input AssignmentApplicationUpdateInput @join__type(graph: CORE) {
  availability: Availability
  availableFrom: DateTime
  availableHours: Int
  background: String
  city: String
  documents: AssignmentApplicationFileUpdateManyWithoutAssignmentApplicationNestedInput
  email: String
  expertises: String
  linkedInURL: String
  motivation: String
  personalQualities: String
  phoneNumber: String
  rateFrom: Float
  rateTo: Float
  rateType: RateType
  websiteURL: String
}

input AssignmentApplicationWhereInput @join__type(graph: CORE) {
  AND: [AssignmentApplicationWhereInput!]
  NOT: [AssignmentApplicationWhereInput!]
  OR: [AssignmentApplicationWhereInput!]
  assignment: AssignmentRelationFilter
  assignmentId: IntFilter
  availability: EnumAvailabilityNullableFilter
  availableFrom: DateTimeNullableFilter
  availableHours: IntNullableFilter
  background: StringNullableFilter
  city: StringNullableFilter
  companyId: IntNullableFilter
  createdAt: DateTimeFilter
  documents: AssignmentApplicationFileListRelationFilter
  email: StringNullableFilter
  expertises: StringNullableFilter
  id: IntFilter
  linkedInURL: StringNullableFilter
  motivation: StringNullableFilter
  owner: UserRelationFilter
  ownerId: IntFilter
  personalQualities: StringNullableFilter
  phoneNumber: StringNullableFilter
  rateFrom: FloatNullableFilter
  rateTo: FloatNullableFilter
  rateType: EnumRateTypeNullableFilter
  status: EnumAssignmentApplicationStatusFilter
  updatedAt: DateTimeFilter
  uuid: StringFilter
  websiteURL: StringNullableFilter
}

input AssignmentApplicationWhereUniqueInput @join__type(graph: CORE) {
  AND: [AssignmentApplicationWhereInput!]
  NOT: [AssignmentApplicationWhereInput!]
  OR: [AssignmentApplicationWhereInput!]
  assignment: AssignmentRelationFilter
  assignmentId: IntFilter
  availability: EnumAvailabilityNullableFilter
  availableFrom: DateTimeNullableFilter
  availableHours: IntNullableFilter
  background: StringNullableFilter
  city: StringNullableFilter
  companyId: IntNullableFilter
  createdAt: DateTimeFilter
  documents: AssignmentApplicationFileListRelationFilter
  email: StringNullableFilter
  expertises: StringNullableFilter
  id: Int
  linkedInURL: StringNullableFilter
  motivation: StringNullableFilter
  owner: UserRelationFilter
  ownerId: IntFilter
  personalQualities: StringNullableFilter
  phoneNumber: StringNullableFilter
  rateFrom: FloatNullableFilter
  rateTo: FloatNullableFilter
  rateType: EnumRateTypeNullableFilter
  status: EnumAssignmentApplicationStatusFilter
  updatedAt: DateTimeFilter
  uuid: String
  websiteURL: StringNullableFilter
}

type AssignmentAvgAggregate @join__type(graph: CORE) {
  companyId: Float
  duration: Float
  hoursFrom: Float
  hoursTo: Float
  id: Float
  ownerId: Float
  rateFrom: Float
  rateTo: Float
}

type AssignmentCount @join__type(graph: CORE) {
  Review: Int!
  assignmentApplications: Int!
  assignmentRead: Int!
  expertises: Int!
  favorites: Int!
  matches: Int!
}

type AssignmentCountAggregate @join__type(graph: CORE) {
  _all: Int!
  applicationDeadlineDate: Int!
  companyId: Int!
  contractType: Int!
  createdAt: Int!
  customerRelation: Int!
  customerRelationCompany: Int!
  customerRelationCompanyVisible: Int!
  description: Int!
  duration: Int!
  durationExtendable: Int!
  durationType: Int!
  externalCode: Int!
  hideInDescription: Int!
  hoursFrom: Int!
  hoursTo: Int!
  id: Int!
  onLocation: Int!
  ownerId: Int!
  place: Int!
  province: Int!
  publishAt: Int!
  publishUntil: Int!
  rateFrom: Int!
  rateTo: Int!
  rateType: Int!
  source: Int!
  startAsap: Int!
  startDate: Int!
  status: Int!
  title: Int!
  type: Int!
  updatedAt: Int!
  uuid: Int!
}

input AssignmentCreateNestedOneWithoutReviewInput @join__type(graph: CORE) {
  connect: AssignmentWhereUniqueInput
  connectOrCreate: AssignmentCreateOrConnectWithoutReviewInput
  create: AssignmentCreateWithoutReviewInput
}

input AssignmentCreateOrConnectWithoutReviewInput @join__type(graph: CORE) {
  create: AssignmentCreateWithoutReviewInput!
  where: AssignmentWhereUniqueInput!
}

input AssignmentCreateWithoutReviewInput @join__type(graph: CORE) {
  applicationDeadlineDate: DateTime
  contractType: ContractType
  customerRelation: CustomerRelation
  customerRelationCompany: String
  customerRelationCompanyVisible: Boolean
  description: String
  duration: Int
  durationExtendable: Boolean
  durationType: DurationType
  expertises: AssignmentExpertiseCreateNestedManyWithoutAssignmentInput
  externalCode: String
  hideInDescription: Boolean
  hoursFrom: Float
  hoursTo: Float
  onLocation: OnLocation
  place: String
  province: String
  rateFrom: Float
  rateTo: Float
  rateType: RateType
  source: AssignmentSource
  startAsap: Boolean
  startDate: DateTime
  title: String
  type: AssignmentType
}

type AssignmentExpertise @join__type(graph: CORE) {
  assignment: Assignment!
  assignmentId: Int!
  createdAt: DateTime!
  deletedAt: DateTime
  expertise: ExpertiseType!
  id: ID!
  updatedAt: DateTime!
}

input AssignmentExpertiseAssignmentIdExpertiseCompoundUniqueInput
  @join__type(graph: CORE) {
  assignmentId: Int!
  expertise: ExpertiseType!
}

type AssignmentExpertiseAvgAggregate @join__type(graph: CORE) {
  assignmentId: Float
  id: Float
}

type AssignmentExpertiseCountAggregate @join__type(graph: CORE) {
  _all: Int!
  assignmentId: Int!
  createdAt: Int!
  deletedAt: Int!
  expertise: Int!
  id: Int!
  updatedAt: Int!
}

input AssignmentExpertiseCreateManyAssignmentInput @join__type(graph: CORE) {
  expertise: ExpertiseType!
  id: Int
}

input AssignmentExpertiseCreateManyAssignmentInputEnvelope
  @join__type(graph: CORE) {
  data: [AssignmentExpertiseCreateManyAssignmentInput!]!
  skipDuplicates: Boolean
}

input AssignmentExpertiseCreateNestedManyWithoutAssignmentInput
  @join__type(graph: CORE) {
  connect: [AssignmentExpertiseWhereUniqueInput!]
  connectOrCreate: [AssignmentExpertiseCreateOrConnectWithoutAssignmentInput!]
  create: [AssignmentExpertiseCreateWithoutAssignmentInput!]
  createMany: AssignmentExpertiseCreateManyAssignmentInputEnvelope
}

input AssignmentExpertiseCreateOrConnectWithoutAssignmentInput
  @join__type(graph: CORE) {
  create: AssignmentExpertiseCreateWithoutAssignmentInput!
  where: AssignmentExpertiseWhereUniqueInput!
}

input AssignmentExpertiseCreateWithoutAssignmentInput @join__type(graph: CORE) {
  expertise: ExpertiseType!
}

input AssignmentExpertiseListRelationFilter @join__type(graph: CORE) {
  every: AssignmentExpertiseWhereInput
  none: AssignmentExpertiseWhereInput
  some: AssignmentExpertiseWhereInput
}

type AssignmentExpertiseMaxAggregate @join__type(graph: CORE) {
  assignmentId: Int
  createdAt: DateTime
  deletedAt: DateTime
  expertise: ExpertiseType
  id: Int
  updatedAt: DateTime
}

type AssignmentExpertiseMinAggregate @join__type(graph: CORE) {
  assignmentId: Int
  createdAt: DateTime
  deletedAt: DateTime
  expertise: ExpertiseType
  id: Int
  updatedAt: DateTime
}

input AssignmentExpertiseOrderByRelationAggregateInput
  @join__type(graph: CORE) {
  _count: SortOrder
}

input AssignmentExpertiseScalarWhereInput @join__type(graph: CORE) {
  AND: [AssignmentExpertiseScalarWhereInput!]
  NOT: [AssignmentExpertiseScalarWhereInput!]
  OR: [AssignmentExpertiseScalarWhereInput!]
  assignmentId: IntFilter
  createdAt: DateTimeFilter
  expertise: EnumExpertiseTypeFilter
  id: IntFilter
  updatedAt: DateTimeFilter
}

type AssignmentExpertiseSumAggregate @join__type(graph: CORE) {
  assignmentId: Int
  id: Int
}

input AssignmentExpertiseUpdateManyMutationInput @join__type(graph: CORE) {
  expertise: ExpertiseType
}

input AssignmentExpertiseUpdateManyWithWhereWithoutAssignmentInput
  @join__type(graph: CORE) {
  data: AssignmentExpertiseUpdateManyMutationInput!
  where: AssignmentExpertiseScalarWhereInput!
}

input AssignmentExpertiseUpdateManyWithoutAssignmentNestedInput
  @join__type(graph: CORE) {
  connect: [AssignmentExpertiseWhereUniqueInput!]
  connectOrCreate: [AssignmentExpertiseCreateOrConnectWithoutAssignmentInput!]
  create: [AssignmentExpertiseCreateWithoutAssignmentInput!]
  createMany: AssignmentExpertiseCreateManyAssignmentInputEnvelope
  delete: [AssignmentExpertiseWhereUniqueInput!]
  deleteMany: [AssignmentExpertiseScalarWhereInput!]
  disconnect: [AssignmentExpertiseWhereUniqueInput!]
  set: [AssignmentExpertiseWhereUniqueInput!]
  update: [AssignmentExpertiseUpdateWithWhereUniqueWithoutAssignmentInput!]
  updateMany: [AssignmentExpertiseUpdateManyWithWhereWithoutAssignmentInput!]
  upsert: [AssignmentExpertiseUpsertWithWhereUniqueWithoutAssignmentInput!]
}

input AssignmentExpertiseUpdateWithWhereUniqueWithoutAssignmentInput
  @join__type(graph: CORE) {
  data: AssignmentExpertiseUpdateWithoutAssignmentInput!
  where: AssignmentExpertiseWhereUniqueInput!
}

input AssignmentExpertiseUpdateWithoutAssignmentInput @join__type(graph: CORE) {
  expertise: ExpertiseType
}

input AssignmentExpertiseUpsertWithWhereUniqueWithoutAssignmentInput
  @join__type(graph: CORE) {
  create: AssignmentExpertiseCreateWithoutAssignmentInput!
  update: AssignmentExpertiseUpdateWithoutAssignmentInput!
  where: AssignmentExpertiseWhereUniqueInput!
}

input AssignmentExpertiseWhereInput @join__type(graph: CORE) {
  AND: [AssignmentExpertiseWhereInput!]
  NOT: [AssignmentExpertiseWhereInput!]
  OR: [AssignmentExpertiseWhereInput!]
  assignmentId: IntFilter
  createdAt: DateTimeFilter
  expertise: EnumExpertiseTypeFilter
  id: IntFilter
  updatedAt: DateTimeFilter
}

input AssignmentExpertiseWhereUniqueInput @join__type(graph: CORE) {
  AND: [AssignmentExpertiseWhereInput!]
  NOT: [AssignmentExpertiseWhereInput!]
  OR: [AssignmentExpertiseWhereInput!]
  assignmentId: IntFilter
  assignmentId_expertise: AssignmentExpertiseAssignmentIdExpertiseCompoundUniqueInput
  createdAt: DateTimeFilter
  expertise: EnumExpertiseTypeFilter
  id: Int
  updatedAt: DateTimeFilter
}

type AssignmentMaxAggregate @join__type(graph: CORE) {
  applicationDeadlineDate: DateTime
  companyId: Int
  contractType: ContractType
  createdAt: DateTime
  customerRelation: CustomerRelation
  customerRelationCompany: String
  customerRelationCompanyVisible: Boolean
  description: String
  duration: Int
  durationExtendable: Boolean
  durationType: DurationType
  externalCode: String
  hideInDescription: Boolean
  hoursFrom: Float
  hoursTo: Float
  id: Int
  onLocation: OnLocation
  ownerId: Int
  place: String
  province: String
  publishAt: DateTime
  publishUntil: DateTime
  rateFrom: Float
  rateTo: Float
  rateType: RateType
  source: AssignmentSource
  startAsap: Boolean
  startDate: DateTime
  status: AssignmentStatus
  title: String
  type: AssignmentType
  updatedAt: DateTime
  uuid: String
}

type AssignmentMinAggregate @join__type(graph: CORE) {
  applicationDeadlineDate: DateTime
  companyId: Int
  contractType: ContractType
  createdAt: DateTime
  customerRelation: CustomerRelation
  customerRelationCompany: String
  customerRelationCompanyVisible: Boolean
  description: String
  duration: Int
  durationExtendable: Boolean
  durationType: DurationType
  externalCode: String
  hideInDescription: Boolean
  hoursFrom: Float
  hoursTo: Float
  id: Int
  onLocation: OnLocation
  ownerId: Int
  place: String
  province: String
  publishAt: DateTime
  publishUntil: DateTime
  rateFrom: Float
  rateTo: Float
  rateType: RateType
  source: AssignmentSource
  startAsap: Boolean
  startDate: DateTime
  status: AssignmentStatus
  title: String
  type: AssignmentType
  updatedAt: DateTime
  uuid: String
}

"""
Gives a reason why the assignment is not visible
"""
enum AssignmentNotVisibleReason @join__type(graph: CORE) {
  FREELANCER_BASIC @join__enumValue(graph: CORE)
  MARKETMONITOR_NO_CREDITS @join__enumValue(graph: CORE)
  MARKETMONITOR_WAITING_PERIOD @join__enumValue(graph: CORE)
  NO_ASSIGNMENT_ID @join__enumValue(graph: CORE)
}

input AssignmentNullableRelationFilter @join__type(graph: CORE) {
  is: AssignmentWhereInput
  isNot: AssignmentWhereInput
}

input AssignmentOrderByWithRelationInput @join__type(graph: CORE) {
  applicationDeadlineDate: SortOrderInput
  company: CompanyOrderByWithRelationInput
  companyId: SortOrder
  contractType: SortOrderInput
  createdAt: SortOrder
  customerRelation: SortOrderInput
  customerRelationCompany: SortOrderInput
  customerRelationCompanyVisible: SortOrder
  description: SortOrderInput
  duration: SortOrderInput
  durationExtendable: SortOrder
  durationType: SortOrderInput
  expertises: AssignmentExpertiseOrderByRelationAggregateInput
  externalCode: SortOrderInput
  hideInDescription: SortOrder
  hoursFrom: SortOrderInput
  hoursTo: SortOrderInput
  id: SortOrder
  onLocation: SortOrderInput
  ownerId: SortOrder
  place: SortOrderInput
  province: SortOrderInput
  rateFrom: SortOrderInput
  rateTo: SortOrderInput
  rateType: SortOrderInput
  source: SortOrder
  startAsap: SortOrder
  startDate: SortOrderInput
  status: SortOrderInput
  title: SortOrderInput
  type: SortOrderInput
  updatedAt: SortOrder
  uuid: SortOrder
}

type AssignmentRead @join__type(graph: CORE) {
  assignment: Assignment!
  assignmentId: Int!
  company: Company!
  companyId: Int!
  id: ID!
  readAt: DateTime!
  user: User!
  userId: Int!
}

type AssignmentReadAvgAggregate @join__type(graph: CORE) {
  assignmentId: Float
  companyId: Float
  id: Float
  userId: Float
}

type AssignmentReadCountAggregate @join__type(graph: CORE) {
  _all: Int!
  assignmentId: Int!
  companyId: Int!
  id: Int!
  readAt: Int!
  userId: Int!
}

type AssignmentReadMaxAggregate @join__type(graph: CORE) {
  assignmentId: Int
  companyId: Int
  id: Int
  readAt: DateTime
  userId: Int
}

type AssignmentReadMinAggregate @join__type(graph: CORE) {
  assignmentId: Int
  companyId: Int
  id: Int
  readAt: DateTime
  userId: Int
}

type AssignmentReadSumAggregate @join__type(graph: CORE) {
  assignmentId: Int
  companyId: Int
  id: Int
  userId: Int
}

input AssignmentRelationFilter @join__type(graph: CORE) {
  is: AssignmentWhereInput
  isNot: AssignmentWhereInput
}

enum AssignmentScalarFieldEnum @join__type(graph: CORE) {
  applicationDeadlineDate @join__enumValue(graph: CORE)
  companyId @join__enumValue(graph: CORE)
  contractType @join__enumValue(graph: CORE)
  createdAt @join__enumValue(graph: CORE)
  customerRelation @join__enumValue(graph: CORE)
  customerRelationCompany @join__enumValue(graph: CORE)
  customerRelationCompanyVisible @join__enumValue(graph: CORE)
  deletedAt @join__enumValue(graph: CORE)
  description @join__enumValue(graph: CORE)
  duration @join__enumValue(graph: CORE)
  durationExtendable @join__enumValue(graph: CORE)
  durationType @join__enumValue(graph: CORE)
  externalCode @join__enumValue(graph: CORE)
  hideInDescription @join__enumValue(graph: CORE)
  hoursFrom @join__enumValue(graph: CORE)
  hoursTo @join__enumValue(graph: CORE)
  id @join__enumValue(graph: CORE)
  matchBatchId @join__enumValue(graph: CORE)
  onLocation @join__enumValue(graph: CORE)
  ownerId @join__enumValue(graph: CORE)
  place @join__enumValue(graph: CORE)
  province @join__enumValue(graph: CORE)
  publishAt @join__enumValue(graph: CORE)
  publishUntil @join__enumValue(graph: CORE)
  rateFrom @join__enumValue(graph: CORE)
  rateTo @join__enumValue(graph: CORE)
  rateType @join__enumValue(graph: CORE)
  source @join__enumValue(graph: CORE)
  startAsap @join__enumValue(graph: CORE)
  startDate @join__enumValue(graph: CORE)
  status @join__enumValue(graph: CORE)
  title @join__enumValue(graph: CORE)
  type @join__enumValue(graph: CORE)
  updatedAt @join__enumValue(graph: CORE)
  uuid @join__enumValue(graph: CORE)
}

enum AssignmentSource @join__type(graph: CORE) {
  API @join__enumValue(graph: CORE)
  PLATFORM @join__enumValue(graph: CORE)
}

enum AssignmentStatus @join__type(graph: CORE) {
  ARCHIVED @join__enumValue(graph: CORE)
  CLOSED @join__enumValue(graph: CORE)
  CONCEPT @join__enumValue(graph: CORE)
  DECLINED @join__enumValue(graph: CORE)
  IN_REVIEW @join__enumValue(graph: CORE)
  PAUSED @join__enumValue(graph: CORE)
  PENDING_REVIEW @join__enumValue(graph: CORE)
  PUBLISHED @join__enumValue(graph: CORE)
  PUBLISHING @join__enumValue(graph: CORE)
  REVIEWED @join__enumValue(graph: CORE)
}

type AssignmentSumAggregate @join__type(graph: CORE) {
  companyId: Int
  duration: Int
  hoursFrom: Float
  hoursTo: Float
  id: Int
  ownerId: Int
  rateFrom: Float
  rateTo: Float
}

enum AssignmentType @join__type(graph: CORE) {
  BASIC @join__enumValue(graph: CORE)
  CONTRACTING_SERVICES @join__enumValue(graph: CORE)
  TOP @join__enumValue(graph: CORE)
}

input AssignmentUpdateInput @join__type(graph: CORE) {
  applicationDeadlineDate: DateTime
  contractType: ContractType
  customerRelation: CustomerRelation
  customerRelationCompany: String
  customerRelationCompanyVisible: Boolean
  description: String
  duration: Int
  durationExtendable: Boolean
  durationType: DurationType
  expertises: AssignmentExpertiseUpdateManyWithoutAssignmentNestedInput
  externalCode: String
  hideInDescription: Boolean
  hoursFrom: Float
  hoursTo: Float
  onLocation: OnLocation
  place: String
  province: String
  rateFrom: Float
  rateTo: Float
  rateType: RateType
  source: AssignmentSource
  startAsap: Boolean
  startDate: DateTime
  title: String
  type: AssignmentType
}

input AssignmentWhereInput @join__type(graph: CORE) {
  AND: [AssignmentWhereInput!]
  NOT: [AssignmentWhereInput!]
  OR: [AssignmentWhereInput!]
  applicationDeadlineDate: DateTimeNullableFilter
  company: CompanyRelationFilter
  companyId: IntFilter
  contractType: EnumContractTypeNullableFilter
  createdAt: DateTimeFilter
  customerRelation: EnumCustomerRelationNullableFilter
  customerRelationCompany: StringNullableFilter
  customerRelationCompanyVisible: BoolFilter
  description: StringNullableFilter
  duration: IntNullableFilter
  durationExtendable: BoolFilter
  durationType: EnumDurationTypeNullableFilter
  expertises: AssignmentExpertiseListRelationFilter
  externalCode: StringNullableFilter
  hideInDescription: BoolFilter
  hoursFrom: FloatNullableFilter
  hoursTo: FloatNullableFilter
  id: IntFilter
  onLocation: EnumOnLocationNullableFilter
  ownerId: IntFilter
  place: StringNullableFilter
  province: StringNullableFilter
  rateFrom: FloatNullableFilter
  rateTo: FloatNullableFilter
  rateType: EnumRateTypeNullableFilter
  source: EnumAssignmentSourceFilter
  startAsap: BoolFilter
  startDate: DateTimeNullableFilter
  status: EnumAssignmentStatusNullableFilter
  title: StringNullableFilter
  type: EnumAssignmentTypeNullableFilter
  updatedAt: DateTimeFilter
  uuid: StringFilter
}

input AssignmentWhereUniqueInput @join__type(graph: CORE) {
  AND: [AssignmentWhereInput!]
  NOT: [AssignmentWhereInput!]
  OR: [AssignmentWhereInput!]
  applicationDeadlineDate: DateTimeNullableFilter
  company: CompanyRelationFilter
  companyId: IntFilter
  contractType: EnumContractTypeNullableFilter
  createdAt: DateTimeFilter
  customerRelation: EnumCustomerRelationNullableFilter
  customerRelationCompany: StringNullableFilter
  customerRelationCompanyVisible: BoolFilter
  description: StringNullableFilter
  duration: IntNullableFilter
  durationExtendable: BoolFilter
  durationType: EnumDurationTypeNullableFilter
  expertises: AssignmentExpertiseListRelationFilter
  externalCode: StringNullableFilter
  hideInDescription: BoolFilter
  hoursFrom: FloatNullableFilter
  hoursTo: FloatNullableFilter
  id: Int
  onLocation: EnumOnLocationNullableFilter
  ownerId: IntFilter
  place: StringNullableFilter
  province: StringNullableFilter
  rateFrom: FloatNullableFilter
  rateTo: FloatNullableFilter
  rateType: EnumRateTypeNullableFilter
  source: EnumAssignmentSourceFilter
  startAsap: BoolFilter
  startDate: DateTimeNullableFilter
  status: EnumAssignmentStatusNullableFilter
  title: StringNullableFilter
  type: EnumAssignmentTypeNullableFilter
  updatedAt: DateTimeFilter
  uuid: String
}

enum Availability @join__type(graph: CORE) {
  IMMEDIATELY @join__enumValue(graph: CORE)
  NEGOTIABLE @join__enumValue(graph: CORE)
}

input BoolFilter
  @join__type(graph: CONTRACT)
  @join__type(graph: CORE)
  @join__type(graph: NOTIFICATION) {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolNullableFilter @join__type(graph: CORE) {
  equals: Boolean
  not: NestedBoolNullableFilter
}

type CheckTokenOutput @join__type(graph: AUTH) {
  confirmed: Boolean
  success: String!
}

type Checkout @join__type(graph: CONTRACT) {
  company: ExternalProviderCompany!
  companyId: Int!
  id: ID!
  plan: Plan!
  planId: Int!
  session: StripeSession!
  sessionId: String!
  token: String!
  userId: Int!
}

type CheckoutAvgAggregate @join__type(graph: CONTRACT) {
  companyId: Float
  id: Float
  planId: Float
  userId: Float
}

type CheckoutCountAggregate @join__type(graph: CONTRACT) {
  _all: Int!
  companyId: Int!
  id: Int!
  planId: Int!
  sessionId: Int!
  token: Int!
  userId: Int!
}

input CheckoutCreateInput @join__type(graph: CONTRACT) {
  companyId: Int!
  planId: Int!
  quantity: Int
}

input CheckoutCreateManyPlanInput @join__type(graph: CONTRACT) {
  companyId: Int!
  id: Int
  sessionId: String!
  token: String!
  userId: Int!
}

input CheckoutCreateManyPlanInputEnvelope @join__type(graph: CONTRACT) {
  data: [CheckoutCreateManyPlanInput!]!
  skipDuplicates: Boolean
}

input CheckoutCreateNestedManyWithoutPlanInput @join__type(graph: CONTRACT) {
  connect: [CheckoutWhereUniqueInput!]
  connectOrCreate: [CheckoutCreateOrConnectWithoutPlanInput!]
  create: [CheckoutCreateWithoutPlanInput!]
  createMany: CheckoutCreateManyPlanInputEnvelope
}

input CheckoutCreateOrConnectWithoutPlanInput @join__type(graph: CONTRACT) {
  create: CheckoutCreateWithoutPlanInput!
  where: CheckoutWhereUniqueInput!
}

input CheckoutCreateWithoutPlanInput @join__type(graph: CONTRACT) {
  company: ExternalProviderCompanyCreateNestedOneWithoutCheckoutInput!
  sessionId: String!
  token: String!
  userId: Int!
}

input CheckoutListRelationFilter @join__type(graph: CONTRACT) {
  every: CheckoutWhereInput
  none: CheckoutWhereInput
  some: CheckoutWhereInput
}

type CheckoutMaxAggregate @join__type(graph: CONTRACT) {
  companyId: Int
  id: Int
  planId: Int
  sessionId: String
  token: String
  userId: Int
}

type CheckoutMinAggregate @join__type(graph: CONTRACT) {
  companyId: Int
  id: Int
  planId: Int
  sessionId: String
  token: String
  userId: Int
}

input CheckoutOrderByRelationAggregateInput @join__type(graph: CONTRACT) {
  _count: SortOrder
}

input CheckoutOrderByWithRelationInput @join__type(graph: CONTRACT) {
  company: ExternalProviderCompanyOrderByWithRelationInput
  companyId: SortOrder
  id: SortOrder
  plan: PlanOrderByWithRelationInput
  planId: SortOrder
  sessionId: SortOrder
  token: SortOrder
  userId: SortOrder
}

enum CheckoutScalarFieldEnum @join__type(graph: CONTRACT) {
  companyId @join__enumValue(graph: CONTRACT)
  id @join__enumValue(graph: CONTRACT)
  planId @join__enumValue(graph: CONTRACT)
  sessionId @join__enumValue(graph: CONTRACT)
  token @join__enumValue(graph: CONTRACT)
  userId @join__enumValue(graph: CONTRACT)
}

input CheckoutScalarWhereInput @join__type(graph: CONTRACT) {
  AND: [CheckoutScalarWhereInput!]
  NOT: [CheckoutScalarWhereInput!]
  OR: [CheckoutScalarWhereInput!]
  companyId: IntFilter
  id: IntFilter
  planId: IntFilter
  sessionId: StringFilter
  token: StringFilter
  userId: IntFilter
}

type CheckoutSumAggregate @join__type(graph: CONTRACT) {
  companyId: Int
  id: Int
  planId: Int
  userId: Int
}

input CheckoutUpdateManyMutationInput @join__type(graph: CONTRACT) {
  sessionId: String
  token: String
  userId: Int
}

input CheckoutUpdateManyWithWhereWithoutPlanInput @join__type(graph: CONTRACT) {
  data: CheckoutUpdateManyMutationInput!
  where: CheckoutScalarWhereInput!
}

input CheckoutUpdateManyWithoutPlanNestedInput @join__type(graph: CONTRACT) {
  connect: [CheckoutWhereUniqueInput!]
  connectOrCreate: [CheckoutCreateOrConnectWithoutPlanInput!]
  create: [CheckoutCreateWithoutPlanInput!]
  createMany: CheckoutCreateManyPlanInputEnvelope
  delete: [CheckoutWhereUniqueInput!]
  deleteMany: [CheckoutScalarWhereInput!]
  disconnect: [CheckoutWhereUniqueInput!]
  set: [CheckoutWhereUniqueInput!]
  update: [CheckoutUpdateWithWhereUniqueWithoutPlanInput!]
  updateMany: [CheckoutUpdateManyWithWhereWithoutPlanInput!]
  upsert: [CheckoutUpsertWithWhereUniqueWithoutPlanInput!]
}

input CheckoutUpdateWithWhereUniqueWithoutPlanInput
  @join__type(graph: CONTRACT) {
  data: CheckoutUpdateWithoutPlanInput!
  where: CheckoutWhereUniqueInput!
}

input CheckoutUpdateWithoutPlanInput @join__type(graph: CONTRACT) {
  company: ExternalProviderCompanyUpdateOneRequiredWithoutCheckoutNestedInput
  sessionId: String
  token: String
  userId: Int
}

input CheckoutUpsertWithWhereUniqueWithoutPlanInput
  @join__type(graph: CONTRACT) {
  create: CheckoutCreateWithoutPlanInput!
  update: CheckoutUpdateWithoutPlanInput!
  where: CheckoutWhereUniqueInput!
}

input CheckoutWhereInput @join__type(graph: CONTRACT) {
  AND: [CheckoutWhereInput!]
  NOT: [CheckoutWhereInput!]
  OR: [CheckoutWhereInput!]
  company: ExternalProviderCompanyRelationFilter
  companyId: IntFilter
  id: IntFilter
  plan: PlanRelationFilter
  planId: IntFilter
  sessionId: StringFilter
  token: StringFilter
  userId: IntFilter
}

input CheckoutWhereUniqueInput @join__type(graph: CONTRACT) {
  AND: [CheckoutWhereInput!]
  NOT: [CheckoutWhereInput!]
  OR: [CheckoutWhereInput!]
  company: ExternalProviderCompanyRelationFilter
  companyId: IntFilter
  id: Int
  plan: PlanRelationFilter
  planId: IntFilter
  sessionId: String
  token: String
  userId: IntFilter
}

type Company
  @join__type(graph: ASSIGNMENT_API, key: "id", extension: true)
  @join__type(graph: CONTRACT, key: "id", extension: true)
  @join__type(graph: CORE, key: "id") {
  _count: CompanyCount! @join__field(graph: CORE)
  about: String @join__field(graph: CORE)
  active: Boolean @join__field(graph: CORE)
  address: Address @join__field(graph: CORE)
  addressId: Int @join__field(graph: CORE)
  apiEmailRegex: String! @join__field(graph: ASSIGNMENT_API)
  assignmentCount: Int! @join__field(graph: CORE)
  assignmentRead: [AssignmentRead!] @join__field(graph: CORE)
  assignments: [Assignment!] @join__field(graph: CORE)
  billingAddress: Address @join__field(graph: CORE)
  billingAddressId: Int @join__field(graph: CORE)
  billingEmail: String @join__field(graph: CORE)
  cocNumber: String @join__field(graph: CORE)
  companyReferences: [CompanyReference!] @join__field(graph: CORE)
  companyUsers: [UsersCompanies!] @join__field(graph: CORE)
  contracts: [Contract!]! @join__field(graph: CONTRACT)
  coverImageFile: File @join__field(graph: CORE)
  coverImageFileId: Int @join__field(graph: CORE)
  createdAt: DateTime! @join__field(graph: CORE)
  credits: Int! @join__field(graph: CORE)
  deletedAt: DateTime @join__field(graph: CORE)
  email: String @join__field(graph: CORE)
  hasActiveUsers: Boolean @join__field(graph: CORE)
  id: ID!
  latestTopReviewText: String @join__field(graph: CORE)
  logoImageFile: File @join__field(graph: CORE)
  logoImageFileId: Int @join__field(graph: CORE)
  name: String @join__field(graph: CORE)
  openAssignmentCount: Int! @join__field(graph: CORE)
  profile: Profile @join__field(graph: CORE)
  recruiterCount: Int! @join__field(graph: CORE)
  reviews: [Review!] @join__field(graph: CORE)
  showCurrentAssignments: Boolean! @join__field(graph: CORE)
  showEmployees: Boolean! @join__field(graph: CORE)
  type: CompanyType! @join__field(graph: CORE)
  updatedAt: DateTime! @join__field(graph: CORE)
  vatNumber: String @join__field(graph: CORE)
  verificationData: String @join__field(graph: CORE)
  websiteUrl: String @join__field(graph: CORE)
  youtubeUrl: String @join__field(graph: CORE)
}

type CompanyAvgAggregate @join__type(graph: CORE) {
  addressId: Float
  billingAddressId: Float
  coverImageFileId: Float
  credits: Float
  id: Float
  logoImageFileId: Float
}

type CompanyCount @join__type(graph: CORE) {
  assignmentRead: Int!
  assignments: Int!
  companyReferences: Int!
  companyUsers: Int!
  reviews: Int!
}

type CompanyCountAggregate @join__type(graph: CORE) {
  _all: Int!
  about: Int!
  active: Int!
  addressId: Int!
  billingAddressId: Int!
  billingEmail: Int!
  cocNumber: Int!
  coverImageFileId: Int!
  createdAt: Int!
  credits: Int!
  deletedAt: Int!
  email: Int!
  id: Int!
  logoImageFileId: Int!
  name: Int!
  showCurrentAssignments: Int!
  showEmployees: Int!
  type: Int!
  updatedAt: Int!
  vatNumber: Int!
  verificationData: Int!
  websiteUrl: Int!
  youtubeUrl: Int!
}

input CompanyCreateInput @join__type(graph: CORE) {
  about: String
  active: Boolean
  address: AddressCreateNestedOneWithoutCompaniesInput
  billingAddress: AddressCreateNestedOneWithoutBillingCompaniesInput
  billingEmail: String
  cocNumber: String
  companyReferences: CompanyReferenceCreateNestedManyWithoutCompanyInput
  coverImageFile: FileCreateNestedOneWithoutCoverImageCompaniesInput
  credits: Int
  email: String
  logoImageFile: FileCreateNestedOneWithoutLogoImageCompaniesInput
  name: String
  profile: ProfileCreateNestedOneWithoutCompanyInput
  showCurrentAssignments: Boolean
  showEmployees: Boolean
  type: CompanyType!
  vatNumber: String
  verificationData: String
  websiteUrl: String
  youtubeUrl: String
}

input CompanyCreateManyAddressInput @join__type(graph: CORE) {
  about: String
  active: Boolean
  billingAddressId: Int
  billingEmail: String
  cocNumber: String
  coverImageFileId: Int
  credits: Int
  email: String
  id: Int
  logoImageFileId: Int
  name: String
  showCurrentAssignments: Boolean
  showEmployees: Boolean
  type: CompanyType!
  vatNumber: String
  verificationData: String
  websiteUrl: String
  youtubeUrl: String
}

input CompanyCreateManyAddressInputEnvelope @join__type(graph: CORE) {
  data: [CompanyCreateManyAddressInput!]!
  skipDuplicates: Boolean
}

input CompanyCreateManyBillingAddressInput @join__type(graph: CORE) {
  about: String
  active: Boolean
  addressId: Int
  billingEmail: String
  cocNumber: String
  coverImageFileId: Int
  credits: Int
  email: String
  id: Int
  logoImageFileId: Int
  name: String
  showCurrentAssignments: Boolean
  showEmployees: Boolean
  type: CompanyType!
  vatNumber: String
  verificationData: String
  websiteUrl: String
  youtubeUrl: String
}

input CompanyCreateManyBillingAddressInputEnvelope @join__type(graph: CORE) {
  data: [CompanyCreateManyBillingAddressInput!]!
  skipDuplicates: Boolean
}

input CompanyCreateNestedManyWithoutAddressInput @join__type(graph: CORE) {
  connect: [CompanyWhereUniqueInput!]
  connectOrCreate: [CompanyCreateOrConnectWithoutAddressInput!]
  create: [CompanyCreateWithoutAddressInput!]
  createMany: CompanyCreateManyAddressInputEnvelope
}

input CompanyCreateNestedManyWithoutBillingAddressInput
  @join__type(graph: CORE) {
  connect: [CompanyWhereUniqueInput!]
  connectOrCreate: [CompanyCreateOrConnectWithoutBillingAddressInput!]
  create: [CompanyCreateWithoutBillingAddressInput!]
  createMany: CompanyCreateManyBillingAddressInputEnvelope
}

input CompanyCreateNestedOneWithoutCompanyReferencesInput
  @join__type(graph: CORE) {
  connect: CompanyWhereUniqueInput
  connectOrCreate: CompanyCreateOrConnectWithoutCompanyReferencesInput
  create: CompanyCreateWithoutCompanyReferencesInput
}

input CompanyCreateNestedOneWithoutReviewsInput @join__type(graph: CORE) {
  connect: CompanyWhereUniqueInput
  connectOrCreate: CompanyCreateOrConnectWithoutReviewsInput
  create: CompanyCreateWithoutReviewsInput
}

input CompanyCreateOrConnectWithoutAddressInput @join__type(graph: CORE) {
  create: CompanyCreateWithoutAddressInput!
  where: CompanyWhereUniqueInput!
}

input CompanyCreateOrConnectWithoutBillingAddressInput
  @join__type(graph: CORE) {
  create: CompanyCreateWithoutBillingAddressInput!
  where: CompanyWhereUniqueInput!
}

input CompanyCreateOrConnectWithoutCompanyReferencesInput
  @join__type(graph: CORE) {
  create: CompanyCreateWithoutCompanyReferencesInput!
  where: CompanyWhereUniqueInput!
}

input CompanyCreateOrConnectWithoutReviewsInput @join__type(graph: CORE) {
  create: CompanyCreateWithoutReviewsInput!
  where: CompanyWhereUniqueInput!
}

input CompanyCreateWithoutAddressInput @join__type(graph: CORE) {
  about: String
  active: Boolean
  billingAddress: AddressCreateNestedOneWithoutBillingCompaniesInput
  billingEmail: String
  cocNumber: String
  companyReferences: CompanyReferenceCreateNestedManyWithoutCompanyInput
  coverImageFile: FileCreateNestedOneWithoutCoverImageCompaniesInput
  credits: Int
  email: String
  logoImageFile: FileCreateNestedOneWithoutLogoImageCompaniesInput
  name: String
  profile: ProfileCreateNestedOneWithoutCompanyInput
  showCurrentAssignments: Boolean
  showEmployees: Boolean
  type: CompanyType!
  vatNumber: String
  verificationData: String
  websiteUrl: String
  youtubeUrl: String
}

input CompanyCreateWithoutBillingAddressInput @join__type(graph: CORE) {
  about: String
  active: Boolean
  address: AddressCreateNestedOneWithoutCompaniesInput
  billingEmail: String
  cocNumber: String
  companyReferences: CompanyReferenceCreateNestedManyWithoutCompanyInput
  coverImageFile: FileCreateNestedOneWithoutCoverImageCompaniesInput
  credits: Int
  email: String
  logoImageFile: FileCreateNestedOneWithoutLogoImageCompaniesInput
  name: String
  profile: ProfileCreateNestedOneWithoutCompanyInput
  showCurrentAssignments: Boolean
  showEmployees: Boolean
  type: CompanyType!
  vatNumber: String
  verificationData: String
  websiteUrl: String
  youtubeUrl: String
}

input CompanyCreateWithoutCompanyReferencesInput @join__type(graph: CORE) {
  about: String
  active: Boolean
  address: AddressCreateNestedOneWithoutCompaniesInput
  billingAddress: AddressCreateNestedOneWithoutBillingCompaniesInput
  billingEmail: String
  cocNumber: String
  coverImageFile: FileCreateNestedOneWithoutCoverImageCompaniesInput
  credits: Int
  email: String
  logoImageFile: FileCreateNestedOneWithoutLogoImageCompaniesInput
  name: String
  profile: ProfileCreateNestedOneWithoutCompanyInput
  showCurrentAssignments: Boolean
  showEmployees: Boolean
  type: CompanyType!
  vatNumber: String
  verificationData: String
  websiteUrl: String
  youtubeUrl: String
}

input CompanyCreateWithoutReviewsInput @join__type(graph: CORE) {
  about: String
  active: Boolean
  address: AddressCreateNestedOneWithoutCompaniesInput
  billingAddress: AddressCreateNestedOneWithoutBillingCompaniesInput
  billingEmail: String
  cocNumber: String
  companyReferences: CompanyReferenceCreateNestedManyWithoutCompanyInput
  coverImageFile: FileCreateNestedOneWithoutCoverImageCompaniesInput
  credits: Int
  email: String
  logoImageFile: FileCreateNestedOneWithoutLogoImageCompaniesInput
  name: String
  profile: ProfileCreateNestedOneWithoutCompanyInput
  showCurrentAssignments: Boolean
  showEmployees: Boolean
  type: CompanyType!
  vatNumber: String
  verificationData: String
  websiteUrl: String
  youtubeUrl: String
}

enum CompanyImageType @join__type(graph: CORE) {
  COVER @join__enumValue(graph: CORE)
  LOGO @join__enumValue(graph: CORE)
}

input CompanyListRelationFilter @join__type(graph: CORE) {
  every: CompanyWhereInput
  none: CompanyWhereInput
  some: CompanyWhereInput
}

type CompanyMaxAggregate @join__type(graph: CORE) {
  about: String
  active: Boolean
  addressId: Int
  billingAddressId: Int
  billingEmail: String
  cocNumber: String
  coverImageFileId: Int
  createdAt: DateTime
  credits: Int
  deletedAt: DateTime
  email: String
  id: Int
  logoImageFileId: Int
  name: String
  showCurrentAssignments: Boolean
  showEmployees: Boolean
  type: CompanyType
  updatedAt: DateTime
  vatNumber: String
  verificationData: String
  websiteUrl: String
  youtubeUrl: String
}

type CompanyMinAggregate @join__type(graph: CORE) {
  about: String
  active: Boolean
  addressId: Int
  billingAddressId: Int
  billingEmail: String
  cocNumber: String
  coverImageFileId: Int
  createdAt: DateTime
  credits: Int
  deletedAt: DateTime
  email: String
  id: Int
  logoImageFileId: Int
  name: String
  showCurrentAssignments: Boolean
  showEmployees: Boolean
  type: CompanyType
  updatedAt: DateTime
  vatNumber: String
  verificationData: String
  websiteUrl: String
  youtubeUrl: String
}

input CompanyOrderByRelationAggregateInput @join__type(graph: CORE) {
  _count: SortOrder
}

input CompanyOrderByWithRelationInput @join__type(graph: CORE) {
  about: SortOrderInput
  active: SortOrderInput
  address: AddressOrderByWithRelationInput
  addressId: SortOrderInput
  billingAddress: AddressOrderByWithRelationInput
  billingAddressId: SortOrderInput
  billingEmail: SortOrderInput
  cocNumber: SortOrderInput
  companyReferences: CompanyReferenceOrderByRelationAggregateInput
  coverImageFile: FileOrderByWithRelationInput
  coverImageFileId: SortOrderInput
  createdAt: SortOrder
  credits: SortOrder
  email: SortOrderInput
  id: SortOrder
  logoImageFile: FileOrderByWithRelationInput
  logoImageFileId: SortOrderInput
  name: SortOrderInput
  profile: ProfileOrderByWithRelationInput
  showCurrentAssignments: SortOrder
  showEmployees: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  vatNumber: SortOrderInput
  verificationData: SortOrderInput
  websiteUrl: SortOrderInput
  youtubeUrl: SortOrderInput
}

type CompanyReference @join__type(graph: CORE) {
  company: Company!
  companyId: Int!
  content: String!
  createdAt: DateTime!
  id: ID!
  refereeCompanyName: String!
  refereeFullName: String!
  refereeJob: String!
  referenceImageFile: File
  referenceImageFileId: Int
}

type CompanyReferenceAvgAggregate @join__type(graph: CORE) {
  companyId: Float
  id: Float
  referenceImageFileId: Float
}

type CompanyReferenceCountAggregate @join__type(graph: CORE) {
  _all: Int!
  companyId: Int!
  content: Int!
  createdAt: Int!
  id: Int!
  refereeCompanyName: Int!
  refereeFullName: Int!
  refereeJob: Int!
  referenceImageFileId: Int!
}

input CompanyReferenceCreateInput @join__type(graph: CORE) {
  company: CompanyCreateNestedOneWithoutCompanyReferencesInput!
  content: String!
  refereeCompanyName: String!
  refereeFullName: String!
  refereeJob: String!
  referenceImageFile: FileCreateNestedOneWithoutReferenceInput
}

input CompanyReferenceCreateManyCompanyInput @join__type(graph: CORE) {
  content: String!
  id: Int
  refereeCompanyName: String!
  refereeFullName: String!
  refereeJob: String!
  referenceImageFileId: Int
}

input CompanyReferenceCreateManyCompanyInputEnvelope @join__type(graph: CORE) {
  data: [CompanyReferenceCreateManyCompanyInput!]!
  skipDuplicates: Boolean
}

input CompanyReferenceCreateNestedManyWithoutCompanyInput
  @join__type(graph: CORE) {
  connect: [CompanyReferenceWhereUniqueInput!]
  connectOrCreate: [CompanyReferenceCreateOrConnectWithoutCompanyInput!]
  create: [CompanyReferenceCreateWithoutCompanyInput!]
  createMany: CompanyReferenceCreateManyCompanyInputEnvelope
}

input CompanyReferenceCreateOrConnectWithoutCompanyInput
  @join__type(graph: CORE) {
  create: CompanyReferenceCreateWithoutCompanyInput!
  where: CompanyReferenceWhereUniqueInput!
}

input CompanyReferenceCreateWithoutCompanyInput @join__type(graph: CORE) {
  content: String!
  refereeCompanyName: String!
  refereeFullName: String!
  refereeJob: String!
  referenceImageFile: FileCreateNestedOneWithoutReferenceInput
}

input CompanyReferenceListRelationFilter @join__type(graph: CORE) {
  every: CompanyReferenceWhereInput
  none: CompanyReferenceWhereInput
  some: CompanyReferenceWhereInput
}

type CompanyReferenceMaxAggregate @join__type(graph: CORE) {
  companyId: Int
  content: String
  createdAt: DateTime
  id: Int
  refereeCompanyName: String
  refereeFullName: String
  refereeJob: String
  referenceImageFileId: Int
}

type CompanyReferenceMinAggregate @join__type(graph: CORE) {
  companyId: Int
  content: String
  createdAt: DateTime
  id: Int
  refereeCompanyName: String
  refereeFullName: String
  refereeJob: String
  referenceImageFileId: Int
}

input CompanyReferenceNullableRelationFilter @join__type(graph: CORE) {
  is: CompanyReferenceWhereInput
  isNot: CompanyReferenceWhereInput
}

input CompanyReferenceOrderByRelationAggregateInput @join__type(graph: CORE) {
  _count: SortOrder
}

input CompanyReferenceOrderByWithRelationInput @join__type(graph: CORE) {
  company: CompanyOrderByWithRelationInput
  companyId: SortOrder
  content: SortOrder
  id: SortOrder
  refereeCompanyName: SortOrder
  refereeFullName: SortOrder
  refereeJob: SortOrder
  referenceImageFile: FileOrderByWithRelationInput
  referenceImageFileId: SortOrderInput
}

enum CompanyReferenceScalarFieldEnum @join__type(graph: CORE) {
  companyId @join__enumValue(graph: CORE)
  content @join__enumValue(graph: CORE)
  createdAt @join__enumValue(graph: CORE)
  id @join__enumValue(graph: CORE)
  refereeCompanyName @join__enumValue(graph: CORE)
  refereeFullName @join__enumValue(graph: CORE)
  refereeJob @join__enumValue(graph: CORE)
  referenceImageFileId @join__enumValue(graph: CORE)
}

input CompanyReferenceScalarWhereInput @join__type(graph: CORE) {
  AND: [CompanyReferenceScalarWhereInput!]
  NOT: [CompanyReferenceScalarWhereInput!]
  OR: [CompanyReferenceScalarWhereInput!]
  companyId: IntFilter
  content: StringFilter
  id: IntFilter
  refereeCompanyName: StringFilter
  refereeFullName: StringFilter
  refereeJob: StringFilter
  referenceImageFileId: IntNullableFilter
}

type CompanyReferenceSumAggregate @join__type(graph: CORE) {
  companyId: Int
  id: Int
  referenceImageFileId: Int
}

input CompanyReferenceUpdateInput @join__type(graph: CORE) {
  company: CompanyUpdateOneRequiredWithoutCompanyReferencesNestedInput
  content: String
  refereeCompanyName: String
  refereeFullName: String
  refereeJob: String
  referenceImageFile: FileUpdateOneWithoutReferenceNestedInput
}

input CompanyReferenceUpdateManyMutationInput @join__type(graph: CORE) {
  content: String
  refereeCompanyName: String
  refereeFullName: String
  refereeJob: String
}

input CompanyReferenceUpdateManyWithWhereWithoutCompanyInput
  @join__type(graph: CORE) {
  data: CompanyReferenceUpdateManyMutationInput!
  where: CompanyReferenceScalarWhereInput!
}

input CompanyReferenceUpdateManyWithoutCompanyNestedInput
  @join__type(graph: CORE) {
  connect: [CompanyReferenceWhereUniqueInput!]
  connectOrCreate: [CompanyReferenceCreateOrConnectWithoutCompanyInput!]
  create: [CompanyReferenceCreateWithoutCompanyInput!]
  createMany: CompanyReferenceCreateManyCompanyInputEnvelope
  delete: [CompanyReferenceWhereUniqueInput!]
  deleteMany: [CompanyReferenceScalarWhereInput!]
  disconnect: [CompanyReferenceWhereUniqueInput!]
  set: [CompanyReferenceWhereUniqueInput!]
  update: [CompanyReferenceUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [CompanyReferenceUpdateManyWithWhereWithoutCompanyInput!]
  upsert: [CompanyReferenceUpsertWithWhereUniqueWithoutCompanyInput!]
}

input CompanyReferenceUpdateWithWhereUniqueWithoutCompanyInput
  @join__type(graph: CORE) {
  data: CompanyReferenceUpdateWithoutCompanyInput!
  where: CompanyReferenceWhereUniqueInput!
}

input CompanyReferenceUpdateWithoutCompanyInput @join__type(graph: CORE) {
  content: String
  refereeCompanyName: String
  refereeFullName: String
  refereeJob: String
  referenceImageFile: FileUpdateOneWithoutReferenceNestedInput
}

input CompanyReferenceUpsertWithWhereUniqueWithoutCompanyInput
  @join__type(graph: CORE) {
  create: CompanyReferenceCreateWithoutCompanyInput!
  update: CompanyReferenceUpdateWithoutCompanyInput!
  where: CompanyReferenceWhereUniqueInput!
}

input CompanyReferenceWhereInput @join__type(graph: CORE) {
  AND: [CompanyReferenceWhereInput!]
  NOT: [CompanyReferenceWhereInput!]
  OR: [CompanyReferenceWhereInput!]
  company: CompanyRelationFilter
  companyId: IntFilter
  content: StringFilter
  id: IntFilter
  refereeCompanyName: StringFilter
  refereeFullName: StringFilter
  refereeJob: StringFilter
  referenceImageFile: FileNullableRelationFilter
  referenceImageFileId: IntNullableFilter
}

input CompanyReferenceWhereUniqueInput @join__type(graph: CORE) {
  AND: [CompanyReferenceWhereInput!]
  NOT: [CompanyReferenceWhereInput!]
  OR: [CompanyReferenceWhereInput!]
  company: CompanyRelationFilter
  companyId: IntFilter
  content: StringFilter
  id: Int
  refereeCompanyName: StringFilter
  refereeFullName: StringFilter
  refereeJob: StringFilter
  referenceImageFile: FileNullableRelationFilter
  referenceImageFileId: Int
}

input CompanyRelationFilter @join__type(graph: CORE) {
  is: CompanyWhereInput
  isNot: CompanyWhereInput
}

enum CompanyScalarFieldEnum @join__type(graph: CORE) {
  about @join__enumValue(graph: CORE)
  active @join__enumValue(graph: CORE)
  addressId @join__enumValue(graph: CORE)
  billingAddressId @join__enumValue(graph: CORE)
  billingEmail @join__enumValue(graph: CORE)
  cocNumber @join__enumValue(graph: CORE)
  coverImageFileId @join__enumValue(graph: CORE)
  createdAt @join__enumValue(graph: CORE)
  credits @join__enumValue(graph: CORE)
  deletedAt @join__enumValue(graph: CORE)
  email @join__enumValue(graph: CORE)
  id @join__enumValue(graph: CORE)
  logoImageFileId @join__enumValue(graph: CORE)
  name @join__enumValue(graph: CORE)
  showCurrentAssignments @join__enumValue(graph: CORE)
  showEmployees @join__enumValue(graph: CORE)
  type @join__enumValue(graph: CORE)
  updatedAt @join__enumValue(graph: CORE)
  vatNumber @join__enumValue(graph: CORE)
  verificationData @join__enumValue(graph: CORE)
  websiteUrl @join__enumValue(graph: CORE)
  youtubeUrl @join__enumValue(graph: CORE)
}

input CompanyScalarWhereInput @join__type(graph: CORE) {
  AND: [CompanyScalarWhereInput!]
  NOT: [CompanyScalarWhereInput!]
  OR: [CompanyScalarWhereInput!]
  about: StringNullableFilter
  active: BoolNullableFilter
  addressId: IntNullableFilter
  billingAddressId: IntNullableFilter
  billingEmail: StringNullableFilter
  cocNumber: StringNullableFilter
  coverImageFileId: IntNullableFilter
  createdAt: DateTimeFilter
  credits: IntFilter
  email: StringNullableFilter
  id: IntFilter
  logoImageFileId: IntNullableFilter
  name: StringNullableFilter
  showCurrentAssignments: BoolFilter
  showEmployees: BoolFilter
  type: EnumCompanyTypeFilter
  updatedAt: DateTimeFilter
  vatNumber: StringNullableFilter
  verificationData: StringNullableFilter
  websiteUrl: StringNullableFilter
  youtubeUrl: StringNullableFilter
}

type CompanySumAggregate @join__type(graph: CORE) {
  addressId: Int
  billingAddressId: Int
  coverImageFileId: Int
  credits: Int
  id: Int
  logoImageFileId: Int
}

enum CompanyType @join__type(graph: CORE) {
  CLIENT @join__enumValue(graph: CORE)
  FREELANCER @join__enumValue(graph: CORE)
  INTERMEDIAR @join__enumValue(graph: CORE)
  SECONDER @join__enumValue(graph: CORE)
  UNKNOWN @join__enumValue(graph: CORE)
}

input CompanyUpdateInput @join__type(graph: CORE) {
  about: String
  active: Boolean
  address: AddressUpdateOneWithoutCompaniesNestedInput
  billingAddress: AddressUpdateOneWithoutBillingCompaniesNestedInput
  billingEmail: String
  cocNumber: String
  companyReferences: CompanyReferenceUpdateManyWithoutCompanyNestedInput
  coverImageFile: FileUpdateOneWithoutCoverImageCompaniesNestedInput
  credits: Int
  email: String
  logoImageFile: FileUpdateOneWithoutLogoImageCompaniesNestedInput
  name: String
  profile: ProfileUpdateOneWithoutCompanyNestedInput
  showCurrentAssignments: Boolean
  showEmployees: Boolean
  vatNumber: String
  verificationData: String
  websiteUrl: String
  youtubeUrl: String
}

input CompanyUpdateManyMutationInput @join__type(graph: CORE) {
  about: String
  active: Boolean
  billingEmail: String
  cocNumber: String
  credits: Int
  email: String
  name: String
  showCurrentAssignments: Boolean
  showEmployees: Boolean
  vatNumber: String
  verificationData: String
  websiteUrl: String
  youtubeUrl: String
}

input CompanyUpdateManyWithWhereWithoutAddressInput @join__type(graph: CORE) {
  data: CompanyUpdateManyMutationInput!
  where: CompanyScalarWhereInput!
}

input CompanyUpdateManyWithWhereWithoutBillingAddressInput
  @join__type(graph: CORE) {
  data: CompanyUpdateManyMutationInput!
  where: CompanyScalarWhereInput!
}

input CompanyUpdateManyWithoutAddressNestedInput @join__type(graph: CORE) {
  connect: [CompanyWhereUniqueInput!]
  connectOrCreate: [CompanyCreateOrConnectWithoutAddressInput!]
  create: [CompanyCreateWithoutAddressInput!]
  createMany: CompanyCreateManyAddressInputEnvelope
  delete: [CompanyWhereUniqueInput!]
  deleteMany: [CompanyScalarWhereInput!]
  disconnect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutAddressInput!]
  updateMany: [CompanyUpdateManyWithWhereWithoutAddressInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutAddressInput!]
}

input CompanyUpdateManyWithoutBillingAddressNestedInput
  @join__type(graph: CORE) {
  connect: [CompanyWhereUniqueInput!]
  connectOrCreate: [CompanyCreateOrConnectWithoutBillingAddressInput!]
  create: [CompanyCreateWithoutBillingAddressInput!]
  createMany: CompanyCreateManyBillingAddressInputEnvelope
  delete: [CompanyWhereUniqueInput!]
  deleteMany: [CompanyScalarWhereInput!]
  disconnect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutBillingAddressInput!]
  updateMany: [CompanyUpdateManyWithWhereWithoutBillingAddressInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutBillingAddressInput!]
}

input CompanyUpdateOneRequiredWithoutCompanyReferencesNestedInput
  @join__type(graph: CORE) {
  connect: CompanyWhereUniqueInput
  connectOrCreate: CompanyCreateOrConnectWithoutCompanyReferencesInput
  create: CompanyCreateWithoutCompanyReferencesInput
  update: CompanyUpdateToOneWithWhereWithoutCompanyReferencesInput
  upsert: CompanyUpsertWithoutCompanyReferencesInput
}

input CompanyUpdateToOneWithWhereWithoutCompanyReferencesInput
  @join__type(graph: CORE) {
  data: CompanyUpdateWithoutCompanyReferencesInput!
  where: CompanyWhereInput
}

input CompanyUpdateWithWhereUniqueWithoutAddressInput @join__type(graph: CORE) {
  data: CompanyUpdateWithoutAddressInput!
  where: CompanyWhereUniqueInput!
}

input CompanyUpdateWithWhereUniqueWithoutBillingAddressInput
  @join__type(graph: CORE) {
  data: CompanyUpdateWithoutBillingAddressInput!
  where: CompanyWhereUniqueInput!
}

input CompanyUpdateWithoutAddressInput @join__type(graph: CORE) {
  about: String
  active: Boolean
  billingAddress: AddressUpdateOneWithoutBillingCompaniesNestedInput
  billingEmail: String
  cocNumber: String
  companyReferences: CompanyReferenceUpdateManyWithoutCompanyNestedInput
  coverImageFile: FileUpdateOneWithoutCoverImageCompaniesNestedInput
  credits: Int
  email: String
  logoImageFile: FileUpdateOneWithoutLogoImageCompaniesNestedInput
  name: String
  profile: ProfileUpdateOneWithoutCompanyNestedInput
  showCurrentAssignments: Boolean
  showEmployees: Boolean
  vatNumber: String
  verificationData: String
  websiteUrl: String
  youtubeUrl: String
}

input CompanyUpdateWithoutBillingAddressInput @join__type(graph: CORE) {
  about: String
  active: Boolean
  address: AddressUpdateOneWithoutCompaniesNestedInput
  billingEmail: String
  cocNumber: String
  companyReferences: CompanyReferenceUpdateManyWithoutCompanyNestedInput
  coverImageFile: FileUpdateOneWithoutCoverImageCompaniesNestedInput
  credits: Int
  email: String
  logoImageFile: FileUpdateOneWithoutLogoImageCompaniesNestedInput
  name: String
  profile: ProfileUpdateOneWithoutCompanyNestedInput
  showCurrentAssignments: Boolean
  showEmployees: Boolean
  vatNumber: String
  verificationData: String
  websiteUrl: String
  youtubeUrl: String
}

input CompanyUpdateWithoutCompanyReferencesInput @join__type(graph: CORE) {
  about: String
  active: Boolean
  address: AddressUpdateOneWithoutCompaniesNestedInput
  billingAddress: AddressUpdateOneWithoutBillingCompaniesNestedInput
  billingEmail: String
  cocNumber: String
  coverImageFile: FileUpdateOneWithoutCoverImageCompaniesNestedInput
  credits: Int
  email: String
  logoImageFile: FileUpdateOneWithoutLogoImageCompaniesNestedInput
  name: String
  profile: ProfileUpdateOneWithoutCompanyNestedInput
  showCurrentAssignments: Boolean
  showEmployees: Boolean
  vatNumber: String
  verificationData: String
  websiteUrl: String
  youtubeUrl: String
}

input CompanyUpsertWithWhereUniqueWithoutAddressInput @join__type(graph: CORE) {
  create: CompanyCreateWithoutAddressInput!
  update: CompanyUpdateWithoutAddressInput!
  where: CompanyWhereUniqueInput!
}

input CompanyUpsertWithWhereUniqueWithoutBillingAddressInput
  @join__type(graph: CORE) {
  create: CompanyCreateWithoutBillingAddressInput!
  update: CompanyUpdateWithoutBillingAddressInput!
  where: CompanyWhereUniqueInput!
}

input CompanyUpsertWithoutCompanyReferencesInput @join__type(graph: CORE) {
  create: CompanyCreateWithoutCompanyReferencesInput!
  update: CompanyUpdateWithoutCompanyReferencesInput!
  where: CompanyWhereInput
}

input CompanyWhereInput @join__type(graph: CORE) {
  AND: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  about: StringNullableFilter
  active: BoolNullableFilter
  address: AddressNullableRelationFilter
  addressId: IntNullableFilter
  billingAddress: AddressNullableRelationFilter
  billingAddressId: IntNullableFilter
  billingEmail: StringNullableFilter
  cocNumber: StringNullableFilter
  companyReferences: CompanyReferenceListRelationFilter
  coverImageFile: FileNullableRelationFilter
  coverImageFileId: IntNullableFilter
  createdAt: DateTimeFilter
  credits: IntFilter
  email: StringNullableFilter
  id: IntFilter
  logoImageFile: FileNullableRelationFilter
  logoImageFileId: IntNullableFilter
  name: StringNullableFilter
  profile: ProfileNullableRelationFilter
  showCurrentAssignments: BoolFilter
  showEmployees: BoolFilter
  type: EnumCompanyTypeFilter
  updatedAt: DateTimeFilter
  vatNumber: StringNullableFilter
  verificationData: StringNullableFilter
  websiteUrl: StringNullableFilter
  youtubeUrl: StringNullableFilter
}

input CompanyWhereUniqueInput @join__type(graph: CORE) {
  AND: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  about: StringNullableFilter
  active: BoolNullableFilter
  address: AddressNullableRelationFilter
  addressId: IntNullableFilter
  billingAddress: AddressNullableRelationFilter
  billingAddressId: IntNullableFilter
  billingEmail: StringNullableFilter
  cocNumber: String
  companyReferences: CompanyReferenceListRelationFilter
  coverImageFile: FileNullableRelationFilter
  coverImageFileId: IntNullableFilter
  createdAt: DateTimeFilter
  credits: IntFilter
  email: StringNullableFilter
  id: Int
  logoImageFile: FileNullableRelationFilter
  logoImageFileId: IntNullableFilter
  name: StringNullableFilter
  profile: ProfileNullableRelationFilter
  showCurrentAssignments: BoolFilter
  showEmployees: BoolFilter
  type: EnumCompanyTypeFilter
  updatedAt: DateTimeFilter
  vatNumber: StringNullableFilter
  verificationData: StringNullableFilter
  websiteUrl: StringNullableFilter
  youtubeUrl: StringNullableFilter
}

type ConfirmInviteOutput @join__type(graph: AUTH) {
  idToken: String!
  permissionsByCompany: [PermissionsByCompanyId!]!
  refreshToken: String!
}

type ConfirmOutput @join__type(graph: AUTH) {
  idToken: String!
  permissionsByCompany: [PermissionsByCompanyId!]!
  refreshToken: String!
}

type Contract @join__type(graph: CONTRACT) {
  companyId: Int!
  endDate: DateTime
  externalProviderId: String
  id: ID!
  invoiceId: String
  invoiceId: String
  plan: Plan!
  planId: Int!
  renewalInterval: RenewalInterval
  startDate: DateTime!
  subscription: StripeSubscription
  subscriptionExpireDate: DateTime
  usageAmount: Int
  usageInterval: Interval
  usageIntervalCount: Int
  usageType: UsageType!
}

type ContractAvgAggregate @join__type(graph: CONTRACT) {
  companyId: Float
  id: Float
  planId: Float
  usageAmount: Float
  usageIntervalCount: Float
}

type ContractCountAggregate @join__type(graph: CONTRACT) {
  _all: Int!
  companyId: Int!
  endDate: Int!
  externalProviderId: Int!
  id: Int!
  invoiceId: Int!
  planId: Int!
  renewalInterval: Int!
  startDate: Int!
  subscriptionExpireDate: Int!
  usageAmount: Int!
  usageInterval: Int!
  usageIntervalCount: Int!
  usageType: Int!
}

input ContractListRelationFilter @join__type(graph: CONTRACT) {
  every: ContractWhereInput
  none: ContractWhereInput
  some: ContractWhereInput
}

type ContractMaxAggregate @join__type(graph: CONTRACT) {
  companyId: Int
  endDate: DateTime
  externalProviderId: String
  id: Int
  invoiceId: String
  planId: Int
  renewalInterval: RenewalInterval
  startDate: DateTime
  subscriptionExpireDate: DateTime
  usageAmount: Int
  usageInterval: Interval
  usageIntervalCount: Int
  usageType: UsageType
}

type ContractMinAggregate @join__type(graph: CONTRACT) {
  companyId: Int
  endDate: DateTime
  externalProviderId: String
  id: Int
  invoiceId: String
  planId: Int
  renewalInterval: RenewalInterval
  startDate: DateTime
  subscriptionExpireDate: DateTime
  usageAmount: Int
  usageInterval: Interval
  usageIntervalCount: Int
  usageType: UsageType
}

input ContractOrderByRelationAggregateInput @join__type(graph: CONTRACT) {
  _count: SortOrder
}

input ContractOrderByWithRelationInput @join__type(graph: CONTRACT) {
  companyId: SortOrder
  endDate: SortOrderInput
  externalProviderId: SortOrderInput
  id: SortOrder
  invoiceId: SortOrderInput
  plan: PlanOrderByWithRelationInput
  planId: SortOrder
  renewalInterval: SortOrderInput
  startDate: SortOrder
  subscriptionExpireDate: SortOrderInput
  usageAmount: SortOrderInput
  usageInterval: SortOrderInput
  usageIntervalCount: SortOrderInput
  usageType: SortOrder
}

enum ContractScalarFieldEnum @join__type(graph: CONTRACT) {
  companyId @join__enumValue(graph: CONTRACT)
  endDate @join__enumValue(graph: CONTRACT)
  externalProviderId @join__enumValue(graph: CONTRACT)
  id @join__enumValue(graph: CONTRACT)
  invoiceId @join__enumValue(graph: CONTRACT)
  planId @join__enumValue(graph: CONTRACT)
  renewalInterval @join__enumValue(graph: CONTRACT)
  startDate @join__enumValue(graph: CONTRACT)
  subscriptionExpireDate @join__enumValue(graph: CONTRACT)
  usageAmount @join__enumValue(graph: CONTRACT)
  usageInterval @join__enumValue(graph: CONTRACT)
  usageIntervalCount @join__enumValue(graph: CONTRACT)
  usageType @join__enumValue(graph: CONTRACT)
}

type ContractSumAggregate @join__type(graph: CONTRACT) {
  companyId: Int
  id: Int
  planId: Int
  usageAmount: Int
  usageIntervalCount: Int
}

enum ContractType @join__type(graph: CORE) {
  FREELANCE @join__enumValue(graph: CORE)
  INTERIM @join__enumValue(graph: CORE)
  OTHER @join__enumValue(graph: CORE)
  PARTTIME @join__enumValue(graph: CORE)
  PAYROLL @join__enumValue(graph: CORE)
}

input ContractUpdateInput @join__type(graph: CONTRACT) {
  companyId: Int
  endDate: DateTime
  externalProviderId: String
  invoiceId: String
  plan: PlanUpdateOneRequiredWithoutContractsNestedInput
  renewalInterval: RenewalInterval
  startDate: DateTime
  subscriptionExpireDate: DateTime
  usageAmount: Int
  usageInterval: Interval
  usageIntervalCount: Int
  usageType: UsageType
}

input ContractWhereInput @join__type(graph: CONTRACT) {
  AND: [ContractWhereInput!]
  NOT: [ContractWhereInput!]
  OR: [ContractWhereInput!]
  companyId: IntFilter
  endDate: DateTimeNullableFilter
  externalProviderId: StringNullableFilter
  id: IntFilter
  invoiceId: StringNullableFilter
  plan: PlanRelationFilter
  planId: IntFilter
  renewalInterval: EnumRenewalIntervalNullableFilter
  startDate: DateTimeFilter
  subscriptionExpireDate: DateTimeNullableFilter
  usageAmount: IntNullableFilter
  usageInterval: EnumIntervalNullableFilter
  usageIntervalCount: IntNullableFilter
  usageType: EnumUsageTypeFilter
}

input ContractWhereUniqueInput @join__type(graph: CONTRACT) {
  AND: [ContractWhereInput!]
  NOT: [ContractWhereInput!]
  OR: [ContractWhereInput!]
  companyId: IntFilter
  endDate: DateTimeNullableFilter
  externalProviderId: StringNullableFilter
  id: Int
  invoiceId: StringNullableFilter
  plan: PlanRelationFilter
  planId: IntFilter
  renewalInterval: EnumRenewalIntervalNullableFilter
  startDate: DateTimeFilter
  subscriptionExpireDate: DateTimeNullableFilter
  usageAmount: IntNullableFilter
  usageInterval: EnumIntervalNullableFilter
  usageIntervalCount: IntNullableFilter
  usageType: EnumUsageTypeFilter
}

type CreateContractOutput @join__type(graph: CONTRACT) {
  success: Boolean!
}

type Credit @join__type(graph: CONTRACT) {
  amount: Int!
  contractAmount: Int!
  contractEndDate: DateTime
  contractStartDate: DateTime
  productSlug: String
  refreshDate: DateTime
  usageType: String!
}

input CustomContractCreateInput @join__type(graph: CONTRACT) {
  companyId: Int!
  endDate: String
  planId: Int!
  renewalInterval: String
  startDate: String
  usageAmount: Int
  usageInterval: String
}

enum CustomerRelation @join__type(graph: CORE) {
  FIRST @join__enumValue(graph: CORE)
  OTHER @join__enumValue(graph: CORE)
  SECOND @join__enumValue(graph: CORE)
  SELF @join__enumValue(graph: CORE)
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime
  @join__type(graph: CONTRACT)
  @join__type(graph: CORE)
  @join__type(graph: NOTIFICATION)
  @join__type(graph: SEARCH)
  @join__type(graph: STORAGE)

input DateTimeFilter
  @join__type(graph: CONTRACT)
  @join__type(graph: CORE)
  @join__type(graph: NOTIFICATION) {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter
  @join__type(graph: CONTRACT)
  @join__type(graph: CORE)
  @join__type(graph: NOTIFICATION) {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input DeclineAssignment @join__type(graph: CORE) {
  assignmentId: Float!
  declineReason: String!
}

type DownloadLink @join__type(graph: STORAGE) {
  blobName: String!
  expiresOn: DateTime
  url: String!
}

enum DurationType @join__type(graph: CORE) {
  DAY @join__enumValue(graph: CORE)
  MONTH @join__enumValue(graph: CORE)
  WEEK @join__enumValue(graph: CORE)
  YEAR @join__enumValue(graph: CORE)
}

type EndProContractOutput @join__type(graph: CONTRACT) {
  isSuccessful: Boolean!
}

input EnumAssignmentApplicationStatusFilter @join__type(graph: CORE) {
  equals: AssignmentApplicationStatus
  in: [AssignmentApplicationStatus!]
  not: NestedEnumAssignmentApplicationStatusFilter
  notIn: [AssignmentApplicationStatus!]
}

input EnumAssignmentSourceFilter @join__type(graph: CORE) {
  equals: AssignmentSource
  in: [AssignmentSource!]
  not: NestedEnumAssignmentSourceFilter
  notIn: [AssignmentSource!]
}

input EnumAssignmentStatusNullableFilter @join__type(graph: CORE) {
  equals: AssignmentStatus
  in: [AssignmentStatus!]
  not: NestedEnumAssignmentStatusNullableFilter
  notIn: [AssignmentStatus!]
}

input EnumAssignmentTypeNullableFilter @join__type(graph: CORE) {
  equals: AssignmentType
  in: [AssignmentType!]
  not: NestedEnumAssignmentTypeNullableFilter
  notIn: [AssignmentType!]
}

input EnumAvailabilityNullableFilter @join__type(graph: CORE) {
  equals: Availability
  in: [Availability!]
  not: NestedEnumAvailabilityNullableFilter
  notIn: [Availability!]
}

input EnumCompanyTypeFilter @join__type(graph: CORE) {
  equals: CompanyType
  in: [CompanyType!]
  not: NestedEnumCompanyTypeFilter
  notIn: [CompanyType!]
}

input EnumContractTypeNullableFilter @join__type(graph: CORE) {
  equals: ContractType
  in: [ContractType!]
  not: NestedEnumContractTypeNullableFilter
  notIn: [ContractType!]
}

input EnumCustomerRelationNullableFilter @join__type(graph: CORE) {
  equals: CustomerRelation
  in: [CustomerRelation!]
  not: NestedEnumCustomerRelationNullableFilter
  notIn: [CustomerRelation!]
}

input EnumDurationTypeNullableFilter @join__type(graph: CORE) {
  equals: DurationType
  in: [DurationType!]
  not: NestedEnumDurationTypeNullableFilter
  notIn: [DurationType!]
}

input EnumExpertiseTypeFilter @join__type(graph: CORE) {
  equals: ExpertiseType
  in: [ExpertiseType!]
  not: NestedEnumExpertiseTypeFilter
  notIn: [ExpertiseType!]
}

input EnumIntervalNullableFilter @join__type(graph: CONTRACT) {
  equals: Interval
  in: [Interval!]
  not: NestedEnumIntervalNullableFilter
  notIn: [Interval!]
}

input EnumLinkTypeFilter @join__type(graph: CORE) {
  equals: LinkType
  in: [LinkType!]
  not: NestedEnumLinkTypeFilter
  notIn: [LinkType!]
}

input EnumModeTypeNullableFilter @join__type(graph: CONTRACT) {
  equals: ModeType
  in: [ModeType!]
  not: NestedEnumModeTypeNullableFilter
  notIn: [ModeType!]
}

input EnumNotificationTypeFilter @join__type(graph: NOTIFICATION) {
  equals: NotificationType
  in: [NotificationType!]
  not: NestedEnumNotificationTypeFilter
  notIn: [NotificationType!]
}

input EnumOnLocationNullableFilter @join__type(graph: CORE) {
  equals: OnLocation
  in: [OnLocation!]
  not: NestedEnumOnLocationNullableFilter
  notIn: [OnLocation!]
}

input EnumProductSlugFilter @join__type(graph: CONTRACT) {
  equals: ProductSlug
  in: [ProductSlug!]
  not: NestedEnumProductSlugFilter
  notIn: [ProductSlug!]
}

input EnumRateTypeNullableFilter @join__type(graph: CORE) {
  equals: RateType
  in: [RateType!]
  not: NestedEnumRateTypeNullableFilter
  notIn: [RateType!]
}

input EnumRenewalIntervalNullableFilter @join__type(graph: CONTRACT) {
  equals: RenewalInterval
  in: [RenewalInterval!]
  not: NestedEnumRenewalIntervalNullableFilter
  notIn: [RenewalInterval!]
}

input EnumReviewTypeFilter @join__type(graph: CORE) {
  equals: ReviewType
  in: [ReviewType!]
  not: NestedEnumReviewTypeFilter
  notIn: [ReviewType!]
}

input EnumSavedSearchTypeNullableFilter @join__type(graph: CORE) {
  equals: SavedSearchType
  in: [SavedSearchType!]
  not: NestedEnumSavedSearchTypeNullableFilter
  notIn: [SavedSearchType!]
}

input EnumStatusModelTypeFilter @join__type(graph: CORE) {
  equals: StatusModelType
  in: [StatusModelType!]
  not: NestedEnumStatusModelTypeFilter
  notIn: [StatusModelType!]
}

input EnumUsageTypeFilter @join__type(graph: CONTRACT) {
  equals: UsageType
  in: [UsageType!]
  not: NestedEnumUsageTypeFilter
  notIn: [UsageType!]
}

input EnumUserCompanyRoleFilter @join__type(graph: CORE) {
  equals: UserCompanyRole
  in: [UserCompanyRole!]
  not: NestedEnumUserCompanyRoleFilter
  notIn: [UserCompanyRole!]
}

enum ExpertiseType @join__type(graph: CORE) {
  ADMINISTRATION @join__enumValue(graph: CORE)
  ANALYTICS_BI_BIG_DATA @join__enumValue(graph: CORE)
  AUDIO_AND_VIDEO @join__enumValue(graph: CORE)
  CIVIL_ENGINEERING @join__enumValue(graph: CORE)
  COMMUNICATION @join__enumValue(graph: CORE)
  COMMUNICATION_AND_MEDIA @join__enumValue(graph: CORE)
  COMPLIANCE_AND_REGULATORY_ENFORCEMENT @join__enumValue(graph: CORE)
  CONSTRUCTION_AND_MANUFACTURING_CONSULTING @join__enumValue(graph: CORE)
  CONSTRUCTION_AND_MANUFACTURING_EXECUTION @join__enumValue(graph: CORE)
  DEPLOYMENT_AND_OPERATIONS @join__enumValue(graph: CORE)
  DESIGN_OF_PHYSICAL_OBJECTS @join__enumValue(graph: CORE)
  DEVELOPMENT_AND_IMPLEMENTATION @join__enumValue(graph: CORE)
  FACILITIES_MANAGEMENT @join__enumValue(graph: CORE)
  FINANCE @join__enumValue(graph: CORE)
  GOVERNMENT_POLICY_FORMULATION_AND_EXECUTION @join__enumValue(graph: CORE)
  HEALTHCARE @join__enumValue(graph: CORE)
  HUMAN_RESOURCES @join__enumValue(graph: CORE)
  ICT @join__enumValue(graph: CORE)
  INTERIM_MANAGEMENT @join__enumValue(graph: CORE)
  LEGAL_AND_TAX @join__enumValue(graph: CORE)
  LOGISTICS_AND_SUPPLY_CHAIN_MANAGEMENT @join__enumValue(graph: CORE)
  MANAGEMENT_AND_ORGANIZATION @join__enumValue(graph: CORE)
  MARKETING_AND_SALES @join__enumValue(graph: CORE)
  OTHER @join__enumValue(graph: CORE)
  PROCUREMENT @join__enumValue(graph: CORE)
  PROJECT_MANAGEMENT @join__enumValue(graph: CORE)
  QUALITY_AND_OPERATIONS @join__enumValue(graph: CORE)
  RESEARCH @join__enumValue(graph: CORE)
  SOCIAL_WORK @join__enumValue(graph: CORE)
  SPORT_HOSPITALITY_AND_RECREATION @join__enumValue(graph: CORE)
  STRATEGY @join__enumValue(graph: CORE)
  STRATEGY_AND_ARCHITECTURE @join__enumValue(graph: CORE)
  SUPPORT_AND_PROJECT_ASSISTANCE @join__enumValue(graph: CORE)
  SYSTEM_INTEGRATION @join__enumValue(graph: CORE)
  TECHNOLOGY @join__enumValue(graph: CORE)
  TESTING @join__enumValue(graph: CORE)
  TEXT_AND_TRANSLATION @join__enumValue(graph: CORE)
  TRAINING_AND_EDUCATION @join__enumValue(graph: CORE)
  USER_INTERACTION_AND_UX @join__enumValue(graph: CORE)
  VISUAL_DESIGN_AND_PHOTOGRAPHY @join__enumValue(graph: CORE)
}

type ExternalProviderCompany @join__type(graph: CONTRACT) {
  _count: ExternalProviderCompanyCount!
  checkout: [Checkout!]
  companyId: ID!
  externalProviderId: String
}

type ExternalProviderCompanyAvgAggregate @join__type(graph: CONTRACT) {
  companyId: Float
}

type ExternalProviderCompanyCount @join__type(graph: CONTRACT) {
  checkout: Int!
}

type ExternalProviderCompanyCountAggregate @join__type(graph: CONTRACT) {
  _all: Int!
  companyId: Int!
  externalProviderId: Int!
}

input ExternalProviderCompanyCreateNestedOneWithoutCheckoutInput
  @join__type(graph: CONTRACT) {
  connect: ExternalProviderCompanyWhereUniqueInput
  connectOrCreate: ExternalProviderCompanyCreateOrConnectWithoutCheckoutInput
  create: ExternalProviderCompanyCreateWithoutCheckoutInput
}

input ExternalProviderCompanyCreateOrConnectWithoutCheckoutInput
  @join__type(graph: CONTRACT) {
  create: ExternalProviderCompanyCreateWithoutCheckoutInput!
  where: ExternalProviderCompanyWhereUniqueInput!
}

input ExternalProviderCompanyCreateWithoutCheckoutInput
  @join__type(graph: CONTRACT) {
  companyId: Int!
  externalProviderId: String
}

type ExternalProviderCompanyMaxAggregate @join__type(graph: CONTRACT) {
  companyId: Int
  externalProviderId: String
}

type ExternalProviderCompanyMinAggregate @join__type(graph: CONTRACT) {
  companyId: Int
  externalProviderId: String
}

input ExternalProviderCompanyOrderByWithRelationInput
  @join__type(graph: CONTRACT) {
  checkout: CheckoutOrderByRelationAggregateInput
  companyId: SortOrder
  externalProviderId: SortOrderInput
}

input ExternalProviderCompanyRelationFilter @join__type(graph: CONTRACT) {
  is: ExternalProviderCompanyWhereInput
  isNot: ExternalProviderCompanyWhereInput
}

type ExternalProviderCompanySumAggregate @join__type(graph: CONTRACT) {
  companyId: Int
}

input ExternalProviderCompanyUpdateOneRequiredWithoutCheckoutNestedInput
  @join__type(graph: CONTRACT) {
  connect: ExternalProviderCompanyWhereUniqueInput
  connectOrCreate: ExternalProviderCompanyCreateOrConnectWithoutCheckoutInput
  create: ExternalProviderCompanyCreateWithoutCheckoutInput
  update: ExternalProviderCompanyUpdateToOneWithWhereWithoutCheckoutInput
  upsert: ExternalProviderCompanyUpsertWithoutCheckoutInput
}

input ExternalProviderCompanyUpdateToOneWithWhereWithoutCheckoutInput
  @join__type(graph: CONTRACT) {
  data: ExternalProviderCompanyUpdateWithoutCheckoutInput!
  where: ExternalProviderCompanyWhereInput
}

input ExternalProviderCompanyUpdateWithoutCheckoutInput
  @join__type(graph: CONTRACT) {
  companyId: Int
  externalProviderId: String
}

input ExternalProviderCompanyUpsertWithoutCheckoutInput
  @join__type(graph: CONTRACT) {
  create: ExternalProviderCompanyCreateWithoutCheckoutInput!
  update: ExternalProviderCompanyUpdateWithoutCheckoutInput!
  where: ExternalProviderCompanyWhereInput
}

input ExternalProviderCompanyWhereInput @join__type(graph: CONTRACT) {
  AND: [ExternalProviderCompanyWhereInput!]
  NOT: [ExternalProviderCompanyWhereInput!]
  OR: [ExternalProviderCompanyWhereInput!]
  checkout: CheckoutListRelationFilter
  companyId: IntFilter
  externalProviderId: StringNullableFilter
}

input ExternalProviderCompanyWhereUniqueInput @join__type(graph: CONTRACT) {
  AND: [ExternalProviderCompanyWhereInput!]
  NOT: [ExternalProviderCompanyWhereInput!]
  OR: [ExternalProviderCompanyWhereInput!]
  checkout: CheckoutListRelationFilter
  companyId: Int
  externalProviderId: String
}

type File @join__type(graph: CORE) {
  _count: FileCount!
  applicationProfileFiles: [ApplicationProfileFile!]
  assignmentApplications: [AssignmentApplicationFile!]
  blobName: String!
  container: String!
  coverImageCompanies: [Company!]
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  logoImageCompanies: [Company!]
  name: String!
  owner: User
  ownerId: Int
  reference: CompanyReference
  size: Int
  updatedAt: DateTime!
  user: User
  uuid: String!
}

type FileAvgAggregate @join__type(graph: CORE) {
  id: Float
  ownerId: Float
  size: Float
}

type FileCount @join__type(graph: CORE) {
  applicationProfileFiles: Int!
  assignmentApplications: Int!
  coverImageCompanies: Int!
  logoImageCompanies: Int!
}

type FileCountAggregate @join__type(graph: CORE) {
  _all: Int!
  blobName: Int!
  container: Int!
  createdAt: Int!
  deletedAt: Int!
  id: Int!
  name: Int!
  ownerId: Int!
  size: Int!
  updatedAt: Int!
  uuid: Int!
}

input FileCreateInput @join__type(graph: CORE) {
  blobName: String!
  container: String!
  name: String!
  size: Int
  uuid: String
}

input FileCreateNestedOneWithoutApplicationProfileFilesInput
  @join__type(graph: CORE) {
  connect: FileWhereUniqueInput
  connectOrCreate: FileCreateOrConnectWithoutApplicationProfileFilesInput
  create: FileCreateWithoutApplicationProfileFilesInput
}

input FileCreateNestedOneWithoutAssignmentApplicationsInput
  @join__type(graph: CORE) {
  connect: FileWhereUniqueInput
  connectOrCreate: FileCreateOrConnectWithoutAssignmentApplicationsInput
  create: FileCreateWithoutAssignmentApplicationsInput
}

input FileCreateNestedOneWithoutCoverImageCompaniesInput
  @join__type(graph: CORE) {
  connect: FileWhereUniqueInput
  connectOrCreate: FileCreateOrConnectWithoutCoverImageCompaniesInput
  create: FileCreateWithoutCoverImageCompaniesInput
}

input FileCreateNestedOneWithoutLogoImageCompaniesInput
  @join__type(graph: CORE) {
  connect: FileWhereUniqueInput
  connectOrCreate: FileCreateOrConnectWithoutLogoImageCompaniesInput
  create: FileCreateWithoutLogoImageCompaniesInput
}

input FileCreateNestedOneWithoutReferenceInput @join__type(graph: CORE) {
  connect: FileWhereUniqueInput
  connectOrCreate: FileCreateOrConnectWithoutReferenceInput
  create: FileCreateWithoutReferenceInput
}

input FileCreateNestedOneWithoutUserInput @join__type(graph: CORE) {
  connect: FileWhereUniqueInput
  connectOrCreate: FileCreateOrConnectWithoutUserInput
  create: FileCreateWithoutUserInput
}

input FileCreateOrConnectWithoutApplicationProfileFilesInput
  @join__type(graph: CORE) {
  create: FileCreateWithoutApplicationProfileFilesInput!
  where: FileWhereUniqueInput!
}

input FileCreateOrConnectWithoutAssignmentApplicationsInput
  @join__type(graph: CORE) {
  create: FileCreateWithoutAssignmentApplicationsInput!
  where: FileWhereUniqueInput!
}

input FileCreateOrConnectWithoutCoverImageCompaniesInput
  @join__type(graph: CORE) {
  create: FileCreateWithoutCoverImageCompaniesInput!
  where: FileWhereUniqueInput!
}

input FileCreateOrConnectWithoutLogoImageCompaniesInput
  @join__type(graph: CORE) {
  create: FileCreateWithoutLogoImageCompaniesInput!
  where: FileWhereUniqueInput!
}

input FileCreateOrConnectWithoutReferenceInput @join__type(graph: CORE) {
  create: FileCreateWithoutReferenceInput!
  where: FileWhereUniqueInput!
}

input FileCreateOrConnectWithoutUserInput @join__type(graph: CORE) {
  create: FileCreateWithoutUserInput!
  where: FileWhereUniqueInput!
}

input FileCreateWithoutApplicationProfileFilesInput @join__type(graph: CORE) {
  blobName: String!
  container: String!
  name: String!
  size: Int
  uuid: String
}

input FileCreateWithoutAssignmentApplicationsInput @join__type(graph: CORE) {
  blobName: String!
  container: String!
  name: String!
  size: Int
  uuid: String
}

input FileCreateWithoutCoverImageCompaniesInput @join__type(graph: CORE) {
  blobName: String!
  container: String!
  name: String!
  size: Int
  uuid: String
}

input FileCreateWithoutLogoImageCompaniesInput @join__type(graph: CORE) {
  blobName: String!
  container: String!
  name: String!
  size: Int
  uuid: String
}

input FileCreateWithoutReferenceInput @join__type(graph: CORE) {
  blobName: String!
  container: String!
  name: String!
  size: Int
  uuid: String
}

input FileCreateWithoutUserInput @join__type(graph: CORE) {
  blobName: String!
  container: String!
  name: String!
  size: Int
  uuid: String
}

input FileInputData @join__type(graph: CORE) {
  blobName: String!
  container: String
  name: String!
  size: Int!
}

type FileIsOwner @join__type(graph: CORE) {
  isOwner: Boolean!
}

type FileMaxAggregate @join__type(graph: CORE) {
  blobName: String
  container: String
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  name: String
  ownerId: Int
  size: Int
  updatedAt: DateTime
  uuid: String
}

type FileMetadata @join__type(graph: STORAGE) {
  blobType: String
  cacheControl: String
  contentDisposition: String
  contentEncoding: String
  contentLanguage: String
  contentMD5: String
  contentType: String
  createdOn: DateTime
  lastAccessed: DateTime
  lastModified: DateTime
}

type FileMinAggregate @join__type(graph: CORE) {
  blobName: String
  container: String
  createdAt: DateTime
  deletedAt: DateTime
  id: Int
  name: String
  ownerId: Int
  size: Int
  updatedAt: DateTime
  uuid: String
}

input FileNullableRelationFilter @join__type(graph: CORE) {
  is: FileWhereInput
  isNot: FileWhereInput
}

input FileOrderByWithRelationInput @join__type(graph: CORE) {
  applicationProfileFiles: ApplicationProfileFileOrderByRelationAggregateInput
  assignmentApplications: AssignmentApplicationFileOrderByRelationAggregateInput
  blobName: SortOrder
  container: SortOrder
  coverImageCompanies: CompanyOrderByRelationAggregateInput
  createdAt: SortOrder
  id: SortOrder
  logoImageCompanies: CompanyOrderByRelationAggregateInput
  name: SortOrder
  owner: UserOrderByWithRelationInput
  ownerId: SortOrderInput
  reference: CompanyReferenceOrderByWithRelationInput
  size: SortOrderInput
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  uuid: SortOrder
}

input FileRelationFilter @join__type(graph: CORE) {
  is: FileWhereInput
  isNot: FileWhereInput
}

type FileSumAggregate @join__type(graph: CORE) {
  id: Int
  ownerId: Int
  size: Int
}

input FileUpdateOneRequiredWithoutApplicationProfileFilesNestedInput
  @join__type(graph: CORE) {
  connect: FileWhereUniqueInput
  connectOrCreate: FileCreateOrConnectWithoutApplicationProfileFilesInput
  create: FileCreateWithoutApplicationProfileFilesInput
  update: FileUpdateToOneWithWhereWithoutApplicationProfileFilesInput
  upsert: FileUpsertWithoutApplicationProfileFilesInput
}

input FileUpdateOneRequiredWithoutAssignmentApplicationsNestedInput
  @join__type(graph: CORE) {
  connect: FileWhereUniqueInput
  connectOrCreate: FileCreateOrConnectWithoutAssignmentApplicationsInput
  create: FileCreateWithoutAssignmentApplicationsInput
  update: FileUpdateToOneWithWhereWithoutAssignmentApplicationsInput
  upsert: FileUpsertWithoutAssignmentApplicationsInput
}

input FileUpdateOneWithoutCoverImageCompaniesNestedInput
  @join__type(graph: CORE) {
  connect: FileWhereUniqueInput
  connectOrCreate: FileCreateOrConnectWithoutCoverImageCompaniesInput
  create: FileCreateWithoutCoverImageCompaniesInput
  delete: FileWhereInput
  disconnect: FileWhereInput
  update: FileUpdateToOneWithWhereWithoutCoverImageCompaniesInput
  upsert: FileUpsertWithoutCoverImageCompaniesInput
}

input FileUpdateOneWithoutLogoImageCompaniesNestedInput
  @join__type(graph: CORE) {
  connect: FileWhereUniqueInput
  connectOrCreate: FileCreateOrConnectWithoutLogoImageCompaniesInput
  create: FileCreateWithoutLogoImageCompaniesInput
  delete: FileWhereInput
  disconnect: FileWhereInput
  update: FileUpdateToOneWithWhereWithoutLogoImageCompaniesInput
  upsert: FileUpsertWithoutLogoImageCompaniesInput
}

input FileUpdateOneWithoutReferenceNestedInput @join__type(graph: CORE) {
  connect: FileWhereUniqueInput
  connectOrCreate: FileCreateOrConnectWithoutReferenceInput
  create: FileCreateWithoutReferenceInput
  delete: FileWhereInput
  disconnect: FileWhereInput
  update: FileUpdateToOneWithWhereWithoutReferenceInput
  upsert: FileUpsertWithoutReferenceInput
}

input FileUpdateToOneWithWhereWithoutApplicationProfileFilesInput
  @join__type(graph: CORE) {
  data: FileUpdateWithoutApplicationProfileFilesInput!
  where: FileWhereInput
}

input FileUpdateToOneWithWhereWithoutAssignmentApplicationsInput
  @join__type(graph: CORE) {
  data: FileUpdateWithoutAssignmentApplicationsInput!
  where: FileWhereInput
}

input FileUpdateToOneWithWhereWithoutCoverImageCompaniesInput
  @join__type(graph: CORE) {
  data: FileUpdateWithoutCoverImageCompaniesInput!
  where: FileWhereInput
}

input FileUpdateToOneWithWhereWithoutLogoImageCompaniesInput
  @join__type(graph: CORE) {
  data: FileUpdateWithoutLogoImageCompaniesInput!
  where: FileWhereInput
}

input FileUpdateToOneWithWhereWithoutReferenceInput @join__type(graph: CORE) {
  data: FileUpdateWithoutReferenceInput!
  where: FileWhereInput
}

input FileUpdateWithoutApplicationProfileFilesInput @join__type(graph: CORE) {
  blobName: String
  container: String
  name: String
  size: Int
}

input FileUpdateWithoutAssignmentApplicationsInput @join__type(graph: CORE) {
  blobName: String
  container: String
  name: String
  size: Int
}

input FileUpdateWithoutCoverImageCompaniesInput @join__type(graph: CORE) {
  blobName: String
  container: String
  name: String
  size: Int
}

input FileUpdateWithoutLogoImageCompaniesInput @join__type(graph: CORE) {
  blobName: String
  container: String
  name: String
  size: Int
}

input FileUpdateWithoutReferenceInput @join__type(graph: CORE) {
  blobName: String
  container: String
  name: String
  size: Int
}

input FileUpsertWithoutApplicationProfileFilesInput @join__type(graph: CORE) {
  create: FileCreateWithoutApplicationProfileFilesInput!
  update: FileUpdateWithoutApplicationProfileFilesInput!
  where: FileWhereInput
}

input FileUpsertWithoutAssignmentApplicationsInput @join__type(graph: CORE) {
  create: FileCreateWithoutAssignmentApplicationsInput!
  update: FileUpdateWithoutAssignmentApplicationsInput!
  where: FileWhereInput
}

input FileUpsertWithoutCoverImageCompaniesInput @join__type(graph: CORE) {
  create: FileCreateWithoutCoverImageCompaniesInput!
  update: FileUpdateWithoutCoverImageCompaniesInput!
  where: FileWhereInput
}

input FileUpsertWithoutLogoImageCompaniesInput @join__type(graph: CORE) {
  create: FileCreateWithoutLogoImageCompaniesInput!
  update: FileUpdateWithoutLogoImageCompaniesInput!
  where: FileWhereInput
}

input FileUpsertWithoutReferenceInput @join__type(graph: CORE) {
  create: FileCreateWithoutReferenceInput!
  update: FileUpdateWithoutReferenceInput!
  where: FileWhereInput
}

input FileWhereInput @join__type(graph: CORE) {
  AND: [FileWhereInput!]
  NOT: [FileWhereInput!]
  OR: [FileWhereInput!]
  applicationProfileFiles: ApplicationProfileFileListRelationFilter
  assignmentApplications: AssignmentApplicationFileListRelationFilter
  blobName: StringFilter
  container: StringFilter
  coverImageCompanies: CompanyListRelationFilter
  createdAt: DateTimeFilter
  id: IntFilter
  logoImageCompanies: CompanyListRelationFilter
  name: StringFilter
  owner: UserNullableRelationFilter
  ownerId: IntNullableFilter
  reference: CompanyReferenceNullableRelationFilter
  size: IntNullableFilter
  updatedAt: DateTimeFilter
  user: UserNullableRelationFilter
  uuid: StringFilter
}

input FileWhereUniqueInput @join__type(graph: CORE) {
  AND: [FileWhereInput!]
  NOT: [FileWhereInput!]
  OR: [FileWhereInput!]
  applicationProfileFiles: ApplicationProfileFileListRelationFilter
  assignmentApplications: AssignmentApplicationFileListRelationFilter
  blobName: String
  container: StringFilter
  coverImageCompanies: CompanyListRelationFilter
  createdAt: DateTimeFilter
  id: Int
  logoImageCompanies: CompanyListRelationFilter
  name: StringFilter
  owner: UserNullableRelationFilter
  ownerId: IntNullableFilter
  reference: CompanyReferenceNullableRelationFilter
  size: IntNullableFilter
  updatedAt: DateTimeFilter
  user: UserNullableRelationFilter
  uuid: String
}

input FloatNullableFilter @join__type(graph: CORE) {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input IntFilter
  @join__type(graph: CONTRACT)
  @join__type(graph: CORE)
  @join__type(graph: NOTIFICATION) {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter
  @join__type(graph: CONTRACT)
  @join__type(graph: CORE)
  @join__type(graph: NOTIFICATION) {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

enum Interval @join__type(graph: CONTRACT) {
  HALF_YEAR @join__enumValue(graph: CONTRACT)
  MONTH @join__enumValue(graph: CONTRACT)
  NONE @join__enumValue(graph: CONTRACT)
  QUARTER @join__enumValue(graph: CONTRACT)
  WEEK @join__enumValue(graph: CONTRACT)
  YEAR @join__enumValue(graph: CONTRACT)
}

type InviteOutput @join__type(graph: AUTH) {
  success: String!
}

type Invoice @join__type(graph: CONTRACT) {
  date: DateTime
  downloadLink: String
  id: String
  name: String
  priceExVat: Float
  priceInclVat: Float
  status: String
  subscription: String
}

type LegacyApiUserAvgAggregate @join__type(graph: ASSIGNMENT_API) {
  id: Float
  userId: Float
}

type LegacyApiUserCountAggregate @join__type(graph: ASSIGNMENT_API) {
  _all: Int!
  id: Int!
  userId: Int!
}

type LegacyApiUserMaxAggregate @join__type(graph: ASSIGNMENT_API) {
  id: Int
  userId: Int
}

type LegacyApiUserMinAggregate @join__type(graph: ASSIGNMENT_API) {
  id: Int
  userId: Int
}

type LegacyApiUserSumAggregate @join__type(graph: ASSIGNMENT_API) {
  id: Int
  userId: Int
}

type LegacyInvoice @join__type(graph: CONTRACT) {
  _count: LegacyInvoiceCount!
  addressLine1: String
  addressLine2: String
  city: String
  companyId: Int!
  createdAt: DateTime!
  description: String
  firstName: String
  id: ID!
  lastName: String
  legacyInvoiceItems: [LegacyInvoiceItem!]
  postalCode: String
  status: LegacyInvoiceStatus!
}

type LegacyInvoiceAvgAggregate @join__type(graph: CONTRACT) {
  companyId: Float
  id: Float
}

type LegacyInvoiceCount @join__type(graph: CONTRACT) {
  legacyInvoiceItems: Int!
}

type LegacyInvoiceCountAggregate @join__type(graph: CONTRACT) {
  _all: Int!
  addressLine1: Int!
  addressLine2: Int!
  city: Int!
  companyId: Int!
  createdAt: Int!
  description: Int!
  firstName: Int!
  id: Int!
  lastName: Int!
  postalCode: Int!
  status: Int!
}

type LegacyInvoiceItem @join__type(graph: CONTRACT) {
  amount: Int!
  contractId: Int
  description: String
  endDate: DateTime
  id: ID!
  invoiceItemCode: LegacyInvoiceItemCode!
  legacyInvoice: LegacyInvoice!
  legacyInvoiceId: Int!
  price: Int!
  startDate: DateTime
  taxPercent: Int!
}

type LegacyInvoiceItemAvgAggregate @join__type(graph: CONTRACT) {
  amount: Float
  contractId: Float
  id: Float
  legacyInvoiceId: Float
  price: Float
  taxPercent: Float
}

enum LegacyInvoiceItemCode @join__type(graph: CONTRACT) {
  CONTRACT @join__enumValue(graph: CONTRACT)
  CREDIT @join__enumValue(graph: CONTRACT)
  DISCOUNT @join__enumValue(graph: CONTRACT)
}

type LegacyInvoiceItemCountAggregate @join__type(graph: CONTRACT) {
  _all: Int!
  amount: Int!
  contractId: Int!
  description: Int!
  endDate: Int!
  id: Int!
  invoiceItemCode: Int!
  legacyInvoiceId: Int!
  price: Int!
  startDate: Int!
  taxPercent: Int!
}

type LegacyInvoiceItemMaxAggregate @join__type(graph: CONTRACT) {
  amount: Int
  contractId: Int
  description: String
  endDate: DateTime
  id: Int
  invoiceItemCode: LegacyInvoiceItemCode
  legacyInvoiceId: Int
  price: Int
  startDate: DateTime
  taxPercent: Int
}

type LegacyInvoiceItemMinAggregate @join__type(graph: CONTRACT) {
  amount: Int
  contractId: Int
  description: String
  endDate: DateTime
  id: Int
  invoiceItemCode: LegacyInvoiceItemCode
  legacyInvoiceId: Int
  price: Int
  startDate: DateTime
  taxPercent: Int
}

type LegacyInvoiceItemSumAggregate @join__type(graph: CONTRACT) {
  amount: Int
  contractId: Int
  id: Int
  legacyInvoiceId: Int
  price: Int
  taxPercent: Int
}

type LegacyInvoiceMaxAggregate @join__type(graph: CONTRACT) {
  addressLine1: String
  addressLine2: String
  city: String
  companyId: Int
  createdAt: DateTime
  description: String
  firstName: String
  id: Int
  lastName: String
  postalCode: String
  status: LegacyInvoiceStatus
}

type LegacyInvoiceMinAggregate @join__type(graph: CONTRACT) {
  addressLine1: String
  addressLine2: String
  city: String
  companyId: Int
  createdAt: DateTime
  description: String
  firstName: String
  id: Int
  lastName: String
  postalCode: String
  status: LegacyInvoiceStatus
}

enum LegacyInvoiceStatus @join__type(graph: CONTRACT) {
  COLLECTION @join__enumValue(graph: CONTRACT)
  COLLECTIONSENT @join__enumValue(graph: CONTRACT)
  CREDIT @join__enumValue(graph: CONTRACT)
  CREDITED @join__enumValue(graph: CONTRACT)
  CREDIT_FAIL @join__enumValue(graph: CONTRACT)
  CREDIT_PENDING @join__enumValue(graph: CONTRACT)
  EXPIRED @join__enumValue(graph: CONTRACT)
  INTERNAL_PENDING @join__enumValue(graph: CONTRACT)
  NEW @join__enumValue(graph: CONTRACT)
  OPEN @join__enumValue(graph: CONTRACT)
  PAID @join__enumValue(graph: CONTRACT)
  PENDING @join__enumValue(graph: CONTRACT)
  REMOVED @join__enumValue(graph: CONTRACT)
}

type LegacyInvoiceSumAggregate @join__type(graph: CONTRACT) {
  companyId: Int
  id: Int
}

type Link @join__type(graph: CORE) {
  id: ID!
  profile: Profile!
  profileId: Int!
  type: LinkType!
  url: String!
}

type LinkAvgAggregate @join__type(graph: CORE) {
  id: Float
  profileId: Float
}

type LinkCountAggregate @join__type(graph: CORE) {
  _all: Int!
  id: Int!
  profileId: Int!
  type: Int!
  url: Int!
}

input LinkCreateNestedOneWithoutProfileInput @join__type(graph: CORE) {
  connect: LinkWhereUniqueInput
  connectOrCreate: LinkCreateOrConnectWithoutProfileInput
  create: LinkCreateWithoutProfileInput
}

input LinkCreateOrConnectWithoutProfileInput @join__type(graph: CORE) {
  create: LinkCreateWithoutProfileInput!
  where: LinkWhereUniqueInput!
}

input LinkCreateWithoutProfileInput @join__type(graph: CORE) {
  profileId: Int!
  type: LinkType!
  url: String!
}

type LinkMaxAggregate @join__type(graph: CORE) {
  id: Int
  profileId: Int
  type: LinkType
  url: String
}

type LinkMinAggregate @join__type(graph: CORE) {
  id: Int
  profileId: Int
  type: LinkType
  url: String
}

input LinkNullableRelationFilter @join__type(graph: CORE) {
  is: LinkWhereInput
  isNot: LinkWhereInput
}

input LinkOrderByWithRelationInput @join__type(graph: CORE) {
  id: SortOrder
  profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
  type: SortOrder
  url: SortOrder
}

type LinkSumAggregate @join__type(graph: CORE) {
  id: Int
  profileId: Int
}

enum LinkType @join__type(graph: CORE) {
  FACEBOOK @join__enumValue(graph: CORE)
  INSTAGRAM @join__enumValue(graph: CORE)
  LINKEDIN @join__enumValue(graph: CORE)
  WEBSITE @join__enumValue(graph: CORE)
}

input LinkUpdateOneWithoutProfileNestedInput @join__type(graph: CORE) {
  connect: LinkWhereUniqueInput
  connectOrCreate: LinkCreateOrConnectWithoutProfileInput
  create: LinkCreateWithoutProfileInput
  delete: LinkWhereInput
  disconnect: LinkWhereInput
  update: LinkUpdateToOneWithWhereWithoutProfileInput
  upsert: LinkUpsertWithoutProfileInput
}

input LinkUpdateToOneWithWhereWithoutProfileInput @join__type(graph: CORE) {
  data: LinkUpdateWithoutProfileInput!
  where: LinkWhereInput
}

input LinkUpdateWithoutProfileInput @join__type(graph: CORE) {
  profileId: Int
  type: LinkType
  url: String
}

input LinkUpsertWithoutProfileInput @join__type(graph: CORE) {
  create: LinkCreateWithoutProfileInput!
  update: LinkUpdateWithoutProfileInput!
  where: LinkWhereInput
}

input LinkWhereInput @join__type(graph: CORE) {
  AND: [LinkWhereInput!]
  NOT: [LinkWhereInput!]
  OR: [LinkWhereInput!]
  id: IntFilter
  profile: ProfileRelationFilter
  profileId: IntFilter
  type: EnumLinkTypeFilter
  url: StringFilter
}

input LinkWhereUniqueInput @join__type(graph: CORE) {
  AND: [LinkWhereInput!]
  NOT: [LinkWhereInput!]
  OR: [LinkWhereInput!]
  id: Int
  profile: ProfileRelationFilter
  profileId: IntFilter
  type: EnumLinkTypeFilter
  url: StringFilter
}

type LoginOutput @join__type(graph: AUTH) {
  idToken: String!
  permissionsByCompany: [PermissionsByCompanyId!]!
  refreshToken: String!
}

type Match @join__type(graph: CORE) {
  _count: MatchCount!
  assignment: Assignment!
  assignmentId: Int!
  createdAt: DateTime!
  id: ID!
  matchNotifications: [MatchNotification!]
  savedSearch: SavedSearch!
  savedSearchId: Int!
}

type MatchAvgAggregate @join__type(graph: CORE) {
  assignmentId: Float
  id: Float
  savedSearchId: Float
}

type MatchBatchAvgAggregate @join__type(graph: CORE) {
  id: Float
}

type MatchBatchCount @join__type(graph: CORE) {
  assignments: Int!
}

type MatchBatchCountAggregate @join__type(graph: CORE) {
  _all: Int!
  createdAt: Int!
  failed: Int!
  finishedAt: Int!
  id: Int!
}

type MatchBatchMaxAggregate @join__type(graph: CORE) {
  createdAt: DateTime
  failed: Boolean
  finishedAt: DateTime
  id: Int
}

type MatchBatchMinAggregate @join__type(graph: CORE) {
  createdAt: DateTime
  failed: Boolean
  finishedAt: DateTime
  id: Int
}

type MatchBatchSumAggregate @join__type(graph: CORE) {
  id: Int
}

type MatchCount @join__type(graph: CORE) {
  matchNotifications: Int!
}

type MatchCountAggregate @join__type(graph: CORE) {
  _all: Int!
  assignmentId: Int!
  createdAt: Int!
  id: Int!
  savedSearchId: Int!
}

type MatchMaxAggregate @join__type(graph: CORE) {
  assignmentId: Int
  createdAt: DateTime
  id: Int
  savedSearchId: Int
}

type MatchMinAggregate @join__type(graph: CORE) {
  assignmentId: Int
  createdAt: DateTime
  id: Int
  savedSearchId: Int
}

type MatchNotification @join__type(graph: CORE) {
  assignmentId: Int!
  createdAt: DateTime!
  handledAt: DateTime
  id: ID!
  match: Match!
  matchId: Int!
  type: MatchNotificationType!
  userId: Int!
}

type MatchNotificationAvgAggregate @join__type(graph: CORE) {
  assignmentId: Float
  id: Float
  matchId: Float
  userId: Float
}

type MatchNotificationCountAggregate @join__type(graph: CORE) {
  _all: Int!
  assignmentId: Int!
  createdAt: Int!
  handledAt: Int!
  id: Int!
  matchId: Int!
  type: Int!
  userId: Int!
}

type MatchNotificationMaxAggregate @join__type(graph: CORE) {
  assignmentId: Int
  createdAt: DateTime
  handledAt: DateTime
  id: Int
  matchId: Int
  type: MatchNotificationType
  userId: Int
}

type MatchNotificationMinAggregate @join__type(graph: CORE) {
  assignmentId: Int
  createdAt: DateTime
  handledAt: DateTime
  id: Int
  matchId: Int
  type: MatchNotificationType
  userId: Int
}

type MatchNotificationSumAggregate @join__type(graph: CORE) {
  assignmentId: Int
  id: Int
  matchId: Int
  userId: Int
}

enum MatchNotificationType @join__type(graph: CORE) {
  BATCH @join__enumValue(graph: CORE)
  INSTANT @join__enumValue(graph: CORE)
}

type MatchSumAggregate @join__type(graph: CORE) {
  assignmentId: Int
  id: Int
  savedSearchId: Int
}

enum ModeType @join__type(graph: CONTRACT) {
  PAYMENT @join__enumValue(graph: CONTRACT)
  SETUP @join__enumValue(graph: CONTRACT)
  SUBSCRIPTION @join__enumValue(graph: CONTRACT)
}

type Mutation
  @join__type(graph: ASSIGNMENT_API)
  @join__type(graph: AUTH)
  @join__type(graph: CONTRACT)
  @join__type(graph: CORE)
  @join__type(graph: NOTIFICATION)
  @join__type(graph: SEARCH)
  @join__type(graph: STORAGE) {
  addFavorite(assignmentId: Int!): UserFavorite! @join__field(graph: CORE)
  cancelSubscription(contractId: Float!): StripeSubscription!
    @join__field(graph: CONTRACT)
  checkoutCreate(data: CheckoutCreateInput!): Checkout!
    @join__field(graph: CONTRACT)
  closeAssignment(assignmentId: Int!): Status! @join__field(graph: CORE)
  companyCreate(data: CompanyCreateInput!): Company! @join__field(graph: CORE)
  companyTypeUpdate(companyId: Float!, type: CompanyType!): String!
    @join__field(graph: CORE)
  companyUpdate(
    data: CompanyUpdateInput!
    where: CompanyWhereUniqueInput!
  ): Company! @join__field(graph: CORE)
  conceptAssignment(assignmentId: Int!): Status! @join__field(graph: CORE)
  confirm(token: String!): ConfirmOutput! @join__field(graph: AUTH)
  confirmInvite(
    companyId: Float
    firstName: String!
    inviteToken: String!
    lastName: String!
    password: String!
    phoneNumber: String!
    privacySettings: PrivacySettings!
  ): ConfirmInviteOutput! @join__field(graph: AUTH)
  createApiUserKey(
    apiCompanyId: Int!
    userId: Int!
    userKey: String!
    usersCompaniesId: Int!
  ): ApiUserCompany! @join__field(graph: ASSIGNMENT_API)
  createApplicationProfile(
    data: ApplicationProfileCreateInput!
  ): ApplicationProfile! @join__field(graph: CORE)
  createAssignment(
    assignmentId: Int
    data: AssignmentUpdateInput!
  ): Assignment! @join__field(graph: CORE)
  createAssignmentApplication(
    assignmentApplicationId: Int
    assignmentId: Int!
    data: AssignmentApplicationUpdateInput!
  ): AssignmentApplication! @join__field(graph: CORE)
  createAssignmentApplicationRead(
    assignmentApplicationId: Float!
  ): AssignmentApplicationRead! @join__field(graph: CORE)
  createAssignmentRead(assignmentId: Float!): AssignmentRead!
    @join__field(graph: CORE)
  createCompanyReference(
    data: CompanyReferenceCreateInput!
    fileInput: FileInputData
  ): CompanyReference! @join__field(graph: CORE)
  createContract(input: CustomContractCreateInput!): CreateContractOutput!
    @join__field(graph: CONTRACT)
  createDraftAssignment(
    assignmentId: Int
    data: AssignmentUpdateInput!
  ): Assignment! @join__field(graph: CORE)
  createDraftAssignmentApplication(
    assignmentApplicationId: Int
    assignmentId: Int!
    data: AssignmentApplicationUpdateInput!
  ): AssignmentApplication! @join__field(graph: CORE)
  createFile(data: FileCreateInput!): File! @join__field(graph: CORE)
  createFileForApplicationProfile(
    applicationProfileUUID: String!
    data: FileInputData!
  ): File! @join__field(graph: CORE)
  createFileForAssignmentApplication(
    assignmentApplicationUUID: String!
    data: FileInputData!
  ): File! @join__field(graph: CORE)
  createLegacyApiAccount(
    apiEmailRegex: String
    companyId: Int!
    defaultOwnerId: Int!
  ): ApiCompany! @join__field(graph: ASSIGNMENT_API)
  createOrUpdateCompanyReference(
    companyReferenceId: Float
    data: CompanyReferenceUpdateInput!
    fileInput: FileInputData
  ): CompanyReference! @join__field(graph: CORE)
  createQuestionAssignmentApplication(
    assignmentId: Int!
    questionText: String!
  ): AssignmentApplication! @join__field(graph: CORE)
  createReview(data: ReviewCreateInput!): Review! @join__field(graph: CORE)
  createSavedSearch(data: SavedSearchCreateInput!): SavedSearch!
    @join__field(graph: CORE)
  deleteAllAssignments: String! @join__field(graph: SEARCH)
  deleteApplicationProfile(applicationProfileId: Int!): Boolean!
    @join__field(graph: CORE)
  deleteAssignment(assignmentId: Int!): String! @join__field(graph: CORE)
  deleteAssignmentApplication(assignmentApplicationId: Int!): Boolean!
    @join__field(graph: CORE)
  deleteAssignmentIndex(assignmentId: Int!): String! @join__field(graph: SEARCH)
  deleteCompanyImage(imageType: CompanyImageType!): Boolean!
    @join__field(graph: CORE)
  deleteCompanyReference(companyReferenceId: Float!): CompanyReference!
    @join__field(graph: CORE)
  deleteReview(reviewId: Int!): Boolean! @join__field(graph: CORE)
  deleteSavedSearch(where: SavedSearchFindUniqueInput!): Boolean!
    @join__field(graph: CORE)
  deleteUser(userId: Int!): Boolean! @join__field(graph: CORE)
  enableSubscription(contractId: Float!): StripeSubscription!
    @join__field(graph: CONTRACT)
  endProContract(
    basicCompanyStartDate: String!
    companyId: Float!
    proEndDate: String!
  ): EndProContractOutput! @join__field(graph: CONTRACT)
  fileDelete(blobName: String!, containerName: String!): Boolean!
    @join__field(graph: STORAGE)
  hubSpotEvent(eventName: String!, utk: String!): Boolean!
    @join__field(graph: CORE)
  invite(
    companyId: Float
    email: String!
    message: String
    userCompanyRole: String!
  ): InviteOutput! @join__field(graph: AUTH)
  inviteAdmin(
    companyId: Float
    email: String!
    message: String
    userCompanyRole: String!
  ): InviteOutput! @join__field(graph: AUTH)
  login(email: String!, password: String!): LoginOutput!
    @join__field(graph: AUTH)
  markNotificationsAsRead(where: NotificationWhereInput!): Int!
    @join__field(graph: NOTIFICATION)
  pauseAssignment(assignmentId: Int!): Status! @join__field(graph: CORE)
  reassignAssignment(assignmentId: Int!, ownerId: Int!): Assignment!
    @join__field(graph: CORE)
  refreshSession(refreshToken: String!): LoginOutput! @join__field(graph: AUTH)
  register(
    email: String!
    firstName: String!
    lastName: String!
    password: String!
    phoneNumber: String!
    privacySettings: PrivacySettings!
    role: String!
  ): RegisterOutput! @join__field(graph: AUTH)
  reindex: String! @join__field(graph: SEARCH)
  removeFavorite(assignmentId: Int!): UserFavorite! @join__field(graph: CORE)
  requestAssignmentReview(assignmentId: Int!): Status! @join__field(graph: CORE)
  requestEmailChangeAdmin(
    email: String!
    userId: Int!
  ): RequestInvitationOutput! @join__field(graph: CORE)
  requestInvitation(cocNumber: String!): RequestInvitationOutput!
    @join__field(graph: CORE)
  resetMyUnreadNotificationCount: String! @join__field(graph: NOTIFICATION)
  resetPassword(password: String!, token: String!): PasswordResetOutput!
    @join__field(graph: AUTH)
  resumeAssignment(assignmentId: Int!): Status! @join__field(graph: CORE)
  reviewApproved(assignmentId: Int!): Status! @join__field(graph: CORE)
  reviewAssignment(assignmentId: Int!): Status! @join__field(graph: CORE)
  reviewDeclined(data: DeclineAssignment!): Status! @join__field(graph: CORE)
  sendPasswordResetEmail(email: String!): PasswordForgetOutput!
    @join__field(graph: AUTH)
  settingUpsert(
    key: String!
    settingId: Int
    type: SettingType!
    value: String!
  ): Setting! @join__field(graph: CORE)
  settingUpsertAdmin(
    key: String!
    settingId: Int
    type: SettingType!
    userId: Int!
    value: String!
  ): Setting! @join__field(graph: CORE)
  syncAssignment(assignmentId: Int!): String! @join__field(graph: CORE)
  updateApplicationProfile(
    data: ApplicationProfileUpdateInput!
    where: ApplicationProfileWhereUniqueInput!
  ): ApplicationProfile! @join__field(graph: CORE)
  updateAssignmentAdmin(
    assignmentId: Int
    data: AssignmentUpdateInput!
  ): Assignment! @join__field(graph: CORE)
  updateAssignmentApplicationsStatus(
    assignmentApplicationIds: [Int!]!
    message: String
    status: AssignmentApplicationStatus!
  ): [Status!]! @join__field(graph: CORE)
  updateCompanyImage(
    data: FileInputData!
    imageType: CompanyImageType!
  ): Company! @join__field(graph: CORE)
  updateContract(
    companyId: Float!
    contractId: Float!
    input: ContractUpdateInput!
  ): UpdateContractOutput! @join__field(graph: CONTRACT)
  updatePassword(
    currentPassword: String!
    email: String!
    password: String!
  ): PasswordUpdateOutput! @join__field(graph: AUTH)
  updateSavedSearch(
    data: SavedSearchUpdateInput!
    where: SavedSearchFindUniqueInput!
  ): SavedSearch! @join__field(graph: CORE)
  userCompanyDelete(
    currentOwner: Float
    newOwner: Float
    where: UsersCompaniesWhereUniqueInput!
  ): Boolean! @join__field(graph: CORE)
  userCompanyUpdate(
    data: UpdateUsersCompaniesInput!
    where: UsersCompaniesWhereUniqueInput!
  ): Boolean! @join__field(graph: CORE)
  userUpdate(data: UserUpdateInput!, id: Int!): User! @join__field(graph: CORE)
  verifyEmailChange(password: String!, token: String!): LoginOutput!
    @join__field(graph: AUTH)
}

input NestedBoolFilter
  @join__type(graph: CONTRACT)
  @join__type(graph: CORE)
  @join__type(graph: NOTIFICATION) {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolNullableFilter @join__type(graph: CORE) {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedDateTimeFilter
  @join__type(graph: CONTRACT)
  @join__type(graph: CORE)
  @join__type(graph: NOTIFICATION) {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter
  @join__type(graph: CONTRACT)
  @join__type(graph: CORE)
  @join__type(graph: NOTIFICATION) {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumAssignmentApplicationStatusFilter @join__type(graph: CORE) {
  equals: AssignmentApplicationStatus
  in: [AssignmentApplicationStatus!]
  not: NestedEnumAssignmentApplicationStatusFilter
  notIn: [AssignmentApplicationStatus!]
}

input NestedEnumAssignmentSourceFilter @join__type(graph: CORE) {
  equals: AssignmentSource
  in: [AssignmentSource!]
  not: NestedEnumAssignmentSourceFilter
  notIn: [AssignmentSource!]
}

input NestedEnumAssignmentStatusNullableFilter @join__type(graph: CORE) {
  equals: AssignmentStatus
  in: [AssignmentStatus!]
  not: NestedEnumAssignmentStatusNullableFilter
  notIn: [AssignmentStatus!]
}

input NestedEnumAssignmentTypeNullableFilter @join__type(graph: CORE) {
  equals: AssignmentType
  in: [AssignmentType!]
  not: NestedEnumAssignmentTypeNullableFilter
  notIn: [AssignmentType!]
}

input NestedEnumAvailabilityNullableFilter @join__type(graph: CORE) {
  equals: Availability
  in: [Availability!]
  not: NestedEnumAvailabilityNullableFilter
  notIn: [Availability!]
}

input NestedEnumCompanyTypeFilter @join__type(graph: CORE) {
  equals: CompanyType
  in: [CompanyType!]
  not: NestedEnumCompanyTypeFilter
  notIn: [CompanyType!]
}

input NestedEnumContractTypeNullableFilter @join__type(graph: CORE) {
  equals: ContractType
  in: [ContractType!]
  not: NestedEnumContractTypeNullableFilter
  notIn: [ContractType!]
}

input NestedEnumCustomerRelationNullableFilter @join__type(graph: CORE) {
  equals: CustomerRelation
  in: [CustomerRelation!]
  not: NestedEnumCustomerRelationNullableFilter
  notIn: [CustomerRelation!]
}

input NestedEnumDurationTypeNullableFilter @join__type(graph: CORE) {
  equals: DurationType
  in: [DurationType!]
  not: NestedEnumDurationTypeNullableFilter
  notIn: [DurationType!]
}

input NestedEnumExpertiseTypeFilter @join__type(graph: CORE) {
  equals: ExpertiseType
  in: [ExpertiseType!]
  not: NestedEnumExpertiseTypeFilter
  notIn: [ExpertiseType!]
}

input NestedEnumIntervalNullableFilter @join__type(graph: CONTRACT) {
  equals: Interval
  in: [Interval!]
  not: NestedEnumIntervalNullableFilter
  notIn: [Interval!]
}

input NestedEnumLinkTypeFilter @join__type(graph: CORE) {
  equals: LinkType
  in: [LinkType!]
  not: NestedEnumLinkTypeFilter
  notIn: [LinkType!]
}

input NestedEnumModeTypeNullableFilter @join__type(graph: CONTRACT) {
  equals: ModeType
  in: [ModeType!]
  not: NestedEnumModeTypeNullableFilter
  notIn: [ModeType!]
}

input NestedEnumNotificationTypeFilter @join__type(graph: NOTIFICATION) {
  equals: NotificationType
  in: [NotificationType!]
  not: NestedEnumNotificationTypeFilter
  notIn: [NotificationType!]
}

input NestedEnumOnLocationNullableFilter @join__type(graph: CORE) {
  equals: OnLocation
  in: [OnLocation!]
  not: NestedEnumOnLocationNullableFilter
  notIn: [OnLocation!]
}

input NestedEnumProductSlugFilter @join__type(graph: CONTRACT) {
  equals: ProductSlug
  in: [ProductSlug!]
  not: NestedEnumProductSlugFilter
  notIn: [ProductSlug!]
}

input NestedEnumRateTypeNullableFilter @join__type(graph: CORE) {
  equals: RateType
  in: [RateType!]
  not: NestedEnumRateTypeNullableFilter
  notIn: [RateType!]
}

input NestedEnumRenewalIntervalNullableFilter @join__type(graph: CONTRACT) {
  equals: RenewalInterval
  in: [RenewalInterval!]
  not: NestedEnumRenewalIntervalNullableFilter
  notIn: [RenewalInterval!]
}

input NestedEnumReviewTypeFilter @join__type(graph: CORE) {
  equals: ReviewType
  in: [ReviewType!]
  not: NestedEnumReviewTypeFilter
  notIn: [ReviewType!]
}

input NestedEnumSavedSearchTypeNullableFilter @join__type(graph: CORE) {
  equals: SavedSearchType
  in: [SavedSearchType!]
  not: NestedEnumSavedSearchTypeNullableFilter
  notIn: [SavedSearchType!]
}

input NestedEnumStatusModelTypeFilter @join__type(graph: CORE) {
  equals: StatusModelType
  in: [StatusModelType!]
  not: NestedEnumStatusModelTypeFilter
  notIn: [StatusModelType!]
}

input NestedEnumUsageTypeFilter @join__type(graph: CONTRACT) {
  equals: UsageType
  in: [UsageType!]
  not: NestedEnumUsageTypeFilter
  notIn: [UsageType!]
}

input NestedEnumUserCompanyRoleFilter @join__type(graph: CORE) {
  equals: UserCompanyRole
  in: [UserCompanyRole!]
  not: NestedEnumUserCompanyRoleFilter
  notIn: [UserCompanyRole!]
}

input NestedFloatNullableFilter @join__type(graph: CORE) {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter
  @join__type(graph: CONTRACT)
  @join__type(graph: CORE)
  @join__type(graph: NOTIFICATION) {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter
  @join__type(graph: CONTRACT)
  @join__type(graph: CORE)
  @join__type(graph: NOTIFICATION) {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter @join__type(graph: CONTRACT) @join__type(graph: CORE) {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter
  @join__type(graph: CONTRACT)
  @join__type(graph: CORE)
  @join__type(graph: NOTIFICATION) {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Notification @join__type(graph: NOTIFICATION) {
  companyId: Int
  createdAt: DateTime!
  data: String
  deletedAt: DateTime
  emailNotification: Boolean!
  hubspotStatusId: String
  id: ID!
  platformNotification: Boolean!
  readAt: DateTime
  retryNotificationId: Int
  type: NotificationType!
  userId: Int!
}

type NotificationAvgAggregate @join__type(graph: NOTIFICATION) {
  companyId: Float
  id: Float
  retryNotificationId: Float
  userId: Float
}

type NotificationCountAggregate @join__type(graph: NOTIFICATION) {
  _all: Int!
  companyId: Int!
  createdAt: Int!
  data: Int!
  deletedAt: Int!
  emailNotification: Int!
  hubspotStatusId: Int!
  id: Int!
  platformNotification: Int!
  readAt: Int!
  retryNotificationId: Int!
  type: Int!
  userId: Int!
}

type NotificationMaxAggregate @join__type(graph: NOTIFICATION) {
  companyId: Int
  createdAt: DateTime
  data: String
  deletedAt: DateTime
  emailNotification: Boolean
  hubspotStatusId: String
  id: Int
  platformNotification: Boolean
  readAt: DateTime
  retryNotificationId: Int
  type: NotificationType
  userId: Int
}

type NotificationMinAggregate @join__type(graph: NOTIFICATION) {
  companyId: Int
  createdAt: DateTime
  data: String
  deletedAt: DateTime
  emailNotification: Boolean
  hubspotStatusId: String
  id: Int
  platformNotification: Boolean
  readAt: DateTime
  retryNotificationId: Int
  type: NotificationType
  userId: Int
}

input NotificationOrderByWithRelationInput @join__type(graph: NOTIFICATION) {
  companyId: SortOrderInput
  createdAt: SortOrder
  data: SortOrderInput
  deletedAt: SortOrderInput
  emailNotification: SortOrder
  hubspotStatusId: SortOrderInput
  id: SortOrder
  platformNotification: SortOrder
  readAt: SortOrderInput
  retryNotificationId: SortOrderInput
  type: SortOrder
  userId: SortOrder
}

enum NotificationScalarFieldEnum @join__type(graph: NOTIFICATION) {
  companyId @join__enumValue(graph: NOTIFICATION)
  createdAt @join__enumValue(graph: NOTIFICATION)
  data @join__enumValue(graph: NOTIFICATION)
  deletedAt @join__enumValue(graph: NOTIFICATION)
  emailNotification @join__enumValue(graph: NOTIFICATION)
  hubspotStatusId @join__enumValue(graph: NOTIFICATION)
  id @join__enumValue(graph: NOTIFICATION)
  platformNotification @join__enumValue(graph: NOTIFICATION)
  readAt @join__enumValue(graph: NOTIFICATION)
  retryNotificationId @join__enumValue(graph: NOTIFICATION)
  type @join__enumValue(graph: NOTIFICATION)
  userId @join__enumValue(graph: NOTIFICATION)
}

type NotificationSumAggregate @join__type(graph: NOTIFICATION) {
  companyId: Int
  id: Int
  retryNotificationId: Int
  userId: Int
}

enum NotificationType @join__type(graph: NOTIFICATION) {
  ASSIGNMENTS_REASSIGNED @join__enumValue(graph: NOTIFICATION)
  ASSIGNMENT_APPLICATION_CREATED @join__enumValue(graph: NOTIFICATION)
  ASSIGNMENT_APPLICATION_CREATED_COPY @join__enumValue(graph: NOTIFICATION)
  ASSIGNMENT_APPLICATION_STATUS_CHANGED @join__enumValue(graph: NOTIFICATION)
  ASSIGNMENT_ARCHIVED @join__enumValue(graph: NOTIFICATION)
  ASSIGNMENT_AUTO_CLOSED @join__enumValue(graph: NOTIFICATION)
  ASSIGNMENT_CLOSED @join__enumValue(graph: NOTIFICATION)
  ASSIGNMENT_DECLINED @join__enumValue(graph: NOTIFICATION)
  ASSIGNMENT_PUBLISHED @join__enumValue(graph: NOTIFICATION)
  COMPANY_USER_REMOVED @join__enumValue(graph: NOTIFICATION)
  MATCH_NOTIFICATION_BATCH @join__enumValue(graph: NOTIFICATION)
  MATCH_NOTIFICATION_INSTANT @join__enumValue(graph: NOTIFICATION)
  NEW_CHAT_MESSAGE @join__enumValue(graph: NOTIFICATION)
  REVIEW_CREATED @join__enumValue(graph: NOTIFICATION)
  USER_EMAIL_CHANGE_REQUESTED @join__enumValue(graph: NOTIFICATION)
  USER_EMAIL_CHANGE_REQUESTED_NOTIFICATION @join__enumValue(graph: NOTIFICATION)
  USER_EMAIL_CONFIRMATION_REQUESTED @join__enumValue(graph: NOTIFICATION)
  USER_INVITE_CREATED @join__enumValue(graph: NOTIFICATION)
  USER_PASSWORD_CHANGED @join__enumValue(graph: NOTIFICATION)
  USER_PASSWORD_RESET_REQUESTED @join__enumValue(graph: NOTIFICATION)
  USER_ROLE_CHANGED @join__enumValue(graph: NOTIFICATION)
}

input NotificationWhereInput @join__type(graph: NOTIFICATION) {
  AND: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  companyId: IntNullableFilter
  createdAt: DateTimeFilter
  data: StringNullableFilter
  deletedAt: DateTimeNullableFilter
  emailNotification: BoolFilter
  hubspotStatusId: StringNullableFilter
  id: IntFilter
  platformNotification: BoolFilter
  readAt: DateTimeNullableFilter
  retryNotificationId: IntNullableFilter
  type: EnumNotificationTypeFilter
  userId: IntFilter
}

input NotificationWhereUniqueInput @join__type(graph: NOTIFICATION) {
  AND: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  companyId: IntNullableFilter
  createdAt: DateTimeFilter
  data: StringNullableFilter
  deletedAt: DateTimeNullableFilter
  emailNotification: BoolFilter
  hubspotStatusId: StringNullableFilter
  id: Int
  platformNotification: BoolFilter
  readAt: DateTimeNullableFilter
  retryNotificationId: IntNullableFilter
  type: EnumNotificationTypeFilter
  userId: IntFilter
}

enum NullsOrder
  @join__type(graph: CONTRACT)
  @join__type(graph: CORE)
  @join__type(graph: NOTIFICATION) {
  first
    @join__enumValue(graph: CONTRACT)
    @join__enumValue(graph: CORE)
    @join__enumValue(graph: NOTIFICATION)
  last
    @join__enumValue(graph: CONTRACT)
    @join__enumValue(graph: CORE)
    @join__enumValue(graph: NOTIFICATION)
}

enum OnLocation @join__type(graph: CORE) {
  NEGOTIABLE @join__enumValue(graph: CORE)
  NO @join__enumValue(graph: CORE)
  UNKNOWN @join__enumValue(graph: CORE)
  YES @join__enumValue(graph: CORE)
}

type PasswordForgetOutput @join__type(graph: AUTH) {
  success: String!
}

type PasswordResetOutput @join__type(graph: AUTH) {
  token: String!
}

type PasswordUpdateOutput @join__type(graph: AUTH) {
  success: String!
}

type PermissionsByCompanyId @join__type(graph: AUTH) {
  companyId: Float!
  permissions: [String!]!
}

type Plan @join__type(graph: CONTRACT) {
  _count: PlanCount!
  checkouts: [Checkout!]
  contracts: [Contract!]
  externalProviderId: String
  externalProviderPaymentMethodId: String
  externalProviderSync: Boolean!
  id: ID!
  price: StripePrice
  product: Product!
  productId: Int!
  renewalInterval: RenewalInterval
  slug: String
  usageAmount: Int
  usageInterval: Interval
  usageIntervalCount: Int
  usageType: UsageType!
}

type PlanAvgAggregate @join__type(graph: CONTRACT) {
  id: Float
  productId: Float
  usageAmount: Float
  usageIntervalCount: Float
}

type PlanCount @join__type(graph: CONTRACT) {
  checkouts: Int!
  contracts: Int!
}

type PlanCountAggregate @join__type(graph: CONTRACT) {
  _all: Int!
  externalProviderId: Int!
  externalProviderPaymentMethodId: Int!
  externalProviderSync: Int!
  id: Int!
  productId: Int!
  renewalInterval: Int!
  slug: Int!
  usageAmount: Int!
  usageInterval: Int!
  usageIntervalCount: Int!
  usageType: Int!
}

input PlanCreateOrConnectWithoutContractsInput @join__type(graph: CONTRACT) {
  create: PlanCreateWithoutContractsInput!
  where: PlanWhereUniqueInput!
}

input PlanCreateWithoutContractsInput @join__type(graph: CONTRACT) {
  checkouts: CheckoutCreateNestedManyWithoutPlanInput
  externalProviderId: String
  externalProviderPaymentMethodId: String
  externalProviderSync: Boolean!
  product: ProductCreateNestedOneWithoutPlansInput!
  renewalInterval: RenewalInterval
  slug: String
  usageAmount: Int
  usageInterval: Interval
  usageIntervalCount: Int
  usageType: UsageType!
}

input PlanListRelationFilter @join__type(graph: CONTRACT) {
  every: PlanWhereInput
  none: PlanWhereInput
  some: PlanWhereInput
}

type PlanMaxAggregate @join__type(graph: CONTRACT) {
  externalProviderId: String
  externalProviderPaymentMethodId: String
  externalProviderSync: Boolean
  id: Int
  productId: Int
  renewalInterval: RenewalInterval
  slug: String
  usageAmount: Int
  usageInterval: Interval
  usageIntervalCount: Int
  usageType: UsageType
}

type PlanMinAggregate @join__type(graph: CONTRACT) {
  externalProviderId: String
  externalProviderPaymentMethodId: String
  externalProviderSync: Boolean
  id: Int
  productId: Int
  renewalInterval: RenewalInterval
  slug: String
  usageAmount: Int
  usageInterval: Interval
  usageIntervalCount: Int
  usageType: UsageType
}

input PlanOrderByRelationAggregateInput @join__type(graph: CONTRACT) {
  _count: SortOrder
}

input PlanOrderByWithRelationInput @join__type(graph: CONTRACT) {
  checkouts: CheckoutOrderByRelationAggregateInput
  contracts: ContractOrderByRelationAggregateInput
  externalProviderId: SortOrderInput
  externalProviderPaymentMethodId: SortOrderInput
  externalProviderSync: SortOrder
  id: SortOrder
  product: ProductOrderByWithRelationInput
  productId: SortOrder
  renewalInterval: SortOrderInput
  slug: SortOrderInput
  usageAmount: SortOrderInput
  usageInterval: SortOrderInput
  usageIntervalCount: SortOrderInput
  usageType: SortOrder
}

input PlanRelationFilter @join__type(graph: CONTRACT) {
  is: PlanWhereInput
  isNot: PlanWhereInput
}

enum PlanScalarFieldEnum @join__type(graph: CONTRACT) {
  externalProviderId @join__enumValue(graph: CONTRACT)
  externalProviderPaymentMethodId @join__enumValue(graph: CONTRACT)
  externalProviderSync @join__enumValue(graph: CONTRACT)
  id @join__enumValue(graph: CONTRACT)
  productId @join__enumValue(graph: CONTRACT)
  renewalInterval @join__enumValue(graph: CONTRACT)
  slug @join__enumValue(graph: CONTRACT)
  usageAmount @join__enumValue(graph: CONTRACT)
  usageInterval @join__enumValue(graph: CONTRACT)
  usageIntervalCount @join__enumValue(graph: CONTRACT)
  usageType @join__enumValue(graph: CONTRACT)
}

type PlanSumAggregate @join__type(graph: CONTRACT) {
  id: Int
  productId: Int
  usageAmount: Int
  usageIntervalCount: Int
}

input PlanUpdateOneRequiredWithoutContractsNestedInput
  @join__type(graph: CONTRACT) {
  connect: PlanWhereUniqueInput
  connectOrCreate: PlanCreateOrConnectWithoutContractsInput
  create: PlanCreateWithoutContractsInput
  update: PlanUpdateToOneWithWhereWithoutContractsInput
  upsert: PlanUpsertWithoutContractsInput
}

input PlanUpdateToOneWithWhereWithoutContractsInput
  @join__type(graph: CONTRACT) {
  data: PlanUpdateWithoutContractsInput!
  where: PlanWhereInput
}

input PlanUpdateWithoutContractsInput @join__type(graph: CONTRACT) {
  checkouts: CheckoutUpdateManyWithoutPlanNestedInput
  externalProviderId: String
  externalProviderPaymentMethodId: String
  externalProviderSync: Boolean
  product: ProductUpdateOneRequiredWithoutPlansNestedInput
  renewalInterval: RenewalInterval
  slug: String
  usageAmount: Int
  usageInterval: Interval
  usageIntervalCount: Int
  usageType: UsageType
}

input PlanUpsertWithoutContractsInput @join__type(graph: CONTRACT) {
  create: PlanCreateWithoutContractsInput!
  update: PlanUpdateWithoutContractsInput!
  where: PlanWhereInput
}

input PlanWhereInput @join__type(graph: CONTRACT) {
  AND: [PlanWhereInput!]
  NOT: [PlanWhereInput!]
  OR: [PlanWhereInput!]
  checkouts: CheckoutListRelationFilter
  contracts: ContractListRelationFilter
  externalProviderId: StringNullableFilter
  externalProviderPaymentMethodId: StringNullableFilter
  externalProviderSync: BoolFilter
  id: IntFilter
  product: ProductRelationFilter
  productId: IntFilter
  renewalInterval: EnumRenewalIntervalNullableFilter
  slug: StringNullableFilter
  usageAmount: IntNullableFilter
  usageInterval: EnumIntervalNullableFilter
  usageIntervalCount: IntNullableFilter
  usageType: EnumUsageTypeFilter
}

input PlanWhereUniqueInput @join__type(graph: CONTRACT) {
  AND: [PlanWhereInput!]
  NOT: [PlanWhereInput!]
  OR: [PlanWhereInput!]
  checkouts: CheckoutListRelationFilter
  contracts: ContractListRelationFilter
  externalProviderId: StringNullableFilter
  externalProviderPaymentMethodId: StringNullableFilter
  externalProviderSync: BoolFilter
  id: Int
  product: ProductRelationFilter
  productId: IntFilter
  renewalInterval: EnumRenewalIntervalNullableFilter
  slug: StringNullableFilter
  usageAmount: IntNullableFilter
  usageInterval: EnumIntervalNullableFilter
  usageIntervalCount: IntNullableFilter
  usageType: EnumUsageTypeFilter
}

input PrivacySettings @join__type(graph: AUTH) {
  askForFeedback: Boolean!
  informAboutProductsAndServices: Boolean!
  informEmployersAnonymouslyWhenMatched: Boolean!
  provideEmployersWithCvWhenMatched: Boolean!
  sendContent: Boolean!
  sendNewsletter: Boolean!
  shareWithMotherAndSisterCompanies: Boolean!
}

type Product @join__type(graph: CONTRACT) {
  _count: ProductCount!
  description: String!
  externalProviderId: String
  externalProviderSync: Boolean!
  id: ID!
  modeType: ModeType
  name: String!
  plans: [Plan!]
  slug: ProductSlug!
}

type ProductAvgAggregate @join__type(graph: CONTRACT) {
  id: Float
}

type ProductCount @join__type(graph: CONTRACT) {
  plans: Int!
}

type ProductCountAggregate @join__type(graph: CONTRACT) {
  _all: Int!
  description: Int!
  externalProviderId: Int!
  externalProviderSync: Int!
  id: Int!
  modeType: Int!
  name: Int!
  slug: Int!
}

input ProductCreateNestedOneWithoutPlansInput @join__type(graph: CONTRACT) {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutPlansInput
  create: ProductCreateWithoutPlansInput
}

input ProductCreateOrConnectWithoutPlansInput @join__type(graph: CONTRACT) {
  create: ProductCreateWithoutPlansInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateWithoutPlansInput @join__type(graph: CONTRACT) {
  description: String!
  externalProviderId: String
  externalProviderSync: Boolean!
  modeType: ModeType
  name: String!
  slug: ProductSlug!
}

type ProductMaxAggregate @join__type(graph: CONTRACT) {
  description: String
  externalProviderId: String
  externalProviderSync: Boolean
  id: Int
  modeType: ModeType
  name: String
  slug: ProductSlug
}

type ProductMinAggregate @join__type(graph: CONTRACT) {
  description: String
  externalProviderId: String
  externalProviderSync: Boolean
  id: Int
  modeType: ModeType
  name: String
  slug: ProductSlug
}

input ProductOrderByWithRelationInput @join__type(graph: CONTRACT) {
  description: SortOrder
  externalProviderId: SortOrderInput
  externalProviderSync: SortOrder
  id: SortOrder
  modeType: SortOrderInput
  name: SortOrder
  plans: PlanOrderByRelationAggregateInput
  slug: SortOrder
}

input ProductRelationFilter @join__type(graph: CONTRACT) {
  is: ProductWhereInput
  isNot: ProductWhereInput
}

enum ProductSlug @join__type(graph: CONTRACT) {
  COMPANY_BASIC @join__enumValue(graph: CONTRACT)
  COMPANY_PREMIUM_ASSIGNMENT @join__enumValue(graph: CONTRACT)
  COMPANY_PREMIUM_PROFILE @join__enumValue(graph: CONTRACT)
  COMPANY_TOP @join__enumValue(graph: CONTRACT)
  FREELANCER_BASIC @join__enumValue(graph: CONTRACT)
  FREELANCER_PRO @join__enumValue(graph: CONTRACT)
  MARKETMONITOR_BASIC_APPLICATION @join__enumValue(graph: CONTRACT)
  MARKETMONITOR_BASIC_VIEW @join__enumValue(graph: CONTRACT)
  MARKETMONITOR_PREMIUM_APPLICATION @join__enumValue(graph: CONTRACT)
  MARKETMONITOR_PREMIUM_VIEW @join__enumValue(graph: CONTRACT)
  TOP_BOX @join__enumValue(graph: CONTRACT)
}

type ProductSumAggregate @join__type(graph: CONTRACT) {
  id: Int
}

input ProductUpdateOneRequiredWithoutPlansNestedInput
  @join__type(graph: CONTRACT) {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutPlansInput
  create: ProductCreateWithoutPlansInput
  update: ProductUpdateToOneWithWhereWithoutPlansInput
  upsert: ProductUpsertWithoutPlansInput
}

input ProductUpdateToOneWithWhereWithoutPlansInput
  @join__type(graph: CONTRACT) {
  data: ProductUpdateWithoutPlansInput!
  where: ProductWhereInput
}

input ProductUpdateWithoutPlansInput @join__type(graph: CONTRACT) {
  description: String
  externalProviderId: String
  externalProviderSync: Boolean
  modeType: ModeType
  name: String
  slug: ProductSlug
}

input ProductUpsertWithoutPlansInput @join__type(graph: CONTRACT) {
  create: ProductCreateWithoutPlansInput!
  update: ProductUpdateWithoutPlansInput!
  where: ProductWhereInput
}

input ProductWhereInput @join__type(graph: CONTRACT) {
  AND: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  description: StringFilter
  externalProviderId: StringNullableFilter
  externalProviderSync: BoolFilter
  id: IntFilter
  modeType: EnumModeTypeNullableFilter
  name: StringFilter
  plans: PlanListRelationFilter
  slug: EnumProductSlugFilter
}

input ProductWhereUniqueInput @join__type(graph: CONTRACT) {
  AND: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  description: StringFilter
  externalProviderId: StringNullableFilter
  externalProviderSync: BoolFilter
  id: Int
  modeType: EnumModeTypeNullableFilter
  name: StringFilter
  plans: PlanListRelationFilter
  slug: ProductSlug
}

type Profile @join__type(graph: CORE) {
  company: Company!
  companyId: Int!
  description: String
  id: ID!
  links: Link
  name: String!
}

type ProfileAvgAggregate @join__type(graph: CORE) {
  companyId: Float
  id: Float
}

type ProfileCountAggregate @join__type(graph: CORE) {
  _all: Int!
  companyId: Int!
  description: Int!
  id: Int!
  name: Int!
}

input ProfileCreateNestedOneWithoutCompanyInput @join__type(graph: CORE) {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutCompanyInput
  create: ProfileCreateWithoutCompanyInput
}

input ProfileCreateOrConnectWithoutCompanyInput @join__type(graph: CORE) {
  create: ProfileCreateWithoutCompanyInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateWithoutCompanyInput @join__type(graph: CORE) {
  description: String
  links: LinkCreateNestedOneWithoutProfileInput
  name: String!
}

type ProfileMaxAggregate @join__type(graph: CORE) {
  companyId: Int
  description: String
  id: Int
  name: String
}

type ProfileMinAggregate @join__type(graph: CORE) {
  companyId: Int
  description: String
  id: Int
  name: String
}

input ProfileNullableRelationFilter @join__type(graph: CORE) {
  is: ProfileWhereInput
  isNot: ProfileWhereInput
}

input ProfileOrderByWithRelationInput @join__type(graph: CORE) {
  company: CompanyOrderByWithRelationInput
  companyId: SortOrder
  description: SortOrderInput
  id: SortOrder
  links: LinkOrderByWithRelationInput
  name: SortOrder
}

input ProfileRelationFilter @join__type(graph: CORE) {
  is: ProfileWhereInput
  isNot: ProfileWhereInput
}

type ProfileSumAggregate @join__type(graph: CORE) {
  companyId: Int
  id: Int
}

input ProfileUpdateOneWithoutCompanyNestedInput @join__type(graph: CORE) {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutCompanyInput
  create: ProfileCreateWithoutCompanyInput
  delete: ProfileWhereInput
  disconnect: ProfileWhereInput
  update: ProfileUpdateToOneWithWhereWithoutCompanyInput
  upsert: ProfileUpsertWithoutCompanyInput
}

input ProfileUpdateToOneWithWhereWithoutCompanyInput @join__type(graph: CORE) {
  data: ProfileUpdateWithoutCompanyInput!
  where: ProfileWhereInput
}

input ProfileUpdateWithoutCompanyInput @join__type(graph: CORE) {
  description: String
  links: LinkUpdateOneWithoutProfileNestedInput
  name: String
}

input ProfileUpsertWithoutCompanyInput @join__type(graph: CORE) {
  create: ProfileCreateWithoutCompanyInput!
  update: ProfileUpdateWithoutCompanyInput!
  where: ProfileWhereInput
}

input ProfileWhereInput @join__type(graph: CORE) {
  AND: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  company: CompanyRelationFilter
  companyId: IntFilter
  description: StringNullableFilter
  id: IntFilter
  links: LinkNullableRelationFilter
  name: StringFilter
}

input ProfileWhereUniqueInput @join__type(graph: CORE) {
  AND: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  company: CompanyRelationFilter
  companyId: Int
  description: StringNullableFilter
  id: Int
  links: LinkNullableRelationFilter
  name: StringFilter
}

type PublicCompany @join__type(graph: CORE) {
  coverImageFile: File
  id: ID!
  logoImageFile: File
  name: String
}

type Query
  @join__type(graph: ASSIGNMENT_API)
  @join__type(graph: AUTH)
  @join__type(graph: CONTRACT)
  @join__type(graph: CORE)
  @join__type(graph: NOTIFICATION)
  @join__type(graph: SEARCH)
  @join__type(graph: STORAGE)
  @join__type(graph: VERIFICATION) {
  activeContractSlugs: [String!]! @join__field(graph: CONTRACT)
  allCompanyAssignmentApplications(
    companyId: Int!
    cursor: AssignmentApplicationWhereUniqueInput
    distinct: [AssignmentApplicationScalarFieldEnum!]
    orderBy: [AssignmentApplicationOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: AssignmentApplicationWhereInput
  ): [AssignmentApplication!] @join__field(graph: CORE)
  applicationProfile(
    cursor: ApplicationProfileWhereUniqueInput
    distinct: [ApplicationProfileScalarFieldEnum!]
    orderBy: [ApplicationProfileOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: ApplicationProfileWhereInput
  ): ApplicationProfile @join__field(graph: CORE)
  applicationProfiles(
    cursor: ApplicationProfileWhereUniqueInput
    distinct: [ApplicationProfileScalarFieldEnum!]
    orderBy: [ApplicationProfileOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: ApplicationProfileWhereInput
  ): [ApplicationProfile!] @join__field(graph: CORE)
  assignment(
    cursor: AssignmentWhereUniqueInput
    distinct: [AssignmentScalarFieldEnum!]
    orderBy: [AssignmentOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: AssignmentWhereInput
  ): Assignment @join__field(graph: CORE)
  assignmentAdmin(
    cursor: AssignmentWhereUniqueInput
    distinct: [AssignmentScalarFieldEnum!]
    orderBy: [AssignmentOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: AssignmentWhereInput
  ): Assignment @join__field(graph: CORE)
  assignmentApplication(
    cursor: AssignmentApplicationWhereUniqueInput
    distinct: [AssignmentApplicationScalarFieldEnum!]
    orderBy: [AssignmentApplicationOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: AssignmentApplicationWhereInput
  ): AssignmentApplication @join__field(graph: CORE)
  assignmentApplicationAdmin(
    cursor: AssignmentApplicationWhereUniqueInput
    distinct: [AssignmentApplicationScalarFieldEnum!]
    orderBy: [AssignmentApplicationOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: AssignmentApplicationWhereInput
  ): AssignmentApplication @join__field(graph: CORE)
  assignmentApplications(
    cursor: AssignmentApplicationWhereUniqueInput
    distinct: [AssignmentApplicationScalarFieldEnum!]
    orderBy: [AssignmentApplicationOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: AssignmentApplicationWhereInput
  ): [AssignmentApplication!] @join__field(graph: CORE)
  assignmentApplicationsAdmin(
    cursor: AssignmentApplicationWhereUniqueInput
    distinct: [AssignmentApplicationScalarFieldEnum!]
    orderBy: [AssignmentApplicationOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: AssignmentApplicationWhereInput
  ): [AssignmentApplication!] @join__field(graph: CORE)
  assignments(
    cursor: AssignmentWhereUniqueInput
    distinct: [AssignmentScalarFieldEnum!]
    orderBy: [AssignmentOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: AssignmentWhereInput
  ): [Assignment!] @join__field(graph: CORE)
  assignmentsAdmin(
    cursor: AssignmentWhereUniqueInput
    distinct: [AssignmentScalarFieldEnum!]
    orderBy: [AssignmentOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: AssignmentWhereInput
  ): [Assignment!] @join__field(graph: CORE)
  assignmentsRemainingUsage: [Credit!]! @join__field(graph: CONTRACT)
  canReview(
    assignmentId: Int!
    assignmentOwnerId: Int!
    companyId: Int!
  ): Boolean! @join__field(graph: CORE)
  checkEmailChange(token: String!): RequestEmailChangeOutput!
    @join__field(graph: AUTH)
  checkInvite(inviteToken: String!): CheckTokenOutput! @join__field(graph: AUTH)
  checkout(
    cursor: CheckoutWhereUniqueInput
    distinct: [CheckoutScalarFieldEnum!]
    orderBy: [CheckoutOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: CheckoutWhereInput
  ): Checkout! @join__field(graph: CONTRACT)
  companies(
    cursor: CompanyWhereUniqueInput
    distinct: [CompanyScalarFieldEnum!]
    orderBy: [CompanyOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: CompanyWhereInput
  ): [Company!]! @join__field(graph: CORE)
  companiesPublicData(
    cursor: CompanyWhereUniqueInput
    distinct: [CompanyScalarFieldEnum!]
    orderBy: [CompanyOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: CompanyWhereInput
  ): [PublicCompany!]! @join__field(graph: CORE)
  company(
    cursor: CompanyWhereUniqueInput
    distinct: [CompanyScalarFieldEnum!]
    orderBy: [CompanyOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: CompanyWhereInput
  ): Company! @join__field(graph: CORE)
  companyCheck(cocNumber: String!): Company @join__field(graph: CORE)
  companyReferences(
    cursor: CompanyReferenceWhereUniqueInput
    distinct: [CompanyReferenceScalarFieldEnum!]
    orderBy: [CompanyReferenceOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: CompanyReferenceWhereInput
  ): [CompanyReference!]! @join__field(graph: CORE)
  contracts(
    cursor: ContractWhereUniqueInput
    distinct: [ContractScalarFieldEnum!]
    orderBy: [ContractOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: ContractWhereInput
  ): [Contract!]! @join__field(graph: CONTRACT)
  countAllCompanyAssignmentApplications(companyId: Int!): Int!
    @join__field(graph: CORE)
  countAssignmentApplications(where: AssignmentApplicationWhereInput!): Int!
    @join__field(graph: CORE)
  countAssignmentApplicationsAdmin(
    where: AssignmentApplicationWhereInput!
  ): Int! @join__field(graph: CORE)
  countAssignments(where: AssignmentWhereInput!): Int! @join__field(graph: CORE)
  countAssignmentsAdmin(where: AssignmentWhereInput!): Int!
    @join__field(graph: CORE)
  countCompanies(where: CompanyWhereInput): Int! @join__field(graph: CORE)
  countCurrentCompanyUsers(where: UserWhereInput!): Int!
    @join__field(graph: CORE)
  countMyAssignments(where: AssignmentWhereInput!): Int!
    @join__field(graph: CORE)
  countMyCompanyAssignments(where: AssignmentWhereInput!): Int!
    @join__field(graph: CORE)
  countReviews(where: ReviewWhereInput!): Int! @join__field(graph: CORE)
  countSentAssignmentApplications(
    where: AssignmentApplicationWhereInput!
  ): Int! @join__field(graph: CORE)
  countUsers(where: UserWhereInput!): Int! @join__field(graph: CORE)
  currentCompanyUsers(
    cursor: UserWhereUniqueInput
    distinct: [UserScalarFieldEnum!]
    orderBy: [UserOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: UserWhereInput
  ): [User!]! @join__field(graph: CORE)
  fileDownloadLink(blobName: String!, containerName: String!): DownloadLink!
    @join__field(graph: STORAGE)
  fileIsOwner(
    blobName: String!
    companyId: Float!
    isOwner: Boolean!
    ownerId: Float!
  ): FileIsOwner! @join__field(graph: CORE)
  fileMetaData(blobName: String!, containerName: String!): FileMetadata!
    @join__field(graph: STORAGE)
  fileUploadLink(blobName: String!, containerName: String!): UploadLink!
    @join__field(graph: STORAGE)
  getReindexingStatus: String! @join__field(graph: SEARCH)
  getUserByEmail(email: String!): User! @join__field(graph: CORE)
  hasCompanyProfile(companyId: Int!): Boolean! @join__field(graph: CONTRACT)
  healthAssignmentApi: String! @join__field(graph: ASSIGNMENT_API)
  healthAuth: String! @join__field(graph: AUTH)
  healthContract: String! @join__field(graph: CONTRACT)
  healthCore: String! @join__field(graph: CORE)
  healthSearch: String! @join__field(graph: SEARCH)
  healthStorage: String! @join__field(graph: STORAGE)
  healthVerification: String! @join__field(graph: VERIFICATION)
  invoices(skip: Int, take: Int): [Invoice!]! @join__field(graph: CONTRACT)
  invoicesAdmin(companyId: Int, skip: Int, take: Int): [Invoice!]!
    @join__field(graph: CONTRACT)
  me: User! @join__field(graph: CORE)
  metadata: String! @join__field(graph: SEARCH)
  myApplicationProfile(
    cursor: ApplicationProfileWhereUniqueInput
    distinct: [ApplicationProfileScalarFieldEnum!]
    orderBy: [ApplicationProfileOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: ApplicationProfileWhereInput
  ): ApplicationProfile @join__field(graph: CORE)
  myApplicationProfiles(
    cursor: ApplicationProfileWhereUniqueInput
    distinct: [ApplicationProfileScalarFieldEnum!]
    orderBy: [ApplicationProfileOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: ApplicationProfileWhereInput
  ): [ApplicationProfile!] @join__field(graph: CORE)
  myAssignment(
    cursor: AssignmentWhereUniqueInput
    distinct: [AssignmentScalarFieldEnum!]
    orderBy: [AssignmentOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: AssignmentWhereInput
  ): Assignment @join__field(graph: CORE)
  myAssignments(
    cursor: AssignmentWhereUniqueInput
    distinct: [AssignmentScalarFieldEnum!]
    orderBy: [AssignmentOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: AssignmentWhereInput
  ): [Assignment!] @join__field(graph: CORE)
  myCompanyAssignments(
    cursor: AssignmentWhereUniqueInput
    distinct: [AssignmentScalarFieldEnum!]
    orderBy: [AssignmentOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: AssignmentWhereInput
  ): [Assignment!] @join__field(graph: CORE)
  myNotificationCount(where: NotificationWhereInput): Int!
    @join__field(graph: NOTIFICATION)
  myNotifications(
    cursor: NotificationWhereUniqueInput
    distinct: [NotificationScalarFieldEnum!]
    orderBy: [NotificationOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: NotificationWhereInput
  ): [Notification!]! @join__field(graph: NOTIFICATION)
  mySavedSearches(
    cursor: SavedSearchWhereUniqueInput
    distinct: [SavedSearchScalarFieldEnum!]
    orderBy: [SavedSearchOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: SavedSearchWhereInput
  ): [SavedSearch!]! @join__field(graph: CORE)
  myUnreadNotificationCount: Int! @join__field(graph: NOTIFICATION)
  plans(
    cursor: PlanWhereUniqueInput
    distinct: [PlanScalarFieldEnum!]
    orderBy: [PlanOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: PlanWhereInput
  ): [Plan!]! @join__field(graph: CONTRACT)
  products: [StripeProduct!]! @join__field(graph: CONTRACT)
  remainingUsage: [Credit!]! @join__field(graph: CONTRACT)
  remainingUsageByCreditType(usageType: String!): Credit!
    @join__field(graph: CONTRACT)
  remainingUsageByProductSlug(productSlug: String!): Credit!
    @join__field(graph: CONTRACT)
  reviewInformation(companyId: Float!): ReviewInformation!
    @join__field(graph: CORE)
  reviews(
    cursor: ReviewWhereUniqueInput
    distinct: [ReviewScalarFieldEnum!]
    orderBy: [ReviewOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: ReviewWhereInput
  ): [Review!]! @join__field(graph: CORE)
  savedSearch(
    markAsViewed: Boolean! = false
    where: SavedSearchFindUniqueInput!
  ): SavedSearch @join__field(graph: CORE)
  savedSearches(
    cursor: SavedSearchWhereUniqueInput
    distinct: [SavedSearchScalarFieldEnum!]
    orderBy: [SavedSearchOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: SavedSearchWhereInput
  ): [SavedSearch!]! @join__field(graph: CORE)
  search(
    limit: Int! = 24
    offset: Int! = 0
    query: SearchQueryInput!
    showFavoritesOnly: Boolean! = false
    sortMethod: String! = "relevance"
  ): SearchResponse! @join__field(graph: SEARCH)
  sentAssignmentApplications(
    cursor: AssignmentApplicationWhereUniqueInput
    distinct: [AssignmentApplicationScalarFieldEnum!]
    orderBy: [AssignmentApplicationOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: AssignmentApplicationWhereInput
  ): [AssignmentApplication!] @join__field(graph: CORE)
  topBoxCompanies: [Contract!]! @join__field(graph: CONTRACT)
  user(id: Int!): User @join__field(graph: CORE)
  users(
    cursor: UserWhereUniqueInput
    distinct: [UserScalarFieldEnum!]
    orderBy: [UserOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: UserWhereInput
  ): [User!]! @join__field(graph: CORE)
  verificationGetCompany(
    countryCode: VerificationCountryCodes!
    identificationNumber: String!
  ): VerificationCompanyResponse @join__field(graph: VERIFICATION)
  verificationSearchCompanies(
    countryCode: VerificationCountryCodes!
    page: Float
    pageSize: Float
    query: String!
  ): [VerificationCompanySearch!]! @join__field(graph: VERIFICATION)
  viewAssignmentDocument(assignmentId: Int!): String!
    @join__field(graph: SEARCH)
}

enum RateType @join__type(graph: CORE) {
  AGREEMENT @join__enumValue(graph: CORE)
  FIXED @join__enumValue(graph: CORE)
  HOUR @join__enumValue(graph: CORE)
  MARKETCONFORM @join__enumValue(graph: CORE)
  MONTH @join__enumValue(graph: CORE)
  UNIT @join__enumValue(graph: CORE)
  UNKNOWN @join__enumValue(graph: CORE)
  WEEK @join__enumValue(graph: CORE)
}

type RegisterOutput @join__type(graph: AUTH) {
  success: String!
}

enum RenewalInterval @join__type(graph: CONTRACT) {
  HALF_YEAR @join__enumValue(graph: CONTRACT)
  MONTH @join__enumValue(graph: CONTRACT)
  QUARTER @join__enumValue(graph: CONTRACT)
  YEAR @join__enumValue(graph: CONTRACT)
}

type RequestEmailChangeOutput @join__type(graph: AUTH) {
  success: Boolean!
}

type RequestInvitationOutput @join__type(graph: CORE) {
  success: Boolean!
}

type Review @join__type(graph: CORE) {
  assignment: Assignment
  assignmentId: Int
  company: Company!
  companyId: Int!
  content: String
  createdAt: DateTime!
  createdBy: User!
  createdById: Int!
  deletedAt: DateTime
  id: ID!
  receivedBy: User!
  receivedById: Int!
  type: ReviewType!
  updatedAt: DateTime!
}

type ReviewAvgAggregate @join__type(graph: CORE) {
  assignmentId: Float
  companyId: Float
  createdById: Float
  id: Float
  receivedById: Float
}

type ReviewCountAggregate @join__type(graph: CORE) {
  _all: Int!
  assignmentId: Int!
  companyId: Int!
  content: Int!
  createdAt: Int!
  createdById: Int!
  deletedAt: Int!
  id: Int!
  receivedById: Int!
  type: Int!
  updatedAt: Int!
}

input ReviewCreateInput @join__type(graph: CORE) {
  assignment: AssignmentCreateNestedOneWithoutReviewInput
  company: CompanyCreateNestedOneWithoutReviewsInput!
  content: String
  createdBy: UserCreateNestedOneWithoutCreatedReviewsInput!
  receivedBy: UserCreateNestedOneWithoutReceivedReviewsInput!
  type: ReviewType!
}

type ReviewInformation @join__type(graph: CORE) {
  tip: Float!
  top: Float!
}

type ReviewMaxAggregate @join__type(graph: CORE) {
  assignmentId: Int
  companyId: Int
  content: String
  createdAt: DateTime
  createdById: Int
  deletedAt: DateTime
  id: Int
  receivedById: Int
  type: ReviewType
  updatedAt: DateTime
}

type ReviewMinAggregate @join__type(graph: CORE) {
  assignmentId: Int
  companyId: Int
  content: String
  createdAt: DateTime
  createdById: Int
  deletedAt: DateTime
  id: Int
  receivedById: Int
  type: ReviewType
  updatedAt: DateTime
}

input ReviewOrderByWithRelationInput @join__type(graph: CORE) {
  assignment: AssignmentOrderByWithRelationInput
  assignmentId: SortOrderInput
  company: CompanyOrderByWithRelationInput
  companyId: SortOrder
  content: SortOrderInput
  createdAt: SortOrder
  createdBy: UserOrderByWithRelationInput
  createdById: SortOrder
  id: SortOrder
  receivedBy: UserOrderByWithRelationInput
  receivedById: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

enum ReviewScalarFieldEnum @join__type(graph: CORE) {
  assignmentId @join__enumValue(graph: CORE)
  companyId @join__enumValue(graph: CORE)
  content @join__enumValue(graph: CORE)
  createdAt @join__enumValue(graph: CORE)
  createdById @join__enumValue(graph: CORE)
  deletedAt @join__enumValue(graph: CORE)
  id @join__enumValue(graph: CORE)
  receivedById @join__enumValue(graph: CORE)
  type @join__enumValue(graph: CORE)
  updatedAt @join__enumValue(graph: CORE)
}

type ReviewSumAggregate @join__type(graph: CORE) {
  assignmentId: Int
  companyId: Int
  createdById: Int
  id: Int
  receivedById: Int
}

enum ReviewType @join__type(graph: CORE) {
  TIP @join__enumValue(graph: CORE)
  TOP @join__enumValue(graph: CORE)
}

input ReviewUnique_review_constraintCompoundUniqueInput
  @join__type(graph: CORE) {
  assignmentId: Int!
  companyId: Int!
  createdById: Int!
  receivedById: Int!
}

input ReviewWhereInput @join__type(graph: CORE) {
  AND: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  assignment: AssignmentNullableRelationFilter
  assignmentId: IntNullableFilter
  company: CompanyRelationFilter
  companyId: IntFilter
  content: StringNullableFilter
  createdAt: DateTimeFilter
  createdBy: UserRelationFilter
  createdById: IntFilter
  id: IntFilter
  receivedBy: UserRelationFilter
  receivedById: IntFilter
  type: EnumReviewTypeFilter
  updatedAt: DateTimeFilter
}

input ReviewWhereUniqueInput @join__type(graph: CORE) {
  AND: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  assignment: AssignmentNullableRelationFilter
  assignmentId: IntNullableFilter
  company: CompanyRelationFilter
  companyId: IntFilter
  content: StringNullableFilter
  createdAt: DateTimeFilter
  createdBy: UserRelationFilter
  createdById: IntFilter
  id: Int
  receivedBy: UserRelationFilter
  receivedById: IntFilter
  type: EnumReviewTypeFilter
  unique_review_constraint: ReviewUnique_review_constraintCompoundUniqueInput
  updatedAt: DateTimeFilter
}

type SavedSearch @join__type(graph: CORE) {
  _count: SavedSearchCount!
  batchAlert: Boolean!
  deletedAt: DateTime
  description: String!
  expertises: String
  id: ID!
  instantAlert: Boolean!
  lastViewedAt: DateTime!
  locations: String
  matches: [Match!]
  maxHoursPerWeek: Int
  minHoursPerWeek: Int
  newMatchesCount: Int!
  noMatchingIntermediaries: Boolean!
  onLocation: Boolean!
  searchTags: String
  type: SavedSearchType
  updatedAt: DateTime!
  user: User
  userId: Int
}

type SavedSearchAvgAggregate @join__type(graph: CORE) {
  id: Float
  maxHoursPerWeek: Float
  minHoursPerWeek: Float
  userId: Float
}

type SavedSearchCount @join__type(graph: CORE) {
  matches: Int!
}

type SavedSearchCountAggregate @join__type(graph: CORE) {
  _all: Int!
  batchAlert: Int!
  deletedAt: Int!
  description: Int!
  expertises: Int!
  id: Int!
  instantAlert: Int!
  lastViewedAt: Int!
  locations: Int!
  maxHoursPerWeek: Int!
  minHoursPerWeek: Int!
  noMatchingIntermediaries: Int!
  onLocation: Int!
  searchTags: Int!
  type: Int!
  updatedAt: Int!
  userId: Int!
}

input SavedSearchCreateInput @join__type(graph: CORE) {
  batchAlert: Boolean
  description: String!
  expertises: String
  instantAlert: Boolean
  lastViewedAt: DateTime
  locations: String
  maxHoursPerWeek: Int
  minHoursPerWeek: Int
  noMatchingIntermediaries: Boolean
  onLocation: Boolean
  searchTags: String
  type: SavedSearchType
}

input SavedSearchFindUniqueInput @join__type(graph: CORE) {
  id: Int!
}

type SavedSearchMaxAggregate @join__type(graph: CORE) {
  batchAlert: Boolean
  deletedAt: DateTime
  description: String
  expertises: String
  id: Int
  instantAlert: Boolean
  lastViewedAt: DateTime
  locations: String
  maxHoursPerWeek: Int
  minHoursPerWeek: Int
  noMatchingIntermediaries: Boolean
  onLocation: Boolean
  searchTags: String
  type: SavedSearchType
  updatedAt: DateTime
  userId: Int
}

type SavedSearchMinAggregate @join__type(graph: CORE) {
  batchAlert: Boolean
  deletedAt: DateTime
  description: String
  expertises: String
  id: Int
  instantAlert: Boolean
  lastViewedAt: DateTime
  locations: String
  maxHoursPerWeek: Int
  minHoursPerWeek: Int
  noMatchingIntermediaries: Boolean
  onLocation: Boolean
  searchTags: String
  type: SavedSearchType
  updatedAt: DateTime
  userId: Int
}

input SavedSearchOrderByWithRelationInput @join__type(graph: CORE) {
  batchAlert: SortOrder
  deletedAt: SortOrderInput
  description: SortOrder
  expertises: SortOrderInput
  id: SortOrder
  instantAlert: SortOrder
  lastViewedAt: SortOrder
  locations: SortOrderInput
  maxHoursPerWeek: SortOrderInput
  minHoursPerWeek: SortOrderInput
  noMatchingIntermediaries: SortOrder
  onLocation: SortOrder
  searchTags: SortOrderInput
  type: SortOrderInput
  updatedAt: SortOrder
  userId: SortOrderInput
}

enum SavedSearchScalarFieldEnum @join__type(graph: CORE) {
  batchAlert @join__enumValue(graph: CORE)
  deletedAt @join__enumValue(graph: CORE)
  description @join__enumValue(graph: CORE)
  expertises @join__enumValue(graph: CORE)
  id @join__enumValue(graph: CORE)
  instantAlert @join__enumValue(graph: CORE)
  lastViewedAt @join__enumValue(graph: CORE)
  locations @join__enumValue(graph: CORE)
  maxHoursPerWeek @join__enumValue(graph: CORE)
  minHoursPerWeek @join__enumValue(graph: CORE)
  noMatchingIntermediaries @join__enumValue(graph: CORE)
  onLocation @join__enumValue(graph: CORE)
  searchTags @join__enumValue(graph: CORE)
  type @join__enumValue(graph: CORE)
  updatedAt @join__enumValue(graph: CORE)
  userId @join__enumValue(graph: CORE)
}

type SavedSearchSumAggregate @join__type(graph: CORE) {
  id: Int
  maxHoursPerWeek: Int
  minHoursPerWeek: Int
  userId: Int
}

enum SavedSearchType @join__type(graph: CORE) {
  DATABASE @join__enumValue(graph: CORE)
  TEXTKERNEL @join__enumValue(graph: CORE)
}

input SavedSearchUpdateInput @join__type(graph: CORE) {
  batchAlert: Boolean
  description: String
  expertises: String
  instantAlert: Boolean
  lastViewedAt: DateTime
  locations: String
  maxHoursPerWeek: Int
  minHoursPerWeek: Int
  noMatchingIntermediaries: Boolean
  onLocation: Boolean
  searchTags: String
  type: SavedSearchType
}

input SavedSearchWhereInput @join__type(graph: CORE) {
  AND: [SavedSearchWhereInput!]
  NOT: [SavedSearchWhereInput!]
  OR: [SavedSearchWhereInput!]
  batchAlert: BoolFilter
  deletedAt: DateTimeNullableFilter
  description: StringFilter
  expertises: StringNullableFilter
  id: IntFilter
  instantAlert: BoolFilter
  lastViewedAt: DateTimeFilter
  locations: StringNullableFilter
  maxHoursPerWeek: IntNullableFilter
  minHoursPerWeek: IntNullableFilter
  noMatchingIntermediaries: BoolFilter
  onLocation: BoolFilter
  searchTags: StringNullableFilter
  type: EnumSavedSearchTypeNullableFilter
  updatedAt: DateTimeFilter
  userId: IntNullableFilter
}

input SavedSearchWhereUniqueInput @join__type(graph: CORE) {
  AND: [SavedSearchWhereInput!]
  NOT: [SavedSearchWhereInput!]
  OR: [SavedSearchWhereInput!]
  batchAlert: BoolFilter
  deletedAt: DateTimeNullableFilter
  description: StringFilter
  expertises: StringNullableFilter
  id: Int
  instantAlert: BoolFilter
  lastViewedAt: DateTimeFilter
  locations: StringNullableFilter
  maxHoursPerWeek: IntNullableFilter
  minHoursPerWeek: IntNullableFilter
  noMatchingIntermediaries: BoolFilter
  onLocation: BoolFilter
  searchTags: StringNullableFilter
  type: EnumSavedSearchTypeNullableFilter
  updatedAt: DateTimeFilter
  userId: IntNullableFilter
}

input SearchQueryInput @join__type(graph: SEARCH) {
  expertises: [String!] = []
  hoursFrom: Float
  hoursTo: Float
  locations: [String!] = []
  noMatchingIntermediaries: Boolean!
  onLocation: Boolean!
  publishAtFrom: DateTime
  searchTags: [String!] = []
}

type SearchResponse @join__type(graph: SEARCH) {
  count: Int!
  results: [SearchResult!]!
}

type SearchResult @join__type(graph: SEARCH) {
  assignment: Assignment!
  docID: ID!
  score: Float!
}

type Setting @join__type(graph: CORE) {
  createdAt: DateTime!
  id: ID!
  key: String!
  type: SettingType!
  updatedAt: DateTime!
  user: User!
  userId: Int!
  value: String!
}

type SettingAvgAggregate @join__type(graph: CORE) {
  id: Float
  userId: Float
}

type SettingCountAggregate @join__type(graph: CORE) {
  _all: Int!
  createdAt: Int!
  id: Int!
  key: Int!
  type: Int!
  updatedAt: Int!
  userId: Int!
  value: Int!
}

type SettingMaxAggregate @join__type(graph: CORE) {
  createdAt: DateTime
  id: Int
  key: String
  type: SettingType
  updatedAt: DateTime
  userId: Int
  value: String
}

type SettingMinAggregate @join__type(graph: CORE) {
  createdAt: DateTime
  id: Int
  key: String
  type: SettingType
  updatedAt: DateTime
  userId: Int
  value: String
}

type SettingSumAggregate @join__type(graph: CORE) {
  id: Int
  userId: Int
}

enum SettingType @join__type(graph: CORE) {
  COMMUNICATION @join__enumValue(graph: CORE)
}

enum SortOrder
  @join__type(graph: CONTRACT)
  @join__type(graph: CORE)
  @join__type(graph: NOTIFICATION) {
  asc
    @join__enumValue(graph: CONTRACT)
    @join__enumValue(graph: CORE)
    @join__enumValue(graph: NOTIFICATION)
  desc
    @join__enumValue(graph: CONTRACT)
    @join__enumValue(graph: CORE)
    @join__enumValue(graph: NOTIFICATION)
}

input SortOrderInput
  @join__type(graph: CONTRACT)
  @join__type(graph: CORE)
  @join__type(graph: NOTIFICATION) {
  nulls: NullsOrder
  sort: SortOrder!
}

type Status @join__type(graph: CORE) {
  createdAt: DateTime!
  description: String
  id: ID!
  key: String!
  modelId: Int
  modelType: StatusModelType!
  user: User
  userId: Int
}

type StatusAvgAggregate @join__type(graph: CORE) {
  id: Float
  modelId: Float
  userId: Float
}

type StatusCountAggregate @join__type(graph: CORE) {
  _all: Int!
  createdAt: Int!
  description: Int!
  id: Int!
  key: Int!
  modelId: Int!
  modelType: Int!
  userId: Int!
}

input StatusListRelationFilter @join__type(graph: CORE) {
  every: StatusWhereInput
  none: StatusWhereInput
  some: StatusWhereInput
}

type StatusMaxAggregate @join__type(graph: CORE) {
  createdAt: DateTime
  description: String
  id: Int
  key: String
  modelId: Int
  modelType: StatusModelType
  userId: Int
}

type StatusMinAggregate @join__type(graph: CORE) {
  createdAt: DateTime
  description: String
  id: Int
  key: String
  modelId: Int
  modelType: StatusModelType
  userId: Int
}

enum StatusModelType @join__type(graph: CORE) {
  ASSIGNMENT @join__enumValue(graph: CORE)
  ASSIGNMENT_APPLICATION @join__enumValue(graph: CORE)
  USER @join__enumValue(graph: CORE)
}

input StatusOrderByRelationAggregateInput @join__type(graph: CORE) {
  _count: SortOrder
}

type StatusSumAggregate @join__type(graph: CORE) {
  id: Int
  modelId: Int
  userId: Int
}

input StatusWhereInput @join__type(graph: CORE) {
  AND: [StatusWhereInput!]
  NOT: [StatusWhereInput!]
  OR: [StatusWhereInput!]
  description: StringNullableFilter
  id: IntFilter
  key: StringFilter
  modelId: IntNullableFilter
  modelType: EnumStatusModelTypeFilter
}

input StringFilter @join__type(graph: CONTRACT) @join__type(graph: CORE) {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter
  @join__type(graph: CONTRACT)
  @join__type(graph: CORE)
  @join__type(graph: NOTIFICATION) {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type StripePrice @join__type(graph: CONTRACT) {
  active: Boolean!
  created: Float!
  currency: String!
  deleted: Boolean
  id: String!
  livemode: Boolean!
  lookup_key: String
  nickname: String
  object: String!
  product: String!
  recurring: StripePriceRecurring
  tax_behavior: String
  type: String!
  unit_amount: Float
  unit_amount_decimal: String
}

type StripePriceRecurring @join__type(graph: CONTRACT) {
  aggregate_usage: String
  interval: String!
  interval_count: Float!
  trial_period_days: Float
  usage_type: String!
}

type StripeProduct @join__type(graph: CONTRACT) {
  active: Boolean!
  created: Float!
  default_price: String
  deleted: Boolean
  description: String
  id: String!
  livemode: Boolean!
  metadata: StripeProductMetadata!
  modeType: String!
  name: String!
  object: String!
  prices: [StripePrice!]
  type: String!
  unit_label: String
  updated: Float!
}

type StripeProductMetadata @join__type(graph: CONTRACT) {
  order: Float
  slug: String
  source: String
  type: String
}

type StripeSession @join__type(graph: CONTRACT, key: "id") {
  amount_subtotal: Float
  amount_total: Float
  cancel_url: String
  client_reference_id: String
  created: Float!
  currency: String
  expires_at: Float!
  id: String!
  invoice: String
  livemode: Boolean!
  mode: String!
  payment_intent: String
  payment_link: String
  payment_method_collection: String
  payment_method_configuration_details: String
  payment_method_options: String
  payment_method_types: [String!]!
  payment_status: String!
  status: String
  submit_type: String
  subscription: String
  success_url: String
  total_details: TotalDetails
  url: String
}

type StripeSubscription @join__type(graph: CONTRACT, key: "id") {
  billing_cycle_anchor: Float
  cancel_at: Float
  cancel_at_period_end: Boolean
  canceled_at: Float
  collection_method: String!
  created: Float
  currency: String
  current_period_end: Float
  current_period_start: Float
  customer: String
  days_until_due: Float
  default_payment_method: String
  default_source: String
  description: String
  ended_at: Float
  id: String
  items: StripeSubscriptionItemList
  latest_invoice: String
  metadata: StripeSubscriptionMetadata
  object: String
  start_date: Float
  status: String
}

type StripeSubscriptionItem @join__type(graph: CONTRACT) {
  created: Float!
  deleted: Boolean
  id: String!
  object: String!
  price: StripePrice!
  quantity: Float
  subscription: String!
}

type StripeSubscriptionItemList @join__type(graph: CONTRACT) {
  data: [StripeSubscriptionItem!]!
  has_more: Boolean!
  object: String!
  url: String!
}

type StripeSubscriptionMetadata @join__type(graph: CONTRACT) {
  companyId: Float
  type: String
}

type TotalDetails @join__type(graph: CONTRACT) {
  amount_tax: Float
}

type UpdateContractOutput @join__type(graph: CONTRACT) {
  isSuccess: Boolean!
}

input UpdateUserCompanyRolesInput @join__type(graph: CORE) {
  role: UserCompanyRole
}

input UpdateUsersCompaniesInput @join__type(graph: CORE) {
  userCompanyRole: UpdateUserCompanyRolesInput!
}

type UploadLink @join__type(graph: STORAGE) {
  blobName: String!
  expiresOn: DateTime
  url: String!
}

type UsageAvgAggregate @join__type(graph: CONTRACT) {
  amount: Float
  companyId: Float
  id: Float
  objectId: Float
}

type UsageCountAggregate @join__type(graph: CONTRACT) {
  _all: Int!
  amount: Int!
  companyId: Int!
  created: Int!
  id: Int!
  objectId: Int!
  type: Int!
}

type UsageMaxAggregate @join__type(graph: CONTRACT) {
  amount: Int
  companyId: Int
  created: DateTime
  id: Int
  objectId: Int
  type: UsageType
}

type UsageMinAggregate @join__type(graph: CONTRACT) {
  amount: Int
  companyId: Int
  created: DateTime
  id: Int
  objectId: Int
  type: UsageType
}

type UsageSumAggregate @join__type(graph: CONTRACT) {
  amount: Int
  companyId: Int
  id: Int
  objectId: Int
}

enum UsageType @join__type(graph: CONTRACT) {
  ASSIGNMENT @join__enumValue(graph: CONTRACT)
  ASSIGNMENT_APPLICATION @join__enumValue(graph: CONTRACT)
  ASSIGNMENT_VIEW @join__enumValue(graph: CONTRACT)
  COMPANY_PREMIUM_PROFILE @join__enumValue(graph: CONTRACT)
  TOP_BOX @join__enumValue(graph: CONTRACT)
}

type User
  @join__type(graph: CORE, key: "id")
  @join__type(graph: NOTIFICATION, key: "id", extension: true) {
  _count: UserCount! @join__field(graph: CORE)
  assignmentApplications: [AssignmentApplication!] @join__field(graph: CORE)
  assignmentRead: [AssignmentRead!] @join__field(graph: CORE)
  assignments: [Assignment!] @join__field(graph: CORE)
  confirmationToken: String @join__field(graph: CORE)
  confirmationTokenCreatedAt: DateTime @join__field(graph: CORE)
  confirmedAt: DateTime @join__field(graph: CORE)
  createdAt: DateTime! @join__field(graph: CORE)
  createdReviews: [Review!] @join__field(graph: CORE)
  dateOfBirth: DateTime @join__field(graph: CORE)
  email: String! @join__field(graph: CORE)
  emailChange: String @join__field(graph: CORE)
  externalId: String! @join__field(graph: CORE)
  favorites: [UserFavorite!] @join__field(graph: CORE)
  files: [File!] @join__field(graph: CORE)
  firebaseUid: String @join__field(graph: CORE)
  firstName: String @join__field(graph: CORE)
  id: ID!
  lastName: String @join__field(graph: CORE)
  linkedInUrl: String @join__field(graph: CORE)
  notifications: [Notification!]! @join__field(graph: NOTIFICATION)
  passwordResetTokenCreatedAt: DateTime @join__field(graph: CORE)
  phoneNumber: String @join__field(graph: CORE)
  profilePhoto: File @join__field(graph: CORE)
  profilePhotoFileId: Int @join__field(graph: CORE)
  receivedReviews: [Review!] @join__field(graph: CORE)
  role: UserRole! @join__field(graph: CORE)
  savedSearches: [SavedSearch!] @join__field(graph: CORE)
  settings: [Setting!] @join__field(graph: CORE)
  statuses: [Status!] @join__field(graph: CORE)
  termsConditionsAcceptedAt: DateTime @join__field(graph: CORE)
  termsConditionsVersion: String @join__field(graph: CORE)
  updatedAt: DateTime! @join__field(graph: CORE)
  userCompanies: [UsersCompanies!] @join__field(graph: CORE)
}

type UserAvgAggregate @join__type(graph: CORE) {
  id: Float
  profilePhotoFileId: Float
}

enum UserCompanyRole @join__type(graph: CORE) {
  COLLABORATOR @join__enumValue(graph: CORE)
  OWNER @join__enumValue(graph: CORE)
  SUPERVISOR @join__enumValue(graph: CORE)
}

type UserCount @join__type(graph: CORE) {
  applicationProfiles: Int!
  assignmentApplications: Int!
  assignmentRead: Int!
  assignments: Int!
  createdReviews: Int!
  favorites: Int!
  files: Int!
  receivedReviews: Int!
  savedSearches: Int!
  settings: Int!
  statuses: Int!
  userCompanies: Int!
}

type UserCountAggregate @join__type(graph: CORE) {
  _all: Int!
  confirmationToken: Int!
  confirmationTokenCreatedAt: Int!
  confirmedAt: Int!
  createdAt: Int!
  dateOfBirth: Int!
  email: Int!
  emailChange: Int!
  externalId: Int!
  firebaseUid: Int!
  firstName: Int!
  id: Int!
  lastName: Int!
  linkedInUrl: Int!
  passwordResetTokenCreatedAt: Int!
  phoneNumber: Int!
  profilePhotoFileId: Int!
  role: Int!
  termsConditionsAcceptedAt: Int!
  termsConditionsVersion: Int!
  updatedAt: Int!
}

input UserCreateNestedOneWithoutCreatedReviewsInput @join__type(graph: CORE) {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCreatedReviewsInput
  create: UserCreateWithoutCreatedReviewsInput
}

input UserCreateNestedOneWithoutReceivedReviewsInput @join__type(graph: CORE) {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReceivedReviewsInput
  create: UserCreateWithoutReceivedReviewsInput
}

input UserCreateOrConnectWithoutCreatedReviewsInput @join__type(graph: CORE) {
  create: UserCreateWithoutCreatedReviewsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutReceivedReviewsInput @join__type(graph: CORE) {
  create: UserCreateWithoutReceivedReviewsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutCreatedReviewsInput @join__type(graph: CORE) {
  dateOfBirth: DateTime
  email: String!
  emailChange: String
  externalId: String
  firebaseUid: String
  firstName: String
  lastName: String
  linkedInUrl: String
  phoneNumber: String
  profilePhoto: FileCreateNestedOneWithoutUserInput
  termsConditionsAcceptedAt: DateTime
  termsConditionsVersion: String
}

input UserCreateWithoutReceivedReviewsInput @join__type(graph: CORE) {
  dateOfBirth: DateTime
  email: String!
  emailChange: String
  externalId: String
  firebaseUid: String
  firstName: String
  lastName: String
  linkedInUrl: String
  phoneNumber: String
  profilePhoto: FileCreateNestedOneWithoutUserInput
  termsConditionsAcceptedAt: DateTime
  termsConditionsVersion: String
}

type UserFavorite @join__type(graph: CORE) {
  assignment: Assignment!
  assignmentId: Int!
  createdAt: DateTime!
  favorite: Boolean!
  id: ID!
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

type UserFavoriteAvgAggregate @join__type(graph: CORE) {
  assignmentId: Float
  id: Float
  userId: Float
}

type UserFavoriteCountAggregate @join__type(graph: CORE) {
  _all: Int!
  assignmentId: Int!
  createdAt: Int!
  favorite: Int!
  id: Int!
  updatedAt: Int!
  userId: Int!
}

type UserFavoriteMaxAggregate @join__type(graph: CORE) {
  assignmentId: Int
  createdAt: DateTime
  favorite: Boolean
  id: Int
  updatedAt: DateTime
  userId: Int
}

type UserFavoriteMinAggregate @join__type(graph: CORE) {
  assignmentId: Int
  createdAt: DateTime
  favorite: Boolean
  id: Int
  updatedAt: DateTime
  userId: Int
}

type UserFavoriteSumAggregate @join__type(graph: CORE) {
  assignmentId: Int
  id: Int
  userId: Int
}

type UserInformationAvgAggregate @join__type(graph: NOTIFICATION) {
  unreadNotificationCount: Float
  userId: Float
}

type UserInformationCountAggregate @join__type(graph: NOTIFICATION) {
  _all: Int!
  unreadNotificationCount: Int!
  updatedAt: Int!
  userId: Int!
}

type UserInformationMaxAggregate @join__type(graph: NOTIFICATION) {
  unreadNotificationCount: Int
  updatedAt: DateTime
  userId: Int
}

type UserInformationMinAggregate @join__type(graph: NOTIFICATION) {
  unreadNotificationCount: Int
  updatedAt: DateTime
  userId: Int
}

type UserInformationSumAggregate @join__type(graph: NOTIFICATION) {
  unreadNotificationCount: Int
  userId: Int
}

type UserMaxAggregate @join__type(graph: CORE) {
  confirmationToken: String
  confirmationTokenCreatedAt: DateTime
  confirmedAt: DateTime
  createdAt: DateTime
  dateOfBirth: DateTime
  email: String
  emailChange: String
  externalId: String
  firebaseUid: String
  firstName: String
  id: Int
  lastName: String
  linkedInUrl: String
  passwordResetTokenCreatedAt: DateTime
  phoneNumber: String
  profilePhotoFileId: Int
  role: UserRole
  termsConditionsAcceptedAt: DateTime
  termsConditionsVersion: String
  updatedAt: DateTime
}

type UserMinAggregate @join__type(graph: CORE) {
  confirmationToken: String
  confirmationTokenCreatedAt: DateTime
  confirmedAt: DateTime
  createdAt: DateTime
  dateOfBirth: DateTime
  email: String
  emailChange: String
  externalId: String
  firebaseUid: String
  firstName: String
  id: Int
  lastName: String
  linkedInUrl: String
  passwordResetTokenCreatedAt: DateTime
  phoneNumber: String
  profilePhotoFileId: Int
  role: UserRole
  termsConditionsAcceptedAt: DateTime
  termsConditionsVersion: String
  updatedAt: DateTime
}

input UserNullableRelationFilter @join__type(graph: CORE) {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserOrderByWithRelationInput @join__type(graph: CORE) {
  createdAt: SortOrder
  dateOfBirth: SortOrderInput
  email: SortOrder
  emailChange: SortOrderInput
  externalId: SortOrder
  firebaseUid: SortOrderInput
  firstName: SortOrderInput
  id: SortOrder
  lastName: SortOrderInput
  linkedInUrl: SortOrderInput
  phoneNumber: SortOrderInput
  profilePhoto: FileOrderByWithRelationInput
  profilePhotoFileId: SortOrderInput
  statuses: StatusOrderByRelationAggregateInput
  termsConditionsAcceptedAt: SortOrderInput
  termsConditionsVersion: SortOrderInput
  updatedAt: SortOrder
  userCompanies: UsersCompaniesOrderByRelationAggregateInput
}

input UserRelationFilter @join__type(graph: CORE) {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserRole @join__type(graph: CORE) {
  ADMIN @join__enumValue(graph: CORE)
  SERVICE @join__enumValue(graph: CORE)
  USER @join__enumValue(graph: CORE)
}

enum UserScalarFieldEnum @join__type(graph: CORE) {
  confirmationToken @join__enumValue(graph: CORE)
  confirmationTokenCreatedAt @join__enumValue(graph: CORE)
  confirmedAt @join__enumValue(graph: CORE)
  createdAt @join__enumValue(graph: CORE)
  dateOfBirth @join__enumValue(graph: CORE)
  deletedAt @join__enumValue(graph: CORE)
  email @join__enumValue(graph: CORE)
  emailChange @join__enumValue(graph: CORE)
  emailChangeToken @join__enumValue(graph: CORE)
  emailChangeTokenCreatedAt @join__enumValue(graph: CORE)
  externalId @join__enumValue(graph: CORE)
  firebaseUid @join__enumValue(graph: CORE)
  firstName @join__enumValue(graph: CORE)
  id @join__enumValue(graph: CORE)
  lastName @join__enumValue(graph: CORE)
  legacyPassword @join__enumValue(graph: CORE)
  legacySalt @join__enumValue(graph: CORE)
  linkedInUrl @join__enumValue(graph: CORE)
  passwordResetToken @join__enumValue(graph: CORE)
  passwordResetTokenCreatedAt @join__enumValue(graph: CORE)
  phoneNumber @join__enumValue(graph: CORE)
  profilePhotoFileId @join__enumValue(graph: CORE)
  role @join__enumValue(graph: CORE)
  termsConditionsAcceptedAt @join__enumValue(graph: CORE)
  termsConditionsVersion @join__enumValue(graph: CORE)
  updatedAt @join__enumValue(graph: CORE)
}

type UserSumAggregate @join__type(graph: CORE) {
  id: Int
  profilePhotoFileId: Int
}

input UserUpdateInput @join__type(graph: CORE) {
  dateOfBirth: DateTime
  firstName: String
  lastName: String
  linkedInUrl: String
  passwordResetToken: String
  phoneNumber: String
}

input UserWhereInput @join__type(graph: CORE) {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  dateOfBirth: DateTimeNullableFilter
  email: StringFilter
  emailChange: StringNullableFilter
  externalId: StringFilter
  firebaseUid: StringNullableFilter
  firstName: StringNullableFilter
  id: IntFilter
  lastName: StringNullableFilter
  linkedInUrl: StringNullableFilter
  phoneNumber: StringNullableFilter
  profilePhoto: FileNullableRelationFilter
  profilePhotoFileId: IntNullableFilter
  statuses: StatusListRelationFilter
  termsConditionsAcceptedAt: DateTimeNullableFilter
  termsConditionsVersion: StringNullableFilter
  updatedAt: DateTimeFilter
  userCompanies: UsersCompaniesListRelationFilter
}

input UserWhereUniqueInput @join__type(graph: CORE) {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  dateOfBirth: DateTimeNullableFilter
  email: String
  emailChange: String
  externalId: String
  firebaseUid: StringNullableFilter
  firstName: StringNullableFilter
  id: Int
  lastName: StringNullableFilter
  linkedInUrl: StringNullableFilter
  phoneNumber: StringNullableFilter
  profilePhoto: FileNullableRelationFilter
  profilePhotoFileId: Int
  statuses: StatusListRelationFilter
  termsConditionsAcceptedAt: DateTimeNullableFilter
  termsConditionsVersion: StringNullableFilter
  updatedAt: DateTimeFilter
  userCompanies: UsersCompaniesListRelationFilter
}

type UsersCompanies
  @join__type(graph: ASSIGNMENT_API, key: "id", extension: true)
  @join__type(graph: CORE, key: "id") {
  _count: UsersCompaniesCount! @join__field(graph: CORE)
  apiKey: String! @join__field(graph: ASSIGNMENT_API)
  company: Company! @join__field(graph: CORE)
  companyId: Int! @join__field(graph: CORE)
  createdAt: DateTime! @join__field(graph: CORE)
  id: ID!
  status: UsersCompaniesStatus! @join__field(graph: CORE)
  updatedAt: DateTime! @join__field(graph: CORE)
  user: User! @join__field(graph: CORE)
  userCompanyRoles: [UsersCompanyRoles!] @join__field(graph: CORE)
  userId: Int! @join__field(graph: CORE)
}

type UsersCompaniesAvgAggregate @join__type(graph: CORE) {
  companyId: Float
  id: Float
  userId: Float
}

type UsersCompaniesCount @join__type(graph: CORE) {
  userCompanyRoles: Int!
}

type UsersCompaniesCountAggregate @join__type(graph: CORE) {
  _all: Int!
  companyId: Int!
  createdAt: Int!
  id: Int!
  status: Int!
  updatedAt: Int!
  userId: Int!
}

input UsersCompaniesListRelationFilter @join__type(graph: CORE) {
  every: UsersCompaniesWhereInput
  none: UsersCompaniesWhereInput
  some: UsersCompaniesWhereInput
}

type UsersCompaniesMaxAggregate @join__type(graph: CORE) {
  companyId: Int
  createdAt: DateTime
  id: Int
  status: UsersCompaniesStatus
  updatedAt: DateTime
  userId: Int
}

type UsersCompaniesMinAggregate @join__type(graph: CORE) {
  companyId: Int
  createdAt: DateTime
  id: Int
  status: UsersCompaniesStatus
  updatedAt: DateTime
  userId: Int
}

input UsersCompaniesOrderByRelationAggregateInput @join__type(graph: CORE) {
  _count: SortOrder
}

enum UsersCompaniesStatus @join__type(graph: CORE) {
  ACTIVE @join__enumValue(graph: CORE)
  INVITED @join__enumValue(graph: CORE)
  REQUESTED @join__enumValue(graph: CORE)
}

type UsersCompaniesSumAggregate @join__type(graph: CORE) {
  companyId: Int
  id: Int
  userId: Int
}

input UsersCompaniesUserIdCompanyIdCompoundUniqueInput
  @join__type(graph: CORE) {
  companyId: Int!
  userId: Int!
}

input UsersCompaniesWhereInput @join__type(graph: CORE) {
  AND: [UsersCompaniesWhereInput!]
  NOT: [UsersCompaniesWhereInput!]
  OR: [UsersCompaniesWhereInput!]
  companyId: IntFilter
  id: IntFilter
  updatedAt: DateTimeFilter
  userCompanyRoles: UsersCompanyRolesListRelationFilter
  userId: IntFilter
}

input UsersCompaniesWhereUniqueInput @join__type(graph: CORE) {
  AND: [UsersCompaniesWhereInput!]
  NOT: [UsersCompaniesWhereInput!]
  OR: [UsersCompaniesWhereInput!]
  companyId: IntFilter
  id: Int
  updatedAt: DateTimeFilter
  userCompanyRoles: UsersCompanyRolesListRelationFilter
  userId: IntFilter
  userId_companyId: UsersCompaniesUserIdCompanyIdCompoundUniqueInput
}

type UsersCompanyRoles @join__type(graph: CORE) {
  id: ID!
  role: UserCompanyRole!
  userCompanyId: Int!
}

type UsersCompanyRolesAvgAggregate @join__type(graph: CORE) {
  id: Float
  userCompanyId: Float
}

type UsersCompanyRolesCountAggregate @join__type(graph: CORE) {
  _all: Int!
  id: Int!
  role: Int!
  userCompanyId: Int!
}

input UsersCompanyRolesListRelationFilter @join__type(graph: CORE) {
  every: UsersCompanyRolesWhereInput
  none: UsersCompanyRolesWhereInput
  some: UsersCompanyRolesWhereInput
}

type UsersCompanyRolesMaxAggregate @join__type(graph: CORE) {
  id: Int
  role: UserCompanyRole
  userCompanyId: Int
}

type UsersCompanyRolesMinAggregate @join__type(graph: CORE) {
  id: Int
  role: UserCompanyRole
  userCompanyId: Int
}

type UsersCompanyRolesSumAggregate @join__type(graph: CORE) {
  id: Int
  userCompanyId: Int
}

input UsersCompanyRolesWhereInput @join__type(graph: CORE) {
  AND: [UsersCompanyRolesWhereInput!]
  NOT: [UsersCompanyRolesWhereInput!]
  OR: [UsersCompanyRolesWhereInput!]
  id: IntFilter
  role: EnumUserCompanyRoleFilter
  userCompanyId: IntFilter
}

type VerificationCompanyResponse @join__type(graph: VERIFICATION) {
  city: String
  fullAddress: String
  houseNumber: String
  identificationNumber: String!
  name: String!
  postalCode: String
  street: String
}

type VerificationCompanySearch @join__type(graph: VERIFICATION) {
  address: String
  city: String
  identificationNumber: String!
  name: String!
}

enum VerificationCountryCodes @join__type(graph: VERIFICATION) {
  NL @join__enumValue(graph: VERIFICATION)
}

scalar join__FieldSet

enum join__Graph {
  ASSIGNMENT_API
    @join__graph(
      name: "assignment-api"
      url: "http://host.docker.internal:3009/graphql"
    )
  AUTH
    @join__graph(name: "auth", url: "http://host.docker.internal:3002/graphql")
  CONTRACT
    @join__graph(
      name: "contract"
      url: "http://host.docker.internal:3007/graphql"
    )
  CORE
    @join__graph(name: "core", url: "http://host.docker.internal:3001/graphql")
  NOTIFICATION
    @join__graph(
      name: "notification"
      url: "http://host.docker.internal:3003/graphql"
    )
  SEARCH
    @join__graph(
      name: "search"
      url: "http://host.docker.internal:3006/graphql"
    )
  STORAGE
    @join__graph(
      name: "storage"
      url: "http://host.docker.internal:3004/graphql"
    )
  VERIFICATION
    @join__graph(
      name: "verification"
      url: "http://host.docker.internal:3005/graphql"
    )
}

scalar link__Import

enum link__Purpose {
  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
}
